
stm32_h7_canbase_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0b4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800c358  0800c358  0001c358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8ec  0800c8ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8ec  0800c8ec  0001c8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8f4  0800c8f4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c8f4  0800c8f4  0001c8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8f8  0800c8f8  0001c8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  24000000  0800c8fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  240001e0  0800cadc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000460  0800cadc  00020460  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cfd7  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ca9  00000000  00000000  0003d1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0003fe90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  000415a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e0ed  00000000  00000000  00042b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b47c  00000000  00000000  00080c85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4104  00000000  00000000  0009c101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00240205  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000731c  00000000  00000000  00240258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c33c 	.word	0x0800c33c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800c33c 	.word	0x0800c33c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <PID_Initialize.0>:
	int32_t DC = 65535;

	double e = 0.0, e_1=0.0, u=0.0, u_1=0.0;
	double kp, ti, q0, q1;

	void PID_Initialize( void ){
 80007c0:	b480      	push	{r7}
 80007c2:	b08b      	sub	sp, #44	; 0x2c
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4663      	mov	r3, ip
 80007c8:	f8c7 c004 	str.w	ip, [r7, #4]
	    double T = 1.59524;            //sample rate
 80007cc:	a133      	add	r1, pc, #204	; (adr r1, 800089c <PID_Initialize.0+0xdc>)
 80007ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007d2:	e9c7 0108 	strd	r0, r1, [r7, #32]
	    //Complete here with the identified
	    //parameters of the plant
		double k = 1;
 80007d6:	f04f 0000 	mov.w	r0, #0
 80007da:	492f      	ldr	r1, [pc, #188]	; (8000898 <PID_Initialize.0+0xd8>)
 80007dc:	e9c7 0106 	strd	r0, r1, [r7, #24]
		double tao = 14.17;
 80007e0:	a125      	add	r1, pc, #148	; (adr r1, 8000878 <PID_Initialize.0+0xb8>)
 80007e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007e6:	e9c7 0104 	strd	r0, r1, [r7, #16]
		double theta = 18.45;
 80007ea:	a125      	add	r1, pc, #148	; (adr r1, 8000880 <PID_Initialize.0+0xc0>)
 80007ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007f0:	e9c7 0102 	strd	r0, r1, [r7, #8]

		//Calculate the coefficients for
		//the discrete PID controller
		kp = (0.9 * tao) / (k * theta);
 80007f4:	ed97 7b04 	vldr	d7, [r7, #16]
 80007f8:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8000888 <PID_Initialize.0+0xc8>
 80007fc:	ee27 5b06 	vmul.f64	d5, d7, d6
 8000800:	ed97 6b06 	vldr	d6, [r7, #24]
 8000804:	ed97 7b02 	vldr	d7, [r7, #8]
 8000808:	ee26 6b07 	vmul.f64	d6, d6, d7
 800080c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000810:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
		ti = 3.333333 * theta;
 8000814:	ed97 7b02 	vldr	d7, [r7, #8]
 8000818:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8000890 <PID_Initialize.0+0xd0>
 800081c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000820:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
		q0 = kp + ((kp * T)/(2.0 * ti));
 8000824:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000828:	ed97 7b08 	vldr	d7, [r7, #32]
 800082c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000830:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000834:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000838:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800083c:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8000840:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000844:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
		q1 = ((kp * T)/(2.0 * ti)) - kp;
 8000848:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 800084c:	ed97 7b08 	vldr	d7, [r7, #32]
 8000850:	ee26 5b07 	vmul.f64	d5, d6, d7
 8000854:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8000858:	ee37 7b07 	vadd.f64	d7, d7, d7
 800085c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000860:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8000864:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000868:	ed83 7b08 	vstr	d7, [r3, #32]
	}
 800086c:	bf00      	nop
 800086e:	372c      	adds	r7, #44	; 0x2c
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	3d70a3d7 	.word	0x3d70a3d7
 800087c:	402c570a 	.word	0x402c570a
 8000880:	33333333 	.word	0x33333333
 8000884:	40327333 	.word	0x40327333
 8000888:	cccccccd 	.word	0xcccccccd
 800088c:	3feccccc 	.word	0x3feccccc
 8000890:	7ded6ba9 	.word	0x7ded6ba9
 8000894:	400aaaaa 	.word	0x400aaaaa
 8000898:	3ff00000 	.word	0x3ff00000
 800089c:	60d4562e 	.word	0x60d4562e
 80008a0:	3ff9861a 	.word	0x3ff9861a

080008a4 <main>:
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b0a0      	sub	sp, #128	; 0x80
 80008a8:	af00      	add	r7, sp, #0
int main(void)
 80008aa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008ae:	66bb      	str	r3, [r7, #104]	; 0x68
  timeout = 0xFFFF;
 80008b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008b6:	bf00      	nop
 80008b8:	4b76      	ldr	r3, [pc, #472]	; (8000a94 <main+0x1f0>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d004      	beq.n	80008ce <main+0x2a>
 80008c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008c6:	1e5a      	subs	r2, r3, #1
 80008c8:	67fa      	str	r2, [r7, #124]	; 0x7c
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	dcf4      	bgt.n	80008b8 <main+0x14>
  if ( timeout < 0 )
 80008ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	da01      	bge.n	80008d8 <main+0x34>
  Error_Handler();
 80008d4:	f000 fd94 	bl	8001400 <Error_Handler>
  HAL_Init();
 80008d8:	f001 f872 	bl	80019c0 <HAL_Init>
  SystemClock_Config();
 80008dc:	f000 fa86 	bl	8000dec <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 80008e0:	4b6c      	ldr	r3, [pc, #432]	; (8000a94 <main+0x1f0>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e6:	4a6b      	ldr	r2, [pc, #428]	; (8000a94 <main+0x1f0>)
 80008e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008f0:	4b68      	ldr	r3, [pc, #416]	; (8000a94 <main+0x1f0>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 80008fe:	2000      	movs	r0, #0
 8000900:	f003 fcf8 	bl	80042f4 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000904:	2100      	movs	r1, #0
 8000906:	2000      	movs	r0, #0
 8000908:	f003 fd0e 	bl	8004328 <HAL_HSEM_Release>
timeout = 0xFFFF;
 800090c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000910:	67fb      	str	r3, [r7, #124]	; 0x7c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000912:	bf00      	nop
 8000914:	4b5f      	ldr	r3, [pc, #380]	; (8000a94 <main+0x1f0>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800091c:	2b00      	cmp	r3, #0
 800091e:	d104      	bne.n	800092a <main+0x86>
 8000920:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000922:	1e5a      	subs	r2, r3, #1
 8000924:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000926:	2b00      	cmp	r3, #0
 8000928:	dcf4      	bgt.n	8000914 <main+0x70>
if ( timeout < 0 )
 800092a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800092c:	2b00      	cmp	r3, #0
 800092e:	da01      	bge.n	8000934 <main+0x90>
Error_Handler();
 8000930:	f000 fd66 	bl	8001400 <Error_Handler>
  MX_GPIO_Init();
 8000934:	f000 fcba 	bl	80012ac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000938:	f000 fc6c 	bl	8001214 <MX_USART3_UART_Init>
  MX_FDCAN1_Init();
 800093c:	f000 fb38 	bl	8000fb0 <MX_FDCAN1_Init>
  MX_ADC3_Init();
 8000940:	f000 fad8 	bl	8000ef4 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000944:	f000 fbf0 	bl	8001128 <MX_TIM2_Init>
	printf("Hello World\n\r");
 8000948:	4853      	ldr	r0, [pc, #332]	; (8000a98 <main+0x1f4>)
 800094a:	f009 fcbf 	bl	800a2cc <iprintf>
	uint8_t TxData[8] = {0x1D, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 800094e:	4a53      	ldr	r2, [pc, #332]	; (8000a9c <main+0x1f8>)
 8000950:	f107 0318 	add.w	r3, r7, #24
 8000954:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000958:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t TxData2[8] = {0x0A, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 800095c:	4a50      	ldr	r2, [pc, #320]	; (8000aa0 <main+0x1fc>)
 800095e:	f107 0310 	add.w	r3, r7, #16
 8000962:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000966:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t Setpoint = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	int32_t DC = 65535;
 8000970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000974:	663b      	str	r3, [r7, #96]	; 0x60
	double e = 0.0, e_1=0.0, u=0.0, u_1=0.0;
 8000976:	f04f 0200 	mov.w	r2, #0
 800097a:	f04f 0300 	mov.w	r3, #0
 800097e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8000982:	f04f 0200 	mov.w	r2, #0
 8000986:	f04f 0300 	mov.w	r3, #0
 800098a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800098e:	f04f 0200 	mov.w	r2, #0
 8000992:	f04f 0300 	mov.w	r3, #0
 8000996:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800099a:	f04f 0200 	mov.w	r2, #0
 800099e:	f04f 0300 	mov.w	r3, #0
 80009a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		//	Imprimir el valor de presion final
		printf("Pressure = %d PSI \n\r", Presion);
		return Presion;
	}

	RxHeader.Identifier = 0x10FEF9A3;
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <main+0x200>)
 80009a8:	4a3f      	ldr	r2, [pc, #252]	; (8000aa8 <main+0x204>)
 80009aa:	601a      	str	r2, [r3, #0]
	PID_Initialize();
 80009ac:	f107 0320 	add.w	r3, r7, #32
 80009b0:	469c      	mov	ip, r3
 80009b2:	f7ff ff05 	bl	80007c0 <PID_Initialize.0>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2101      	movs	r1, #1
 80009ba:	483c      	ldr	r0, [pc, #240]	; (8000aac <main+0x208>)
 80009bc:	f003 fc66 	bl	800428c <HAL_GPIO_WritePin>
	while (1)
	{
	    /*	Transmisión de datos	*/
	   	if(HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80009c0:	f107 0318 	add.w	r3, r7, #24
 80009c4:	461a      	mov	r2, r3
 80009c6:	493a      	ldr	r1, [pc, #232]	; (8000ab0 <main+0x20c>)
 80009c8:	483a      	ldr	r0, [pc, #232]	; (8000ab4 <main+0x210>)
 80009ca:	f002 fe68 	bl	800369e <HAL_FDCAN_AddMessageToTxFifoQ>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d004      	beq.n	80009de <main+0x13a>
	   	{
	   		printf("aux sent\n\r");
 80009d4:	4838      	ldr	r0, [pc, #224]	; (8000ab8 <main+0x214>)
 80009d6:	f009 fc79 	bl	800a2cc <iprintf>
	   		Error_Handler();
 80009da:	f000 fd11 	bl	8001400 <Error_Handler>
	   	}
	   	//	Significant delay to show the functionality on a slow pace.
	   	//HAL_Delay(500);

	   	printf("\nMessage sent\r");
 80009de:	4837      	ldr	r0, [pc, #220]	; (8000abc <main+0x218>)
 80009e0:	f009 fc74 	bl	800a2cc <iprintf>


	   	/*	Recepción de datos	*/
		while (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK);
 80009e4:	bf00      	nop
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	4a2e      	ldr	r2, [pc, #184]	; (8000aa4 <main+0x200>)
 80009ec:	2140      	movs	r1, #64	; 0x40
 80009ee:	4831      	ldr	r0, [pc, #196]	; (8000ab4 <main+0x210>)
 80009f0:	f002 feb0 	bl	8003754 <HAL_FDCAN_GetRxMessage>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1f5      	bne.n	80009e6 <main+0x142>

		//HAL_Delay(10);
		printf("CAN ID: 0x%.8lX \n\r", RxHeader.Identifier);
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <main+0x200>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4619      	mov	r1, r3
 8000a00:	482f      	ldr	r0, [pc, #188]	; (8000ac0 <main+0x21c>)
 8000a02:	f009 fc63 	bl	800a2cc <iprintf>

		printf("CAN Message: \n\r");
 8000a06:	482f      	ldr	r0, [pc, #188]	; (8000ac4 <main+0x220>)
 8000a08:	f009 fc60 	bl	800a2cc <iprintf>
		int dataSize = RxHeader.DataLength >>  16;
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <main+0x200>)
 8000a0e:	68db      	ldr	r3, [r3, #12]
 8000a10:	0c1b      	lsrs	r3, r3, #16
 8000a12:	673b      	str	r3, [r7, #112]	; 0x70
		for (int i = 0; i < dataSize; i ++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a18:	e00b      	b.n	8000a32 <main+0x18e>
		{
		    printf(" %x", RxData[i]);
 8000a1a:	f107 0208 	add.w	r2, r7, #8
 8000a1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a20:	4413      	add	r3, r2
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	4828      	ldr	r0, [pc, #160]	; (8000ac8 <main+0x224>)
 8000a28:	f009 fc50 	bl	800a2cc <iprintf>
		for (int i = 0; i < dataSize; i ++)
 8000a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000a2e:	3301      	adds	r3, #1
 8000a30:	67bb      	str	r3, [r7, #120]	; 0x78
 8000a32:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000a34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000a36:	429a      	cmp	r2, r3
 8000a38:	dbef      	blt.n	8000a1a <main+0x176>
     	}
		printf("\n\r");
 8000a3a:	4824      	ldr	r0, [pc, #144]	; (8000acc <main+0x228>)
 8000a3c:	f009 fc46 	bl	800a2cc <iprintf>

		//	Si se recibe un valor del Dashboard para actualizar la presión, el Setpoint se actualiza.
		Setpoint =  setSetpoint(RxData);
 8000a40:	f107 0308 	add.w	r3, r7, #8
 8000a44:	f107 0220 	add.w	r2, r7, #32
 8000a48:	4694      	mov	ip, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 f95a 	bl	8000d04 <setSetpoint.1>
 8000a50:	4603      	mov	r3, r0
 8000a52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		//	Ajustamos la presión del tanque con el setpoint presentado
		adjustPressure(Setpoint);
 8000a56:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000a5a:	f107 0220 	add.w	r2, r7, #32
 8000a5e:	4694      	mov	ip, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 f8a9 	bl	8000bb8 <adjustPressure.2>
		//	Actualización de los datos para mandar al NodeMCU
		Presion = transmitPressure(RxData, Presion);
 8000a66:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	f107 0120 	add.w	r1, r7, #32
 8000a72:	468c      	mov	ip, r1
 8000a74:	4611      	mov	r1, r2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f96e 	bl	8000d58 <transmitPressure.4>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
		//	Actualizamos el SPN para mandar el dato deseado
		TxData[0] = Presion;
 8000a82:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000a86:	763b      	strb	r3, [r7, #24]

		HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000a88:	2101      	movs	r1, #1
 8000a8a:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <main+0x22c>)
 8000a8c:	f003 fc17 	bl	80042be <HAL_GPIO_TogglePin>
	{
 8000a90:	e796      	b.n	80009c0 <main+0x11c>
 8000a92:	bf00      	nop
 8000a94:	58024400 	.word	0x58024400
 8000a98:	0800c358 	.word	0x0800c358
 8000a9c:	0800c3b0 	.word	0x0800c3b0
 8000aa0:	0800c3b8 	.word	0x0800c3b8
 8000aa4:	24000420 	.word	0x24000420
 8000aa8:	10fef9a3 	.word	0x10fef9a3
 8000aac:	58020800 	.word	0x58020800
 8000ab0:	240003fc 	.word	0x240003fc
 8000ab4:	24000260 	.word	0x24000260
 8000ab8:	0800c368 	.word	0x0800c368
 8000abc:	0800c374 	.word	0x0800c374
 8000ac0:	0800c384 	.word	0x0800c384
 8000ac4:	0800c398 	.word	0x0800c398
 8000ac8:	0800c3a8 	.word	0x0800c3a8
 8000acc:	0800c3ac 	.word	0x0800c3ac
 8000ad0:	58020400 	.word	0x58020400
 8000ad4:	00000000 	.word	0x00000000

08000ad8 <PID_Discrete.3>:
	double PID_Discrete( double yM , uint8_t setpoint){
 8000ad8:	b480      	push	{r7}
 8000ada:	b087      	sub	sp, #28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	ed87 0b02 	vstr	d0, [r7, #8]
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	f8c7 c000 	str.w	ip, [r7]
		    double R = setpoint;            //set-point
 8000aec:	79fa      	ldrb	r2, [r7, #7]
 8000aee:	ee07 2a90 	vmov	s15, r2
 8000af2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000af6:	ed87 7b04 	vstr	d7, [r7, #16]
		    e = R - yM;            //calculate the error
 8000afa:	ed97 6b04 	vldr	d6, [r7, #16]
 8000afe:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b06:	ed83 7b06 	vstr	d7, [r3, #24]
		    u = u_1 + q0*e + q1*e_1;    //discrete PID controller
 8000b0a:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8000b0e:	ed93 7b06 	vldr	d7, [r3, #24]
 8000b12:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000b16:	ed93 6b04 	vldr	d6, [r3, #16]
 8000b1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000b1e:	ed93 5b08 	vldr	d5, [r3, #32]
 8000b22:	ed93 7b02 	vldr	d7, [r3, #8]
 8000b26:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000b2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000b2e:	ed83 7b00 	vstr	d7, [r3]
		    if(u >= 100) u = 20;
 8000b32:	ed93 7b00 	vldr	d7, [r3]
 8000b36:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8000ba8 <PID_Discrete.3+0xd0>
 8000b3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b42:	db04      	blt.n	8000b4e <PID_Discrete.3+0x76>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4919      	ldr	r1, [pc, #100]	; (8000bb0 <PID_Discrete.3+0xd8>)
 8000b4a:	e9c3 0100 	strd	r0, r1, [r3]
		    if (yM == 0) u = 20; //ressure value
 8000b4e:	ed97 7b02 	vldr	d7, [r7, #8]
 8000b52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8000b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5a:	d104      	bne.n	8000b66 <PID_Discrete.3+0x8e>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4913      	ldr	r1, [pc, #76]	; (8000bb0 <PID_Discrete.3+0xd8>)
 8000b62:	e9c3 0100 	strd	r0, r1, [r3]
		    if(u <= 0) u = 0;          //minimum pressure value
 8000b66:	ed93 7b00 	vldr	d7, [r3]
 8000b6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b72:	d805      	bhi.n	8000b80 <PID_Discrete.3+0xa8>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	f04f 0100 	mov.w	r1, #0
 8000b7c:	e9c3 0100 	strd	r0, r1, [r3]
		    e_1 = e;
 8000b80:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000b84:	e9c3 0102 	strd	r0, r1, [r3, #8]
		    u_1 = u;
 8000b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b8c:	e9c3 0104 	strd	r0, r1, [r3, #16]
		    return u;
 8000b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b94:	ec43 2b17 	vmov	d7, r2, r3
	    }
 8000b98:	eeb0 0b47 	vmov.f64	d0, d7
 8000b9c:	371c      	adds	r7, #28
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	40590000 	.word	0x40590000
 8000bb0:	40340000 	.word	0x40340000
 8000bb4:	00000000 	.word	0x00000000

08000bb8 <adjustPressure.2>:
	{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	4664      	mov	r4, ip
 8000bc4:	f8c7 c000 	str.w	ip, [r7]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4845      	ldr	r0, [pc, #276]	; (8000ce0 <adjustPressure.2+0x128>)
 8000bcc:	f006 fe18 	bl	8007800 <HAL_TIM_PWM_Start>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2108      	movs	r1, #8
 8000bd4:	4843      	ldr	r0, [pc, #268]	; (8000ce4 <adjustPressure.2+0x12c>)
 8000bd6:	f003 fb59 	bl	800428c <HAL_GPIO_WritePin>
		printf("DC: %d\n\r", DC);
 8000bda:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4842      	ldr	r0, [pc, #264]	; (8000ce8 <adjustPressure.2+0x130>)
 8000be0:	f009 fb74 	bl	800a2cc <iprintf>
		double u = PID_Discrete(Presion, setpoint);
 8000be4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	46a4      	mov	ip, r4
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	eeb0 0b47 	vmov.f64	d0, d7
 8000bfa:	f7ff ff6d 	bl	8000ad8 <PID_Discrete.3>
 8000bfe:	ed87 0b02 	vstr	d0, [r7, #8]
		printf("PID: %2.2lf\n\r", u);
 8000c02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c06:	4839      	ldr	r0, [pc, #228]	; (8000cec <adjustPressure.2+0x134>)
 8000c08:	f009 fb60 	bl	800a2cc <iprintf>
		if (Presion > setpoint - 5 && Presion < setpoint)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 8000c14:	4293      	cmp	r3, r2
 8000c16:	dc24      	bgt.n	8000c62 <adjustPressure.2+0xaa>
 8000c18:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000c1c:	79fa      	ldrb	r2, [r7, #7]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d91f      	bls.n	8000c62 <adjustPressure.2+0xaa>
			DC = (100-u)/100 * 65535;
 8000c22:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8000cd0 <adjustPressure.2+0x118>
 8000c26:	ed97 7b02 	vldr	d7, [r7, #8]
 8000c2a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000c2e:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000cd0 <adjustPressure.2+0x118>
 8000c32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c36:	ed9f 6b28 	vldr	d6, [pc, #160]	; 8000cd8 <adjustPressure.2+0x120>
 8000c3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c3e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c42:	ee17 3a90 	vmov	r3, s15
 8000c46:	6423      	str	r3, [r4, #64]	; 0x40
			printf("Compresor  Encendido \n\r");
 8000c48:	4829      	ldr	r0, [pc, #164]	; (8000cf0 <adjustPressure.2+0x138>)
 8000c4a:	f009 fb3f 	bl	800a2cc <iprintf>
			printf("DC con PID: %d\n\r", DC);
 8000c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c50:	4619      	mov	r1, r3
 8000c52:	4828      	ldr	r0, [pc, #160]	; (8000cf4 <adjustPressure.2+0x13c>)
 8000c54:	f009 fb3a 	bl	800a2cc <iprintf>
			TIM2->CCR1 = DC;
 8000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c5e:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000c60:	e030      	b.n	8000cc4 <adjustPressure.2+0x10c>
		} else if (Presion < setpoint){
 8000c62:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d907      	bls.n	8000c7c <adjustPressure.2+0xc4>
			DC = 65535;
 8000c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c70:	6423      	str	r3, [r4, #64]	; 0x40
			TIM2->CCR1 = DC;
 8000c72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c76:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c78:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000c7a:	e023      	b.n	8000cc4 <adjustPressure.2+0x10c>
		} else if(Presion > setpoint) {
 8000c7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d217      	bcs.n	8000cb6 <adjustPressure.2+0xfe>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2101      	movs	r1, #1
 8000c8a:	481b      	ldr	r0, [pc, #108]	; (8000cf8 <adjustPressure.2+0x140>)
 8000c8c:	f003 fafe 	bl	800428c <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8000c90:	2064      	movs	r0, #100	; 0x64
 8000c92:	f000 ff27 	bl	8001ae4 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <adjustPressure.2+0x140>)
 8000c9c:	f003 faf6 	bl	800428c <HAL_GPIO_WritePin>
			printf("Se apago el solenoide\n\r");
 8000ca0:	4816      	ldr	r0, [pc, #88]	; (8000cfc <adjustPressure.2+0x144>)
 8000ca2:	f009 fb13 	bl	800a2cc <iprintf>
			TIM2->CCR1 = DC;
 8000ca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000caa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cac:	635a      	str	r2, [r3, #52]	; 0x34
			printf("Se activo el solenoide\n\r");
 8000cae:	4814      	ldr	r0, [pc, #80]	; (8000d00 <adjustPressure.2+0x148>)
 8000cb0:	f009 fb0c 	bl	800a2cc <iprintf>
	}
 8000cb4:	e006      	b.n	8000cc4 <adjustPressure.2+0x10c>
			DC = 51000;
 8000cb6:	f24c 7338 	movw	r3, #51000	; 0xc738
 8000cba:	6423      	str	r3, [r4, #64]	; 0x40
			TIM2->CCR1 = DC;
 8000cbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34
	}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd90      	pop	{r4, r7, pc}
 8000ccc:	f3af 8000 	nop.w
 8000cd0:	00000000 	.word	0x00000000
 8000cd4:	40590000 	.word	0x40590000
 8000cd8:	00000000 	.word	0x00000000
 8000cdc:	40efffe0 	.word	0x40efffe0
 8000ce0:	24000300 	.word	0x24000300
 8000ce4:	58020000 	.word	0x58020000
 8000ce8:	0800c3c0 	.word	0x0800c3c0
 8000cec:	0800c3cc 	.word	0x0800c3cc
 8000cf0:	0800c3dc 	.word	0x0800c3dc
 8000cf4:	0800c3f4 	.word	0x0800c3f4
 8000cf8:	58020800 	.word	0x58020800
 8000cfc:	0800c408 	.word	0x0800c408
 8000d00:	0800c420 	.word	0x0800c420

08000d04 <setSetpoint.1>:
	{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	f8c7 c000 	str.w	ip, [r7]
		RxHeader.Identifier = 0x10FEF9A3;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <setSetpoint.1+0x40>)
 8000d12:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <setSetpoint.1+0x44>)
 8000d14:	601a      	str	r2, [r3, #0]
		if(RxHeader.Identifier == 0x10FEF9A3)
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <setSetpoint.1+0x40>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <setSetpoint.1+0x44>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d10c      	bne.n	8000d3a <setSetpoint.1+0x36>
			TxHeader.Identifier = 0x18FEEEA4;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <setSetpoint.1+0x48>)
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <setSetpoint.1+0x4c>)
 8000d24:	601a      	str	r2, [r3, #0]
			setpoint = RData[0];
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	73fb      	strb	r3, [r7, #15]
			printf("Cambio de Setpoint: %d  \n\r", setpoint);
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <setSetpoint.1+0x50>)
 8000d32:	f009 facb 	bl	800a2cc <iprintf>
			return setpoint;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	e000      	b.n	8000d3c <setSetpoint.1+0x38>
		return setpoint;
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	24000420 	.word	0x24000420
 8000d48:	10fef9a3 	.word	0x10fef9a3
 8000d4c:	240003fc 	.word	0x240003fc
 8000d50:	18feeea4 	.word	0x18feeea4
 8000d54:	0800c43c 	.word	0x0800c43c

08000d58 <transmitPressure.4>:
	{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	460b      	mov	r3, r1
 8000d62:	72fb      	strb	r3, [r7, #11]
 8000d64:	f8c7 c004 	str.w	ip, [r7, #4]
		uint16_t pressureZero = 2100;
 8000d68:	f640 0334 	movw	r3, #2100	; 0x834
 8000d6c:	82fb      	strh	r3, [r7, #22]
		uint16_t pressureMax = 16380;
 8000d6e:	f643 73fc 	movw	r3, #16380	; 0x3ffc
 8000d72:	82bb      	strh	r3, [r7, #20]
		TxHeader.Identifier = 0x18FEEEA4;
 8000d74:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <transmitPressure.4+0x80>)
 8000d76:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <transmitPressure.4+0x84>)
 8000d78:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start(&hadc3);
 8000d7a:	4819      	ldr	r0, [pc, #100]	; (8000de0 <transmitPressure.4+0x88>)
 8000d7c:	f001 fa7c 	bl	8002278 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8000d80:	f04f 31ff 	mov.w	r1, #4294967295
 8000d84:	4816      	ldr	r0, [pc, #88]	; (8000de0 <transmitPressure.4+0x88>)
 8000d86:	f001 fb41 	bl	800240c <HAL_ADC_PollForConversion>
		uint16_t raw = HAL_ADC_GetValue(&hadc3);
 8000d8a:	4815      	ldr	r0, [pc, #84]	; (8000de0 <transmitPressure.4+0x88>)
 8000d8c:	f001 fc32 	bl	80025f4 <HAL_ADC_GetValue>
 8000d90:	4603      	mov	r3, r0
 8000d92:	827b      	strh	r3, [r7, #18]
		raw = raw >> 2;
 8000d94:	8a7b      	ldrh	r3, [r7, #18]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	827b      	strh	r3, [r7, #18]
		raw = raw << 2;
 8000d9a:	8a7b      	ldrh	r3, [r7, #18]
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	827b      	strh	r3, [r7, #18]
		printf("Raw = %d \n\r", raw);
 8000da0:	8a7b      	ldrh	r3, [r7, #18]
 8000da2:	4619      	mov	r1, r3
 8000da4:	480f      	ldr	r0, [pc, #60]	; (8000de4 <transmitPressure.4+0x8c>)
 8000da6:	f009 fa91 	bl	800a2cc <iprintf>
		Presion = ((raw - pressureZero)*100)/ (pressureMax - pressureZero);
 8000daa:	8a7a      	ldrh	r2, [r7, #18]
 8000dac:	8afb      	ldrh	r3, [r7, #22]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2264      	movs	r2, #100	; 0x64
 8000db2:	fb03 f202 	mul.w	r2, r3, r2
 8000db6:	8ab9      	ldrh	r1, [r7, #20]
 8000db8:	8afb      	ldrh	r3, [r7, #22]
 8000dba:	1acb      	subs	r3, r1, r3
 8000dbc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000dc0:	72fb      	strb	r3, [r7, #11]
		printf("Pressure = %d PSI \n\r", Presion);
 8000dc2:	7afb      	ldrb	r3, [r7, #11]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4808      	ldr	r0, [pc, #32]	; (8000de8 <transmitPressure.4+0x90>)
 8000dc8:	f009 fa80 	bl	800a2cc <iprintf>
		return Presion;
 8000dcc:	7afb      	ldrb	r3, [r7, #11]
	}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3718      	adds	r7, #24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	240003fc 	.word	0x240003fc
 8000ddc:	18feeea4 	.word	0x18feeea4
 8000de0:	240001fc 	.word	0x240001fc
 8000de4:	0800c458 	.word	0x0800c458
 8000de8:	0800c464 	.word	0x0800c464

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b09c      	sub	sp, #112	; 0x70
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	224c      	movs	r2, #76	; 0x4c
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f008 fe1a 	bl	8009a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2220      	movs	r2, #32
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f008 fe14 	bl	8009a34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e0c:	2004      	movs	r0, #4
 8000e0e:	f003 fa9f 	bl	8004350 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e12:	2300      	movs	r3, #0
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <SystemClock_Config+0xfc>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	4a33      	ldr	r2, [pc, #204]	; (8000ee8 <SystemClock_Config+0xfc>)
 8000e1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e20:	6193      	str	r3, [r2, #24]
 8000e22:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <SystemClock_Config+0xfc>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	4b2f      	ldr	r3, [pc, #188]	; (8000eec <SystemClock_Config+0x100>)
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	4a2e      	ldr	r2, [pc, #184]	; (8000eec <SystemClock_Config+0x100>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e38:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <SystemClock_Config+0x100>)
 8000e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	603b      	str	r3, [r7, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e44:	bf00      	nop
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <SystemClock_Config+0xfc>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e52:	d1f8      	bne.n	8000e46 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <SystemClock_Config+0x104>)
 8000e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e58:	4a25      	ldr	r2, [pc, #148]	; (8000ef0 <SystemClock_Config+0x104>)
 8000e5a:	f023 0303 	bic.w	r3, r3, #3
 8000e5e:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e68:	2340      	movs	r3, #64	; 0x40
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e70:	2300      	movs	r3, #0
 8000e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e78:	233c      	movs	r3, #60	; 0x3c
 8000e7a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8000e80:	2318      	movs	r3, #24
 8000e82:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fab3 	bl	8004404 <HAL_RCC_OscConfig>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ea4:	f000 faac 	bl	8001400 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea8:	233f      	movs	r3, #63	; 0x3f
 8000eaa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eac:	2303      	movs	r3, #3
 8000eae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eb4:	2308      	movs	r3, #8
 8000eb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ebc:	2340      	movs	r3, #64	; 0x40
 8000ebe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ec4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ec6:	2340      	movs	r3, #64	; 0x40
 8000ec8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2104      	movs	r1, #4
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f003 fec6 	bl	8004c60 <HAL_RCC_ClockConfig>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000eda:	f000 fa91 	bl	8001400 <Error_Handler>
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3770      	adds	r7, #112	; 0x70
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	58024800 	.word	0x58024800
 8000eec:	58000400 	.word	0x58000400
 8000ef0:	58024400 	.word	0x58024400

08000ef4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
 8000f08:	615a      	str	r2, [r3, #20]
 8000f0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000f0c:	4b26      	ldr	r3, [pc, #152]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f0e:	4a27      	ldr	r2, [pc, #156]	; (8000fac <MX_ADC3_Init+0xb8>)
 8000f10:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_14B_OPT;
 8000f12:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f14:	2214      	movs	r2, #20
 8000f16:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f18:	4b23      	ldr	r3, [pc, #140]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1e:	4b22      	ldr	r3, [pc, #136]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f20:	2204      	movs	r2, #4
 8000f22:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000f2a:	4b1f      	ldr	r3, [pc, #124]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000f36:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f4e:	4b16      	ldr	r3, [pc, #88]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000f62:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f64:	f000 ffe6 	bl	8001f34 <HAL_ADC_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000f6e:	f000 fa47 	bl	8001400 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f72:	2301      	movs	r3, #1
 8000f74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f76:	2306      	movs	r3, #6
 8000f78:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f7e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f82:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f84:	2304      	movs	r3, #4
 8000f86:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <MX_ADC3_Init+0xb4>)
 8000f92:	f001 fb3d 	bl	8002610 <HAL_ADC_ConfigChannel>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000f9c:	f000 fa30 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	3720      	adds	r7, #32
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	240001fc 	.word	0x240001fc
 8000fac:	58026000 	.word	0x58026000

08000fb0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000fb6:	4a57      	ldr	r2, [pc, #348]	; (8001114 <MX_FDCAN1_Init+0x164>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000fba:	4b55      	ldr	r3, [pc, #340]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000fc0:	4b53      	ldr	r3, [pc, #332]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000fc6:	4b52      	ldr	r3, [pc, #328]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000fcc:	4b50      	ldr	r3, [pc, #320]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000fd2:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000fda:	2202      	movs	r2, #2
 8000fdc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000fde:	4b4c      	ldr	r3, [pc, #304]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 8000fe4:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000fe6:	223f      	movs	r2, #63	; 0x3f
 8000fe8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000fea:	4b49      	ldr	r3, [pc, #292]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000fec:	2210      	movs	r2, #16
 8000fee:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ff0:	4b47      	ldr	r3, [pc, #284]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ff6:	4b46      	ldr	r3, [pc, #280]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ffc:	4b44      	ldr	r3, [pc, #272]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8001004:	2201      	movs	r2, #1
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001008:	4b41      	ldr	r3, [pc, #260]	; (8001110 <MX_FDCAN1_Init+0x160>)
 800100a:	2200      	movs	r2, #0
 800100c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800100e:	4b40      	ldr	r3, [pc, #256]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8001010:	2201      	movs	r2, #1
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001014:	4b3e      	ldr	r3, [pc, #248]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8001016:	2200      	movs	r2, #0
 8001018:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 800101a:	4b3d      	ldr	r3, [pc, #244]	; (8001110 <MX_FDCAN1_Init+0x160>)
 800101c:	2201      	movs	r2, #1
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001020:	4b3b      	ldr	r3, [pc, #236]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8001022:	2204      	movs	r2, #4
 8001024:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001026:	4b3a      	ldr	r3, [pc, #232]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8001028:	2200      	movs	r2, #0
 800102a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800102c:	4b38      	ldr	r3, [pc, #224]	; (8001110 <MX_FDCAN1_Init+0x160>)
 800102e:	2204      	movs	r2, #4
 8001030:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001032:	4b37      	ldr	r3, [pc, #220]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8001034:	2200      	movs	r2, #0
 8001036:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <MX_FDCAN1_Init+0x160>)
 800103a:	2204      	movs	r2, #4
 800103c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800103e:	4b34      	ldr	r3, [pc, #208]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8001040:	2200      	movs	r2, #0
 8001042:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001044:	4b32      	ldr	r3, [pc, #200]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8001046:	2200      	movs	r2, #0
 8001048:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 800104a:	4b31      	ldr	r3, [pc, #196]	; (8001110 <MX_FDCAN1_Init+0x160>)
 800104c:	2201      	movs	r2, #1
 800104e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001050:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8001052:	2200      	movs	r2, #0
 8001054:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001056:	4b2e      	ldr	r3, [pc, #184]	; (8001110 <MX_FDCAN1_Init+0x160>)
 8001058:	2204      	movs	r2, #4
 800105a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800105c:	482c      	ldr	r0, [pc, #176]	; (8001110 <MX_FDCAN1_Init+0x160>)
 800105e:	f002 f89f 	bl	80031a0 <HAL_FDCAN_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001068:	f000 f9ca 	bl	8001400 <Error_Handler>
  /* USER CODE BEGIN FDCAN1_Init 2 */


  /*AAO+*/
    /* Configure Rx filter */
     sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <MX_FDCAN1_Init+0x168>)
 800106e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001072:	601a      	str	r2, [r3, #0]
     sFilterConfig.FilterIndex = 0;
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <MX_FDCAN1_Init+0x168>)
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
     sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 800107a:	4b27      	ldr	r3, [pc, #156]	; (8001118 <MX_FDCAN1_Init+0x168>)
 800107c:	2202      	movs	r2, #2
 800107e:	609a      	str	r2, [r3, #8]
     sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001080:	4b25      	ldr	r3, [pc, #148]	; (8001118 <MX_FDCAN1_Init+0x168>)
 8001082:	2201      	movs	r2, #1
 8001084:	60da      	str	r2, [r3, #12]
     sFilterConfig.FilterID1 = 0x300;//	Ponemos 3f8
 8001086:	4b24      	ldr	r3, [pc, #144]	; (8001118 <MX_FDCAN1_Init+0x168>)
 8001088:	f44f 7240 	mov.w	r2, #768	; 0x300
 800108c:	611a      	str	r2, [r3, #16]
     sFilterConfig.FilterID2 = 0x7FF;
 800108e:	4b22      	ldr	r3, [pc, #136]	; (8001118 <MX_FDCAN1_Init+0x168>)
 8001090:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001094:	615a      	str	r2, [r3, #20]
     /* Configure global filter to reject all non-matching frames */
     //HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);



     if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001096:	4920      	ldr	r1, [pc, #128]	; (8001118 <MX_FDCAN1_Init+0x168>)
 8001098:	481d      	ldr	r0, [pc, #116]	; (8001110 <MX_FDCAN1_Init+0x160>)
 800109a:	f002 fa5f 	bl	800355c <HAL_FDCAN_ConfigFilter>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_FDCAN1_Init+0xf8>
       {
          /* Filter configuration Error */
          Error_Handler();
 80010a4:	f000 f9ac 	bl	8001400 <Error_Handler>
       }
      /* Start the FDCAN module */
     if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {}
 80010a8:	4819      	ldr	r0, [pc, #100]	; (8001110 <MX_FDCAN1_Init+0x160>)
 80010aa:	f002 facd 	bl	8003648 <HAL_FDCAN_Start>
          /* Start Error */
     if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){}
 80010ae:	2200      	movs	r2, #0
 80010b0:	2101      	movs	r1, #1
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <MX_FDCAN1_Init+0x160>)
 80010b4:	f002 fcbc 	bl	8003a30 <HAL_FDCAN_ActivateNotification>
          /* Notification Error */

      /* Configure Tx buffer message */
     TxHeader.Identifier = 0x18FEEEA4; // 111
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <MX_FDCAN1_Init+0x16c>)
 80010ba:	4a19      	ldr	r2, [pc, #100]	; (8001120 <MX_FDCAN1_Init+0x170>)
 80010bc:	601a      	str	r2, [r3, #0]
     TxHeader.IdType = FDCAN_EXTENDED_ID;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_FDCAN1_Init+0x16c>)
 80010c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010c4:	605a      	str	r2, [r3, #4]
     TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_FDCAN1_Init+0x16c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
     TxHeader.DataLength = FDCAN_DLC_BYTES_8; //CAMB
 80010cc:	4b13      	ldr	r3, [pc, #76]	; (800111c <MX_FDCAN1_Init+0x16c>)
 80010ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010d2:	60da      	str	r2, [r3, #12]
     TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_FDCAN1_Init+0x16c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
     TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_FDCAN1_Init+0x16c>)
 80010dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010e0:	615a      	str	r2, [r3, #20]
     TxHeader.FDFormat = FDCAN_FD_CAN;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_FDCAN1_Init+0x16c>)
 80010e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010e8:	619a      	str	r2, [r3, #24]
     TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_FDCAN1_Init+0x16c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
     TxHeader.MessageMarker = 0x00;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <MX_FDCAN1_Init+0x16c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
    /*AAO-*/

     RxHeader.IdType = FDCAN_EXTENDED_ID;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_FDCAN1_Init+0x174>)
 80010f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010fc:	605a      	str	r2, [r3, #4]
     RxHeader.RxFrameType = FDCAN_DATA_FRAME;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_FDCAN1_Init+0x174>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
     RxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MX_FDCAN1_Init+0x174>)
 8001106:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800110a:	60da      	str	r2, [r3, #12]



  /* USER CODE END FDCAN1_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	24000260 	.word	0x24000260
 8001114:	4000a000 	.word	0x4000a000
 8001118:	240003dc 	.word	0x240003dc
 800111c:	240003fc 	.word	0x240003fc
 8001120:	18feeea4 	.word	0x18feeea4
 8001124:	24000420 	.word	0x24000420

08001128 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08e      	sub	sp, #56	; 0x38
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001148:	463b      	mov	r3, r7
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800115a:	4b2d      	ldr	r3, [pc, #180]	; (8001210 <MX_TIM2_Init+0xe8>)
 800115c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001160:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <MX_TIM2_Init+0xe8>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001168:	4b29      	ldr	r3, [pc, #164]	; (8001210 <MX_TIM2_Init+0xe8>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <MX_TIM2_Init+0xe8>)
 8001170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001174:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001176:	4b26      	ldr	r3, [pc, #152]	; (8001210 <MX_TIM2_Init+0xe8>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <MX_TIM2_Init+0xe8>)
 800117e:	2280      	movs	r2, #128	; 0x80
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001182:	4823      	ldr	r0, [pc, #140]	; (8001210 <MX_TIM2_Init+0xe8>)
 8001184:	f006 fa84 	bl	8007690 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800118e:	f000 f937 	bl	8001400 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119c:	4619      	mov	r1, r3
 800119e:	481c      	ldr	r0, [pc, #112]	; (8001210 <MX_TIM2_Init+0xe8>)
 80011a0:	f006 fd50 	bl	8007c44 <HAL_TIM_ConfigClockSource>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80011aa:	f000 f929 	bl	8001400 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011ae:	4818      	ldr	r0, [pc, #96]	; (8001210 <MX_TIM2_Init+0xe8>)
 80011b0:	f006 fac5 	bl	800773e <HAL_TIM_PWM_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80011ba:	f000 f921 	bl	8001400 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	4619      	mov	r1, r3
 80011cc:	4810      	ldr	r0, [pc, #64]	; (8001210 <MX_TIM2_Init+0xe8>)
 80011ce:	f007 fa65 	bl	800869c <HAL_TIMEx_MasterConfigSynchronization>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80011d8:	f000 f912 	bl	8001400 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011dc:	2360      	movs	r3, #96	; 0x60
 80011de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	4619      	mov	r1, r3
 80011f2:	4807      	ldr	r0, [pc, #28]	; (8001210 <MX_TIM2_Init+0xe8>)
 80011f4:	f006 fc12 	bl	8007a1c <HAL_TIM_PWM_ConfigChannel>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011fe:	f000 f8ff 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001202:	4803      	ldr	r0, [pc, #12]	; (8001210 <MX_TIM2_Init+0xe8>)
 8001204:	f000 fa24 	bl	8001650 <HAL_TIM_MspPostInit>

}
 8001208:	bf00      	nop
 800120a:	3738      	adds	r7, #56	; 0x38
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	24000300 	.word	0x24000300

08001214 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <MX_USART3_UART_Init+0x94>)
 800121c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 8001220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001224:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 800125e:	f007 faab 	bl	80087b8 <HAL_UART_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001268:	f000 f8ca 	bl	8001400 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 8001270:	f008 fade 	bl	8009830 <HAL_UARTEx_SetTxFifoThreshold>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800127a:	f000 f8c1 	bl	8001400 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127e:	2100      	movs	r1, #0
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 8001282:	f008 fb13 	bl	80098ac <HAL_UARTEx_SetRxFifoThreshold>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800128c:	f000 f8b8 	bl	8001400 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_USART3_UART_Init+0x90>)
 8001292:	f008 fa94 	bl	80097be <HAL_UARTEx_DisableFifoMode>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800129c:	f000 f8b0 	bl	8001400 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2400034c 	.word	0x2400034c
 80012a8:	40004800 	.word	0x40004800

080012ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b2:	f107 0314 	add.w	r3, r7, #20
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]
 80012c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b4b      	ldr	r3, [pc, #300]	; (80013f0 <MX_GPIO_Init+0x144>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c8:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <MX_GPIO_Init+0x144>)
 80012ca:	f043 0304 	orr.w	r3, r3, #4
 80012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <MX_GPIO_Init+0x144>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e0:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <MX_GPIO_Init+0x144>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e6:	4a42      	ldr	r2, [pc, #264]	; (80013f0 <MX_GPIO_Init+0x144>)
 80012e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012f0:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <MX_GPIO_Init+0x144>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b3c      	ldr	r3, [pc, #240]	; (80013f0 <MX_GPIO_Init+0x144>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001304:	4a3a      	ldr	r2, [pc, #232]	; (80013f0 <MX_GPIO_Init+0x144>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800130e:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <MX_GPIO_Init+0x144>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131c:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <MX_GPIO_Init+0x144>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001322:	4a33      	ldr	r2, [pc, #204]	; (80013f0 <MX_GPIO_Init+0x144>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <MX_GPIO_Init+0x144>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <MX_GPIO_Init+0x144>)
 800133c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001340:	4a2b      	ldr	r2, [pc, #172]	; (80013f0 <MX_GPIO_Init+0x144>)
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <MX_GPIO_Init+0x144>)
 800134c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2101      	movs	r1, #1
 800135c:	4825      	ldr	r0, [pc, #148]	; (80013f4 <MX_GPIO_Init+0x148>)
 800135e:	f002 ff95 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EnablePWM_GPIO_Port, EnablePWM_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2108      	movs	r1, #8
 8001366:	4824      	ldr	r0, [pc, #144]	; (80013f8 <MX_GPIO_Init+0x14c>)
 8001368:	f002 ff90 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001372:	4822      	ldr	r0, [pc, #136]	; (80013fc <MX_GPIO_Init+0x150>)
 8001374:	f002 ff8a 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4619      	mov	r1, r3
 800138c:	4819      	ldr	r0, [pc, #100]	; (80013f4 <MX_GPIO_Init+0x148>)
 800138e:	f002 fdcd 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800139a:	2302      	movs	r3, #2
 800139c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	4812      	ldr	r0, [pc, #72]	; (80013f4 <MX_GPIO_Init+0x148>)
 80013aa:	f002 fdbf 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pin : EnablePWM_Pin */
  GPIO_InitStruct.Pin = EnablePWM_Pin;
 80013ae:	2308      	movs	r3, #8
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EnablePWM_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_GPIO_Init+0x14c>)
 80013c6:	f002 fdb1 	bl	8003f2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 80013ca:	f244 0301 	movw	r3, #16385	; 0x4001
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_GPIO_Init+0x150>)
 80013e4:	f002 fda2 	bl	8003f2c <HAL_GPIO_Init>

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	58024400 	.word	0x58024400
 80013f4:	58020800 	.word	0x58020800
 80013f8:	58020000 	.word	0x58020000
 80013fc:	58020400 	.word	0x58020400

08001400 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
}
 8001406:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001408:	e7fe      	b.n	8001408 <Error_Handler+0x8>
	...

0800140c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001414:	1d39      	adds	r1, r7, #4
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	2201      	movs	r2, #1
 800141c:	4803      	ldr	r0, [pc, #12]	; (800142c <__io_putchar+0x20>)
 800141e:	f007 fa1b 	bl	8008858 <HAL_UART_Transmit>
  return ch;
 8001422:	687b      	ldr	r3, [r7, #4]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	2400034c 	.word	0x2400034c

08001430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_MspInit+0x30>)
 8001438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800143c:	4a08      	ldr	r2, [pc, #32]	; (8001460 <HAL_MspInit+0x30>)
 800143e:	f043 0302 	orr.w	r3, r3, #2
 8001442:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_MspInit+0x30>)
 8001448:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800144c:	f003 0302 	and.w	r3, r3, #2
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	58024400 	.word	0x58024400

08001464 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0b4      	sub	sp, #208	; 0xd0
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	22bc      	movs	r2, #188	; 0xbc
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f008 fadd 	bl	8009a34 <memset>
  if(hadc->Instance==ADC3)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a25      	ldr	r2, [pc, #148]	; (8001514 <HAL_ADC_MspInit+0xb0>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d143      	bne.n	800150c <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001484:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001488:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 800148a:	2304      	movs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 800148e:	230a      	movs	r3, #10
 8001490:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001492:	2302      	movs	r3, #2
 8001494:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001496:	2302      	movs	r3, #2
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800149a:	2302      	movs	r3, #2
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800149e:	23c0      	movs	r3, #192	; 0xc0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80014a2:	2320      	movs	r3, #32
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 ff5f 	bl	8005378 <HAL_RCCEx_PeriphCLKConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80014c0:	f7ff ff9e 	bl	8001400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80014c4:	4b14      	ldr	r3, [pc, #80]	; (8001518 <HAL_ADC_MspInit+0xb4>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <HAL_ADC_MspInit+0xb4>)
 80014cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <HAL_ADC_MspInit+0xb4>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_ADC_MspInit+0xb4>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <HAL_ADC_MspInit+0xb4>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_ADC_MspInit+0xb4>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001500:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001504:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001508:	f000 fb1c 	bl	8001b44 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	37d0      	adds	r7, #208	; 0xd0
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	58026000 	.word	0x58026000
 8001518:	58024400 	.word	0x58024400

0800151c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0b8      	sub	sp, #224	; 0xe0
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	22bc      	movs	r2, #188	; 0xbc
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f008 fa79 	bl	8009a34 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2f      	ldr	r2, [pc, #188]	; (8001604 <HAL_FDCAN_MspInit+0xe8>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d157      	bne.n	80015fc <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800154c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001550:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001552:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001556:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4618      	mov	r0, r3
 800155e:	f003 ff0b 	bl	8005378 <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001568:	f7ff ff4a 	bl	8001400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800156c:	4b26      	ldr	r3, [pc, #152]	; (8001608 <HAL_FDCAN_MspInit+0xec>)
 800156e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001572:	4a25      	ldr	r2, [pc, #148]	; (8001608 <HAL_FDCAN_MspInit+0xec>)
 8001574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001578:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_FDCAN_MspInit+0xec>)
 800157e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_FDCAN_MspInit+0xec>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	4a1d      	ldr	r2, [pc, #116]	; (8001608 <HAL_FDCAN_MspInit+0xec>)
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <HAL_FDCAN_MspInit+0xec>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80015c0:	2309      	movs	r3, #9
 80015c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(FDCAN1_RX_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015ca:	4619      	mov	r1, r3
 80015cc:	480f      	ldr	r0, [pc, #60]	; (800160c <HAL_FDCAN_MspInit+0xf0>)
 80015ce:	f002 fcad 	bl	8003f2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FDCAN1_TX_Pin;
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015de:	2301      	movs	r3, #1
 80015e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80015ea:	2309      	movs	r3, #9
 80015ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(FDCAN1_TX_GPIO_Port, &GPIO_InitStruct);
 80015f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015f4:	4619      	mov	r1, r3
 80015f6:	4805      	ldr	r0, [pc, #20]	; (800160c <HAL_FDCAN_MspInit+0xf0>)
 80015f8:	f002 fc98 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80015fc:	bf00      	nop
 80015fe:	37e0      	adds	r7, #224	; 0xe0
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	4000a000 	.word	0x4000a000
 8001608:	58024400 	.word	0x58024400
 800160c:	58020c00 	.word	0x58020c00

08001610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001620:	d10e      	bne.n	8001640 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <HAL_TIM_Base_MspInit+0x3c>)
 8001624:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001628:	4a08      	ldr	r2, [pc, #32]	; (800164c <HAL_TIM_Base_MspInit+0x3c>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_TIM_Base_MspInit+0x3c>)
 8001634:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001640:	bf00      	nop
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	58024400 	.word	0x58024400

08001650 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001670:	d11e      	bne.n	80016b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_TIM_MspPostInit+0x68>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001678:	4a0f      	ldr	r2, [pc, #60]	; (80016b8 <HAL_TIM_MspPostInit+0x68>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001682:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <HAL_TIM_MspPostInit+0x68>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	60bb      	str	r3, [r7, #8]
 800168e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001690:	2301      	movs	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	2302      	movs	r3, #2
 8001696:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	f107 030c 	add.w	r3, r7, #12
 80016a8:	4619      	mov	r1, r3
 80016aa:	4804      	ldr	r0, [pc, #16]	; (80016bc <HAL_TIM_MspPostInit+0x6c>)
 80016ac:	f002 fc3e 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016b0:	bf00      	nop
 80016b2:	3720      	adds	r7, #32
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	58024400 	.word	0x58024400
 80016bc:	58020000 	.word	0x58020000

080016c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b0b8      	sub	sp, #224	; 0xe0
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d8:	f107 0310 	add.w	r3, r7, #16
 80016dc:	22bc      	movs	r2, #188	; 0xbc
 80016de:	2100      	movs	r1, #0
 80016e0:	4618      	mov	r0, r3
 80016e2:	f008 f9a7 	bl	8009a34 <memset>
  if(huart->Instance==USART3)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a25      	ldr	r2, [pc, #148]	; (8001780 <HAL_UART_MspInit+0xc0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d142      	bne.n	8001776 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80016f0:	2302      	movs	r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fa:	f107 0310 	add.w	r3, r7, #16
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fe3a 	bl	8005378 <HAL_RCCEx_PeriphCLKConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800170a:	f7ff fe79 	bl	8001400 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800170e:	4b1d      	ldr	r3, [pc, #116]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001714:	4a1b      	ldr	r2, [pc, #108]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001716:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_UART_MspInit+0xc4>)
 800172e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_UART_MspInit+0xc4>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <HAL_UART_MspInit+0xc4>)
 800173e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800174a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800174e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001764:	2307      	movs	r3, #7
 8001766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800176a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <HAL_UART_MspInit+0xc8>)
 8001772:	f002 fbdb 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001776:	bf00      	nop
 8001778:	37e0      	adds	r7, #224	; 0xe0
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40004800 	.word	0x40004800
 8001784:	58024400 	.word	0x58024400
 8001788:	58020c00 	.word	0x58020c00

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d8:	f000 f964 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
	return 1;
 80017e4:	2301      	movs	r3, #1
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <_kill>:

int _kill(int pid, int sig)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017fa:	f008 f8e3 	bl	80099c4 <__errno>
 80017fe:	4603      	mov	r3, r0
 8001800:	2216      	movs	r2, #22
 8001802:	601a      	str	r2, [r3, #0]
	return -1;
 8001804:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_exit>:

void _exit (int status)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001818:	f04f 31ff 	mov.w	r1, #4294967295
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ffe7 	bl	80017f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001822:	e7fe      	b.n	8001822 <_exit+0x12>

08001824 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	e00a      	b.n	800184c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001836:	f3af 8000 	nop.w
 800183a:	4601      	mov	r1, r0
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	60ba      	str	r2, [r7, #8]
 8001842:	b2ca      	uxtb	r2, r1
 8001844:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	429a      	cmp	r2, r3
 8001852:	dbf0      	blt.n	8001836 <_read+0x12>
	}

return len;
 8001854:	687b      	ldr	r3, [r7, #4]
}
 8001856:	4618      	mov	r0, r3
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	60f8      	str	r0, [r7, #12]
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
 800186e:	e009      	b.n	8001884 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	1c5a      	adds	r2, r3, #1
 8001874:	60ba      	str	r2, [r7, #8]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fdc7 	bl	800140c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	dbf1      	blt.n	8001870 <_write+0x12>
	}
	return len;
 800188c:	687b      	ldr	r3, [r7, #4]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_close>:

int _close(int file)
{
 8001896:	b480      	push	{r7}
 8001898:	b083      	sub	sp, #12
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
	return -1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018be:	605a      	str	r2, [r3, #4]
	return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <_isatty>:

int _isatty(int file)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
	return 1;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
	return 0;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <_sbrk+0x5c>)
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <_sbrk+0x60>)
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <_sbrk+0x64>)
 800191e:	4a12      	ldr	r2, [pc, #72]	; (8001968 <_sbrk+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <_sbrk+0x64>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	429a      	cmp	r2, r3
 800192e:	d207      	bcs.n	8001940 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001930:	f008 f848 	bl	80099c4 <__errno>
 8001934:	4603      	mov	r3, r0
 8001936:	220c      	movs	r2, #12
 8001938:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	e009      	b.n	8001954 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <_sbrk+0x64>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <_sbrk+0x64>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	4a05      	ldr	r2, [pc, #20]	; (8001964 <_sbrk+0x64>)
 8001950:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3718      	adds	r7, #24
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	24080000 	.word	0x24080000
 8001960:	00000400 	.word	0x00000400
 8001964:	24000448 	.word	0x24000448
 8001968:	24000460 	.word	0x24000460

0800196c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800196c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001970:	f7fe fe90 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001976:	490d      	ldr	r1, [pc, #52]	; (80019ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800197a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800197c:	e002      	b.n	8001984 <LoopCopyDataInit>

0800197e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800197e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001982:	3304      	adds	r3, #4

08001984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001988:	d3f9      	bcc.n	800197e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800198c:	4c0a      	ldr	r4, [pc, #40]	; (80019b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800198e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001990:	e001      	b.n	8001996 <LoopFillZerobss>

08001992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001994:	3204      	adds	r2, #4

08001996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001998:	d3fb      	bcc.n	8001992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800199a:	f008 f819 	bl	80099d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199e:	f7fe ff81 	bl	80008a4 <main>
  bx  lr
 80019a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80019a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80019ac:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 80019b0:	0800c8fc 	.word	0x0800c8fc
  ldr r2, =_sbss
 80019b4:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 80019b8:	24000460 	.word	0x24000460

080019bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019bc:	e7fe      	b.n	80019bc <ADC3_IRQHandler>
	...

080019c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c6:	2003      	movs	r0, #3
 80019c8:	f001 fbb8 	bl	800313c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80019cc:	f003 fafe 	bl	8004fcc <HAL_RCC_GetSysClockFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_Init+0x68>)
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	0a1b      	lsrs	r3, r3, #8
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	4913      	ldr	r1, [pc, #76]	; (8001a2c <HAL_Init+0x6c>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_Init+0x68>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <HAL_Init+0x6c>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	f003 031f 	and.w	r3, r3, #31
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001a00:	4a0b      	ldr	r2, [pc, #44]	; (8001a30 <HAL_Init+0x70>)
 8001a02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a04:	4a0b      	ldr	r2, [pc, #44]	; (8001a34 <HAL_Init+0x74>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f814 	bl	8001a38 <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e002      	b.n	8001a20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1a:	f7ff fd09 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	0800c4c8 	.word	0x0800c4c8
 8001a30:	24000004 	.word	0x24000004
 8001a34:	24000000 	.word	0x24000000

08001a38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_InitTick+0x60>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d101      	bne.n	8001a4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e021      	b.n	8001a90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <HAL_InitTick+0x64>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_InitTick+0x60>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4619      	mov	r1, r3
 8001a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a62:	4618      	mov	r0, r3
 8001a64:	f001 fb8f 	bl	8003186 <HAL_SYSTICK_Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00e      	b.n	8001a90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b0f      	cmp	r3, #15
 8001a76:	d80a      	bhi.n	8001a8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	6879      	ldr	r1, [r7, #4]
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f001 fb67 	bl	8003152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <HAL_InitTick+0x68>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2400000c 	.word	0x2400000c
 8001a9c:	24000000 	.word	0x24000000
 8001aa0:	24000008 	.word	0x24000008

08001aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_IncTick+0x20>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	461a      	mov	r2, r3
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	4a04      	ldr	r2, [pc, #16]	; (8001ac8 <HAL_IncTick+0x24>)
 8001ab6:	6013      	str	r3, [r2, #0]
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	2400000c 	.word	0x2400000c
 8001ac8:	2400044c 	.word	0x2400044c

08001acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b03      	ldr	r3, [pc, #12]	; (8001ae0 <HAL_GetTick+0x14>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	2400044c 	.word	0x2400044c

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff ffee 	bl	8001acc <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_Delay+0x44>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0a:	bf00      	nop
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2400000c 	.word	0x2400000c

08001b2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetREVID+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	0c1b      	lsrs	r3, r3, #16
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	5c001000 	.word	0x5c001000

08001b44 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	4904      	ldr	r1, [pc, #16]	; (8001b6c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	58000400 	.word	0x58000400

08001b70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	609a      	str	r2, [r3, #8]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	609a      	str	r2, [r3, #8]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
 8001be4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	3360      	adds	r3, #96	; 0x60
 8001bea:	461a      	mov	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	430b      	orrs	r3, r1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	371c      	adds	r7, #28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	611a      	str	r2, [r3, #16]
}
 8001c3e:	bf00      	nop
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b087      	sub	sp, #28
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	3360      	adds	r3, #96	; 0x60
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	601a      	str	r2, [r3, #0]
  }
}
 8001c74:	bf00      	nop
 8001c76:	371c      	adds	r7, #28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c94:	2301      	movs	r3, #1
 8001c96:	e000      	b.n	8001c9a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b087      	sub	sp, #28
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3330      	adds	r3, #48	; 0x30
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	4413      	add	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	211f      	movs	r1, #31
 8001cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	401a      	ands	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	0e9b      	lsrs	r3, r3, #26
 8001cde:	f003 011f 	and.w	r1, r3, #31
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cec:	431a      	orrs	r2, r3
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001cf2:	bf00      	nop
 8001cf4:	371c      	adds	r7, #28
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b087      	sub	sp, #28
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3314      	adds	r3, #20
 8001d0e:	461a      	mov	r2, r3
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	0e5b      	lsrs	r3, r3, #25
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	4413      	add	r3, r2
 8001d1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	0d1b      	lsrs	r3, r3, #20
 8001d26:	f003 031f 	and.w	r3, r3, #31
 8001d2a:	2107      	movs	r1, #7
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	401a      	ands	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	0d1b      	lsrs	r3, r3, #20
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	431a      	orrs	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f003 0318 	and.w	r3, r3, #24
 8001d76:	4908      	ldr	r1, [pc, #32]	; (8001d98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001d78:	40d9      	lsrs	r1, r3
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	400b      	ands	r3, r1
 8001d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d82:	431a      	orrs	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	000fffff 	.word	0x000fffff

08001d9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 031f 	and.w	r3, r3, #31
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6093      	str	r3, [r2, #8]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	5fffffc0 	.word	0x5fffffc0

08001df8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e0c:	d101      	bne.n	8001e12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	6fffffc0 	.word	0x6fffffc0

08001e48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e5c:	d101      	bne.n	8001e62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <LL_ADC_Enable+0x24>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	f043 0201 	orr.w	r2, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	7fffffc0 	.word	0x7fffffc0

08001e98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <LL_ADC_IsEnabled+0x18>
 8001eac:	2301      	movs	r3, #1
 8001eae:	e000      	b.n	8001eb2 <LL_ADC_IsEnabled+0x1a>
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <LL_ADC_REG_StartConversion+0x24>)
 8001ece:	4013      	ands	r3, r2
 8001ed0:	f043 0204 	orr.w	r2, r3, #4
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	7fffffc0 	.word	0x7fffffc0

08001ee8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d101      	bne.n	8001f00 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d101      	bne.n	8001f26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b089      	sub	sp, #36	; 0x24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e18f      	b.n	800226e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff fa81 	bl	8001464 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff3f 	bl	8001df8 <LL_ADC_IsDeepPowerDownEnabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff25 	bl	8001dd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff5a 	bl	8001e48 <LL_ADC_IsInternalRegulatorEnabled>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d114      	bne.n	8001fc4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff3e 	bl	8001e20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fa4:	4b87      	ldr	r3, [pc, #540]	; (80021c4 <HAL_ADC_Init+0x290>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	4a87      	ldr	r2, [pc, #540]	; (80021c8 <HAL_ADC_Init+0x294>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fb6:	e002      	b.n	8001fbe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff3d 	bl	8001e48 <LL_ADC_IsInternalRegulatorEnabled>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f043 0210 	orr.w	r2, r3, #16
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff77 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 8001ffa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	f040 8129 	bne.w	800225c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f040 8125 	bne.w	800225c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002016:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800201a:	f043 0202 	orr.w	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff36 	bl	8001e98 <LL_ADC_IsEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d136      	bne.n	80020a0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a65      	ldr	r2, [pc, #404]	; (80021cc <HAL_ADC_Init+0x298>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d004      	beq.n	8002046 <HAL_ADC_Init+0x112>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a63      	ldr	r2, [pc, #396]	; (80021d0 <HAL_ADC_Init+0x29c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10e      	bne.n	8002064 <HAL_ADC_Init+0x130>
 8002046:	4861      	ldr	r0, [pc, #388]	; (80021cc <HAL_ADC_Init+0x298>)
 8002048:	f7ff ff26 	bl	8001e98 <LL_ADC_IsEnabled>
 800204c:	4604      	mov	r4, r0
 800204e:	4860      	ldr	r0, [pc, #384]	; (80021d0 <HAL_ADC_Init+0x29c>)
 8002050:	f7ff ff22 	bl	8001e98 <LL_ADC_IsEnabled>
 8002054:	4603      	mov	r3, r0
 8002056:	4323      	orrs	r3, r4
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf0c      	ite	eq
 800205c:	2301      	moveq	r3, #1
 800205e:	2300      	movne	r3, #0
 8002060:	b2db      	uxtb	r3, r3
 8002062:	e008      	b.n	8002076 <HAL_ADC_Init+0x142>
 8002064:	485b      	ldr	r0, [pc, #364]	; (80021d4 <HAL_ADC_Init+0x2a0>)
 8002066:	f7ff ff17 	bl	8001e98 <LL_ADC_IsEnabled>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d012      	beq.n	80020a0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a53      	ldr	r2, [pc, #332]	; (80021cc <HAL_ADC_Init+0x298>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d004      	beq.n	800208e <HAL_ADC_Init+0x15a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a51      	ldr	r2, [pc, #324]	; (80021d0 <HAL_ADC_Init+0x29c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_ADC_Init+0x15e>
 800208e:	4a52      	ldr	r2, [pc, #328]	; (80021d8 <HAL_ADC_Init+0x2a4>)
 8002090:	e000      	b.n	8002094 <HAL_ADC_Init+0x160>
 8002092:	4a52      	ldr	r2, [pc, #328]	; (80021dc <HAL_ADC_Init+0x2a8>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4619      	mov	r1, r3
 800209a:	4610      	mov	r0, r2
 800209c:	f7ff fd68 	bl	8001b70 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80020a0:	f7ff fd44 	bl	8001b2c <HAL_GetREVID>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d914      	bls.n	80020d8 <HAL_ADC_Init+0x1a4>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d110      	bne.n	80020d8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	7d5b      	ldrb	r3, [r3, #21]
 80020ba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020c0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020c6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7f1b      	ldrb	r3, [r3, #28]
 80020cc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80020ce:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020d0:	f043 030c 	orr.w	r3, r3, #12
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	e00d      	b.n	80020f4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7d5b      	ldrb	r3, [r3, #21]
 80020dc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020e2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020e8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	7f1b      	ldrb	r3, [r3, #28]
 80020ee:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7f1b      	ldrb	r3, [r3, #28]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	3b01      	subs	r3, #1
 8002102:	045b      	lsls	r3, r3, #17
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002116:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <HAL_ADC_Init+0x2ac>)
 800212e:	4013      	ands	r3, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	69b9      	ldr	r1, [r7, #24]
 8002136:	430b      	orrs	r3, r1
 8002138:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff fed2 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 8002144:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fedf 	bl	8001f0e <LL_ADC_INJ_IsConversionOngoing>
 8002150:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d15f      	bne.n	8002218 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d15c      	bne.n	8002218 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	7d1b      	ldrb	r3, [r3, #20]
 8002162:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_ADC_Init+0x2b0>)
 8002174:	4013      	ands	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	69b9      	ldr	r1, [r7, #24]
 800217c:	430b      	orrs	r3, r1
 800217e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002186:	2b01      	cmp	r3, #1
 8002188:	d130      	bne.n	80021ec <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <HAL_ADC_Init+0x2b4>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800219e:	3a01      	subs	r2, #1
 80021a0:	0411      	lsls	r1, r2, #16
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021ac:	4311      	orrs	r1, r2
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021b2:	430a      	orrs	r2, r1
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	611a      	str	r2, [r3, #16]
 80021c0:	e01c      	b.n	80021fc <HAL_ADC_Init+0x2c8>
 80021c2:	bf00      	nop
 80021c4:	24000000 	.word	0x24000000
 80021c8:	053e2d63 	.word	0x053e2d63
 80021cc:	40022000 	.word	0x40022000
 80021d0:	40022100 	.word	0x40022100
 80021d4:	58026000 	.word	0x58026000
 80021d8:	40022300 	.word	0x40022300
 80021dc:	58026300 	.word	0x58026300
 80021e0:	fff0c003 	.word	0xfff0c003
 80021e4:	ffffbffc 	.word	0xffffbffc
 80021e8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691a      	ldr	r2, [r3, #16]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fdd6 	bl	8002dc4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10c      	bne.n	800223a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	f023 010f 	bic.w	r1, r3, #15
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	1e5a      	subs	r2, r3, #1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
 8002238:	e007      	b.n	800224a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 020f 	bic.w	r2, r2, #15
 8002248:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	f023 0303 	bic.w	r3, r3, #3
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	; 0x54
 800225a:	e007      	b.n	800226c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f043 0210 	orr.w	r2, r3, #16
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800226c:	7ffb      	ldrb	r3, [r7, #31]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3724      	adds	r7, #36	; 0x24
 8002272:	46bd      	mov	sp, r7
 8002274:	bd90      	pop	{r4, r7, pc}
 8002276:	bf00      	nop

08002278 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a5c      	ldr	r2, [pc, #368]	; (80023f8 <HAL_ADC_Start+0x180>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d004      	beq.n	8002294 <HAL_ADC_Start+0x1c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a5b      	ldr	r2, [pc, #364]	; (80023fc <HAL_ADC_Start+0x184>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d101      	bne.n	8002298 <HAL_ADC_Start+0x20>
 8002294:	4b5a      	ldr	r3, [pc, #360]	; (8002400 <HAL_ADC_Start+0x188>)
 8002296:	e000      	b.n	800229a <HAL_ADC_Start+0x22>
 8002298:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <HAL_ADC_Start+0x18c>)
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fd7e 	bl	8001d9c <LL_ADC_GetMultimode>
 80022a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fe1e 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 809a 	bne.w	80023e8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_Start+0x4a>
 80022be:	2302      	movs	r3, #2
 80022c0:	e095      	b.n	80023ee <HAL_ADC_Start+0x176>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 fcf0 	bl	8002cb0 <ADC_Enable>
 80022d0:	4603      	mov	r3, r0
 80022d2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 8081 	bne.w	80023de <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80022e0:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_ADC_Start+0x190>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a42      	ldr	r2, [pc, #264]	; (80023fc <HAL_ADC_Start+0x184>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d002      	beq.n	80022fc <HAL_ADC_Start+0x84>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	e000      	b.n	80022fe <HAL_ADC_Start+0x86>
 80022fc:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <HAL_ADC_Start+0x180>)
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	4293      	cmp	r3, r2
 8002304:	d002      	beq.n	800230c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d105      	bne.n	8002318 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002324:	d106      	bne.n	8002334 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	f023 0206 	bic.w	r2, r3, #6
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	659a      	str	r2, [r3, #88]	; 0x58
 8002332:	e002      	b.n	800233a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	221c      	movs	r2, #28
 8002340:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a2b      	ldr	r2, [pc, #172]	; (80023fc <HAL_ADC_Start+0x184>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d002      	beq.n	800235a <HAL_ADC_Start+0xe2>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	e000      	b.n	800235c <HAL_ADC_Start+0xe4>
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <HAL_ADC_Start+0x180>)
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	4293      	cmp	r3, r2
 8002362:	d008      	beq.n	8002376 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	2b05      	cmp	r3, #5
 800236e:	d002      	beq.n	8002376 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	2b09      	cmp	r3, #9
 8002374:	d114      	bne.n	80023a0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d007      	beq.n	8002394 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800238c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fd91 	bl	8001ec0 <LL_ADC_REG_StartConversion>
 800239e:	e025      	b.n	80023ec <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a12      	ldr	r2, [pc, #72]	; (80023fc <HAL_ADC_Start+0x184>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d002      	beq.n	80023bc <HAL_ADC_Start+0x144>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	e000      	b.n	80023be <HAL_ADC_Start+0x146>
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <HAL_ADC_Start+0x180>)
 80023be:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00f      	beq.n	80023ec <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	655a      	str	r2, [r3, #84]	; 0x54
 80023dc:	e006      	b.n	80023ec <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80023e6:	e001      	b.n	80023ec <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
 80023ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40022000 	.word	0x40022000
 80023fc:	40022100 	.word	0x40022100
 8002400:	40022300 	.word	0x40022300
 8002404:	58026300 	.word	0x58026300
 8002408:	fffff0fe 	.word	0xfffff0fe

0800240c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a72      	ldr	r2, [pc, #456]	; (80025e4 <HAL_ADC_PollForConversion+0x1d8>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d004      	beq.n	800242a <HAL_ADC_PollForConversion+0x1e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a70      	ldr	r2, [pc, #448]	; (80025e8 <HAL_ADC_PollForConversion+0x1dc>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d101      	bne.n	800242e <HAL_ADC_PollForConversion+0x22>
 800242a:	4b70      	ldr	r3, [pc, #448]	; (80025ec <HAL_ADC_PollForConversion+0x1e0>)
 800242c:	e000      	b.n	8002430 <HAL_ADC_PollForConversion+0x24>
 800242e:	4b70      	ldr	r3, [pc, #448]	; (80025f0 <HAL_ADC_PollForConversion+0x1e4>)
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fcb3 	bl	8001d9c <LL_ADC_GetMultimode>
 8002436:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d102      	bne.n	8002446 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002440:	2308      	movs	r3, #8
 8002442:	61fb      	str	r3, [r7, #28]
 8002444:	e037      	b.n	80024b6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b05      	cmp	r3, #5
 8002450:	d002      	beq.n	8002458 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b09      	cmp	r3, #9
 8002456:	d111      	bne.n	800247c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0220 	orr.w	r2, r3, #32
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e0b1      	b.n	80025da <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002476:	2304      	movs	r3, #4
 8002478:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800247a:	e01c      	b.n	80024b6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_ADC_PollForConversion+0x1d8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_ADC_PollForConversion+0x84>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a57      	ldr	r2, [pc, #348]	; (80025e8 <HAL_ADC_PollForConversion+0x1dc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d101      	bne.n	8002494 <HAL_ADC_PollForConversion+0x88>
 8002490:	4b56      	ldr	r3, [pc, #344]	; (80025ec <HAL_ADC_PollForConversion+0x1e0>)
 8002492:	e000      	b.n	8002496 <HAL_ADC_PollForConversion+0x8a>
 8002494:	4b56      	ldr	r3, [pc, #344]	; (80025f0 <HAL_ADC_PollForConversion+0x1e4>)
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fc8e 	bl	8001db8 <LL_ADC_GetMultiDMATransfer>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	f043 0220 	orr.w	r2, r3, #32
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e093      	b.n	80025da <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024b2:	2304      	movs	r3, #4
 80024b4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80024b6:	f7ff fb09 	bl	8001acc <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024bc:	e021      	b.n	8002502 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c4:	d01d      	beq.n	8002502 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80024c6:	f7ff fb01 	bl	8001acc <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d302      	bcc.n	80024dc <HAL_ADC_PollForConversion+0xd0>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d112      	bne.n	8002502 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10b      	bne.n	8002502 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ee:	f043 0204 	orr.w	r2, r3, #4
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e06b      	b.n	80025da <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0d6      	beq.n	80024be <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fbad 	bl	8001c80 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01c      	beq.n	8002566 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7d5b      	ldrb	r3, [r3, #21]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d118      	bne.n	8002566 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b08      	cmp	r3, #8
 8002540:	d111      	bne.n	8002566 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1f      	ldr	r2, [pc, #124]	; (80025e8 <HAL_ADC_PollForConversion+0x1dc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d002      	beq.n	8002576 <HAL_ADC_PollForConversion+0x16a>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	e000      	b.n	8002578 <HAL_ADC_PollForConversion+0x16c>
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_ADC_PollForConversion+0x1d8>)
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	4293      	cmp	r3, r2
 800257e:	d008      	beq.n	8002592 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d005      	beq.n	8002592 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b05      	cmp	r3, #5
 800258a:	d002      	beq.n	8002592 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b09      	cmp	r3, #9
 8002590:	d104      	bne.n	800259c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	e00c      	b.n	80025b6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_ADC_PollForConversion+0x1dc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d002      	beq.n	80025ac <HAL_ADC_PollForConversion+0x1a0>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	e000      	b.n	80025ae <HAL_ADC_PollForConversion+0x1a2>
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_ADC_PollForConversion+0x1d8>)
 80025ae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d104      	bne.n	80025c6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2208      	movs	r2, #8
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	e008      	b.n	80025d8 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	220c      	movs	r2, #12
 80025d6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40022000 	.word	0x40022000
 80025e8:	40022100 	.word	0x40022100
 80025ec:	40022300 	.word	0x40022300
 80025f0:	58026300 	.word	0x58026300

080025f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b0a1      	sub	sp, #132	; 0x84
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a9d      	ldr	r2, [pc, #628]	; (80028a0 <HAL_ADC_ConfigChannel+0x290>)
 800262a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_ADC_ConfigChannel+0x2a>
 8002636:	2302      	movs	r3, #2
 8002638:	e321      	b.n	8002c7e <HAL_ADC_ConfigChannel+0x66e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff fc4e 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	f040 8306 	bne.w	8002c60 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800265c:	2b00      	cmp	r3, #0
 800265e:	d108      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x62>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	2201      	movs	r2, #1
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	e016      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x90>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002682:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800268a:	2320      	movs	r3, #32
 800268c:	e003      	b.n	8002696 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800268e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002690:	fab3 f383 	clz	r3, r3
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2201      	movs	r2, #1
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	69d1      	ldr	r1, [r2, #28]
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	430b      	orrs	r3, r1
 80026ac:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f7ff faf3 	bl	8001ca6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fc0f 	bl	8001ee8 <LL_ADC_REG_IsConversionOngoing>
 80026ca:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fc1c 	bl	8001f0e <LL_ADC_INJ_IsConversionOngoing>
 80026d6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f040 80b3 	bne.w	8002846 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f040 80af 	bne.w	8002846 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6819      	ldr	r1, [r3, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	461a      	mov	r2, r3
 80026f6:	f7ff fb02 	bl	8001cfe <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80026fa:	4b6a      	ldr	r3, [pc, #424]	; (80028a4 <HAL_ADC_ConfigChannel+0x294>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002706:	d10b      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x110>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	089b      	lsrs	r3, r3, #2
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	e01d      	b.n	800275c <HAL_ADC_ConfigChannel+0x14c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x136>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	089b      	lsrs	r3, r3, #2
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	e00a      	b.n	800275c <HAL_ADC_ConfigChannel+0x14c>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	2b04      	cmp	r3, #4
 8002764:	d027      	beq.n	80027b6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	6919      	ldr	r1, [r3, #16]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002774:	f7ff fa30 	bl	8001bd8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6919      	ldr	r1, [r3, #16]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	7e5b      	ldrb	r3, [r3, #25]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d102      	bne.n	800278e <HAL_ADC_ConfigChannel+0x17e>
 8002788:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800278c:	e000      	b.n	8002790 <HAL_ADC_ConfigChannel+0x180>
 800278e:	2300      	movs	r3, #0
 8002790:	461a      	mov	r2, r3
 8002792:	f7ff fa5a 	bl	8001c4a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	6919      	ldr	r1, [r3, #16]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	7e1b      	ldrb	r3, [r3, #24]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d102      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x19c>
 80027a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027aa:	e000      	b.n	80027ae <HAL_ADC_ConfigChannel+0x19e>
 80027ac:	2300      	movs	r3, #0
 80027ae:	461a      	mov	r2, r3
 80027b0:	f7ff fa32 	bl	8001c18 <LL_ADC_SetDataRightShift>
 80027b4:	e047      	b.n	8002846 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	069b      	lsls	r3, r3, #26
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d107      	bne.n	80027da <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027d8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	069b      	lsls	r3, r3, #26
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d107      	bne.n	80027fe <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80027fc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002804:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	069b      	lsls	r3, r3, #26
 800280e:	429a      	cmp	r2, r3
 8002810:	d107      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002820:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002828:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	069b      	lsls	r3, r3, #26
 8002832:	429a      	cmp	r2, r3
 8002834:	d107      	bne.n	8002846 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002844:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fb24 	bl	8001e98 <LL_ADC_IsEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 820d 	bne.w	8002c72 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	461a      	mov	r2, r3
 8002866:	f7ff fa75 	bl	8001d54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	4a0c      	ldr	r2, [pc, #48]	; (80028a0 <HAL_ADC_ConfigChannel+0x290>)
 8002870:	4293      	cmp	r3, r2
 8002872:	f040 8133 	bne.w	8002adc <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002882:	2b00      	cmp	r3, #0
 8002884:	d110      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x298>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	0e9b      	lsrs	r3, r3, #26
 800288c:	3301      	adds	r3, #1
 800288e:	f003 031f 	and.w	r3, r3, #31
 8002892:	2b09      	cmp	r3, #9
 8002894:	bf94      	ite	ls
 8002896:	2301      	movls	r3, #1
 8002898:	2300      	movhi	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	e01e      	b.n	80028dc <HAL_ADC_ConfigChannel+0x2cc>
 800289e:	bf00      	nop
 80028a0:	47ff0000 	.word	0x47ff0000
 80028a4:	5c001000 	.word	0x5c001000
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80028b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80028ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80028c0:	2320      	movs	r3, #32
 80028c2:	e003      	b.n	80028cc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80028c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028c6:	fab3 f383 	clz	r3, r3
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2b09      	cmp	r3, #9
 80028d4:	bf94      	ite	ls
 80028d6:	2301      	movls	r3, #1
 80028d8:	2300      	movhi	r3, #0
 80028da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d079      	beq.n	80029d4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d107      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x2ec>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	069b      	lsls	r3, r3, #26
 80028f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028fa:	e015      	b.n	8002928 <HAL_ADC_ConfigChannel+0x318>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800290a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800290c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800290e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002914:	2320      	movs	r3, #32
 8002916:	e003      	b.n	8002920 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	3301      	adds	r3, #1
 8002922:	069b      	lsls	r3, r3, #26
 8002924:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002930:	2b00      	cmp	r3, #0
 8002932:	d109      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x338>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	3301      	adds	r3, #1
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2101      	movs	r1, #1
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	e017      	b.n	8002978 <HAL_ADC_ConfigChannel+0x368>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800295a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295c:	2b00      	cmp	r3, #0
 800295e:	d101      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002960:	2320      	movs	r3, #32
 8002962:	e003      	b.n	800296c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	3301      	adds	r3, #1
 800296e:	f003 031f 	and.w	r3, r3, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f303 	lsl.w	r3, r1, r3
 8002978:	ea42 0103 	orr.w	r1, r2, r3
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <HAL_ADC_ConfigChannel+0x38e>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	0e9b      	lsrs	r3, r3, #26
 800298e:	3301      	adds	r3, #1
 8002990:	f003 021f 	and.w	r2, r3, #31
 8002994:	4613      	mov	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	4413      	add	r3, r2
 800299a:	051b      	lsls	r3, r3, #20
 800299c:	e018      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x3c0>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80029ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80029b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e003      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4613      	mov	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029d0:	430b      	orrs	r3, r1
 80029d2:	e07e      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d107      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x3e0>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	3301      	adds	r3, #1
 80029e8:	069b      	lsls	r3, r3, #26
 80029ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029ee:	e015      	b.n	8002a1c <HAL_ADC_ConfigChannel+0x40c>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	e003      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	069b      	lsls	r3, r3, #26
 8002a18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x42c>
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	0e9b      	lsrs	r3, r3, #26
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f003 031f 	and.w	r3, r3, #31
 8002a34:	2101      	movs	r1, #1
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	e017      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x45c>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	61bb      	str	r3, [r7, #24]
  return result;
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	e003      	b.n	8002a60 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	3301      	adds	r3, #1
 8002a62:	f003 031f 	and.w	r3, r3, #31
 8002a66:	2101      	movs	r1, #1
 8002a68:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6c:	ea42 0103 	orr.w	r1, r2, r3
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10d      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x488>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0e9b      	lsrs	r3, r3, #26
 8002a82:	3301      	adds	r3, #1
 8002a84:	f003 021f 	and.w	r2, r3, #31
 8002a88:	4613      	mov	r3, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b1e      	subs	r3, #30
 8002a90:	051b      	lsls	r3, r3, #20
 8002a92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a96:	e01b      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x4c0>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	60fb      	str	r3, [r7, #12]
  return result;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8002ab0:	2320      	movs	r3, #32
 8002ab2:	e003      	b.n	8002abc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fab3 f383 	clz	r3, r3
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	f003 021f 	and.w	r2, r3, #31
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b1e      	subs	r3, #30
 8002aca:	051b      	lsls	r3, r3, #20
 8002acc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	6892      	ldr	r2, [r2, #8]
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f7ff f911 	bl	8001cfe <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f280 80c6 	bge.w	8002c72 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a67      	ldr	r2, [pc, #412]	; (8002c88 <HAL_ADC_ConfigChannel+0x678>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d004      	beq.n	8002afa <HAL_ADC_ConfigChannel+0x4ea>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a65      	ldr	r2, [pc, #404]	; (8002c8c <HAL_ADC_ConfigChannel+0x67c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x4ee>
 8002afa:	4b65      	ldr	r3, [pc, #404]	; (8002c90 <HAL_ADC_ConfigChannel+0x680>)
 8002afc:	e000      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x4f0>
 8002afe:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <HAL_ADC_ConfigChannel+0x684>)
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff f85b 	bl	8001bbc <LL_ADC_GetCommonPathInternalCh>
 8002b06:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5e      	ldr	r2, [pc, #376]	; (8002c88 <HAL_ADC_ConfigChannel+0x678>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_ADC_ConfigChannel+0x50c>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5d      	ldr	r2, [pc, #372]	; (8002c8c <HAL_ADC_ConfigChannel+0x67c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10e      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x52a>
 8002b1c:	485a      	ldr	r0, [pc, #360]	; (8002c88 <HAL_ADC_ConfigChannel+0x678>)
 8002b1e:	f7ff f9bb 	bl	8001e98 <LL_ADC_IsEnabled>
 8002b22:	4604      	mov	r4, r0
 8002b24:	4859      	ldr	r0, [pc, #356]	; (8002c8c <HAL_ADC_ConfigChannel+0x67c>)
 8002b26:	f7ff f9b7 	bl	8001e98 <LL_ADC_IsEnabled>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	4323      	orrs	r3, r4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	bf0c      	ite	eq
 8002b32:	2301      	moveq	r3, #1
 8002b34:	2300      	movne	r3, #0
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	e008      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x53c>
 8002b3a:	4857      	ldr	r0, [pc, #348]	; (8002c98 <HAL_ADC_ConfigChannel+0x688>)
 8002b3c:	f7ff f9ac 	bl	8001e98 <LL_ADC_IsEnabled>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	bf0c      	ite	eq
 8002b46:	2301      	moveq	r3, #1
 8002b48:	2300      	movne	r3, #0
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d07d      	beq.n	8002c4c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a51      	ldr	r2, [pc, #324]	; (8002c9c <HAL_ADC_ConfigChannel+0x68c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d130      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x5ac>
 8002b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d12b      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a4b      	ldr	r2, [pc, #300]	; (8002c98 <HAL_ADC_ConfigChannel+0x688>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	f040 8081 	bne.w	8002c72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a44      	ldr	r2, [pc, #272]	; (8002c88 <HAL_ADC_ConfigChannel+0x678>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d004      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x574>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a43      	ldr	r2, [pc, #268]	; (8002c8c <HAL_ADC_ConfigChannel+0x67c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x578>
 8002b84:	4a42      	ldr	r2, [pc, #264]	; (8002c90 <HAL_ADC_ConfigChannel+0x680>)
 8002b86:	e000      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x57a>
 8002b88:	4a42      	ldr	r2, [pc, #264]	; (8002c94 <HAL_ADC_ConfigChannel+0x684>)
 8002b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f7fe ffff 	bl	8001b96 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b98:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_ADC_ConfigChannel+0x690>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	099b      	lsrs	r3, r3, #6
 8002b9e:	4a41      	ldr	r2, [pc, #260]	; (8002ca4 <HAL_ADC_ConfigChannel+0x694>)
 8002ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002bac:	e002      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002bba:	e05a      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a39      	ldr	r2, [pc, #228]	; (8002ca8 <HAL_ADC_ConfigChannel+0x698>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d11e      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x5f4>
 8002bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d119      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a30      	ldr	r2, [pc, #192]	; (8002c98 <HAL_ADC_ConfigChannel+0x688>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d14b      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <HAL_ADC_ConfigChannel+0x678>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d004      	beq.n	8002bee <HAL_ADC_ConfigChannel+0x5de>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <HAL_ADC_ConfigChannel+0x67c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x5e2>
 8002bee:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <HAL_ADC_ConfigChannel+0x680>)
 8002bf0:	e000      	b.n	8002bf4 <HAL_ADC_ConfigChannel+0x5e4>
 8002bf2:	4a28      	ldr	r2, [pc, #160]	; (8002c94 <HAL_ADC_ConfigChannel+0x684>)
 8002bf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	f7fe ffca 	bl	8001b96 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c02:	e036      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a28      	ldr	r2, [pc, #160]	; (8002cac <HAL_ADC_ConfigChannel+0x69c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d131      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x662>
 8002c0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d12c      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_ADC_ConfigChannel+0x688>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d127      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_ADC_ConfigChannel+0x678>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_ADC_ConfigChannel+0x626>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <HAL_ADC_ConfigChannel+0x67c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x62a>
 8002c36:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <HAL_ADC_ConfigChannel+0x680>)
 8002c38:	e000      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x62c>
 8002c3a:	4a16      	ldr	r2, [pc, #88]	; (8002c94 <HAL_ADC_ConfigChannel+0x684>)
 8002c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c42:	4619      	mov	r1, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	f7fe ffa6 	bl	8001b96 <LL_ADC_SetCommonPathInternalCh>
 8002c4a:	e012      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c50:	f043 0220 	orr.w	r2, r3, #32
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c5e:	e008      	b.n	8002c72 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c7a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3784      	adds	r7, #132	; 0x84
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd90      	pop	{r4, r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40022100 	.word	0x40022100
 8002c90:	40022300 	.word	0x40022300
 8002c94:	58026300 	.word	0x58026300
 8002c98:	58026000 	.word	0x58026000
 8002c9c:	cb840000 	.word	0xcb840000
 8002ca0:	24000000 	.word	0x24000000
 8002ca4:	053e2d63 	.word	0x053e2d63
 8002ca8:	c7520000 	.word	0xc7520000
 8002cac:	cfb80000 	.word	0xcfb80000

08002cb0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f8eb 	bl	8001e98 <LL_ADC_IsEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d16e      	bne.n	8002da6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <ADC_Enable+0x100>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00d      	beq.n	8002cf2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e05a      	b.n	8002da8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff f8ba 	bl	8001e70 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fee6 	bl	8001acc <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2b      	ldr	r2, [pc, #172]	; (8002db4 <ADC_Enable+0x104>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d004      	beq.n	8002d16 <ADC_Enable+0x66>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a29      	ldr	r2, [pc, #164]	; (8002db8 <ADC_Enable+0x108>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <ADC_Enable+0x6a>
 8002d16:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <ADC_Enable+0x10c>)
 8002d18:	e000      	b.n	8002d1c <ADC_Enable+0x6c>
 8002d1a:	4b29      	ldr	r3, [pc, #164]	; (8002dc0 <ADC_Enable+0x110>)
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f83d 	bl	8001d9c <LL_ADC_GetMultimode>
 8002d22:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a23      	ldr	r2, [pc, #140]	; (8002db8 <ADC_Enable+0x108>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d002      	beq.n	8002d34 <ADC_Enable+0x84>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	e000      	b.n	8002d36 <ADC_Enable+0x86>
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <ADC_Enable+0x104>)
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6812      	ldr	r2, [r2, #0]
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d02c      	beq.n	8002d98 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d130      	bne.n	8002da6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d44:	e028      	b.n	8002d98 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f8a4 	bl	8001e98 <LL_ADC_IsEnabled>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d104      	bne.n	8002d60 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff f888 	bl	8001e70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d60:	f7fe feb4 	bl	8001acc <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d914      	bls.n	8002d98 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d00d      	beq.n	8002d98 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d1cf      	bne.n	8002d46 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	8000003f 	.word	0x8000003f
 8002db4:	40022000 	.word	0x40022000
 8002db8:	40022100 	.word	0x40022100
 8002dbc:	40022300 	.word	0x40022300
 8002dc0:	58026300 	.word	0x58026300

08002dc4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a79      	ldr	r2, [pc, #484]	; (8002fb8 <ADC_ConfigureBoostMode+0x1f4>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <ADC_ConfigureBoostMode+0x1c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a78      	ldr	r2, [pc, #480]	; (8002fbc <ADC_ConfigureBoostMode+0x1f8>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d109      	bne.n	8002df4 <ADC_ConfigureBoostMode+0x30>
 8002de0:	4b77      	ldr	r3, [pc, #476]	; (8002fc0 <ADC_ConfigureBoostMode+0x1fc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e008      	b.n	8002e06 <ADC_ConfigureBoostMode+0x42>
 8002df4:	4b73      	ldr	r3, [pc, #460]	; (8002fc4 <ADC_ConfigureBoostMode+0x200>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	bf14      	ite	ne
 8002e00:	2301      	movne	r3, #1
 8002e02:	2300      	moveq	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d01c      	beq.n	8002e44 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002e0a:	f002 fa59 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 8002e0e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e18:	d010      	beq.n	8002e3c <ADC_ConfigureBoostMode+0x78>
 8002e1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002e1e:	d871      	bhi.n	8002f04 <ADC_ConfigureBoostMode+0x140>
 8002e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e24:	d002      	beq.n	8002e2c <ADC_ConfigureBoostMode+0x68>
 8002e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e2a:	d16b      	bne.n	8002f04 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	60fb      	str	r3, [r7, #12]
        break;
 8002e3a:	e066      	b.n	8002f0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	60fb      	str	r3, [r7, #12]
        break;
 8002e42:	e062      	b.n	8002f0a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002e44:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002e48:	f003 f9dc 	bl	8006204 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e4c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e56:	d051      	beq.n	8002efc <ADC_ConfigureBoostMode+0x138>
 8002e58:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002e5c:	d854      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x144>
 8002e5e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e62:	d047      	beq.n	8002ef4 <ADC_ConfigureBoostMode+0x130>
 8002e64:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002e68:	d84e      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x144>
 8002e6a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e6e:	d03d      	beq.n	8002eec <ADC_ConfigureBoostMode+0x128>
 8002e70:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002e74:	d848      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x144>
 8002e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e7a:	d033      	beq.n	8002ee4 <ADC_ConfigureBoostMode+0x120>
 8002e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e80:	d842      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x144>
 8002e82:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e86:	d029      	beq.n	8002edc <ADC_ConfigureBoostMode+0x118>
 8002e88:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002e8c:	d83c      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x144>
 8002e8e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e92:	d01a      	beq.n	8002eca <ADC_ConfigureBoostMode+0x106>
 8002e94:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002e98:	d836      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x144>
 8002e9a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002e9e:	d014      	beq.n	8002eca <ADC_ConfigureBoostMode+0x106>
 8002ea0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002ea4:	d830      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x144>
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eaa:	d00e      	beq.n	8002eca <ADC_ConfigureBoostMode+0x106>
 8002eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eb0:	d82a      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x144>
 8002eb2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002eb6:	d008      	beq.n	8002eca <ADC_ConfigureBoostMode+0x106>
 8002eb8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002ebc:	d824      	bhi.n	8002f08 <ADC_ConfigureBoostMode+0x144>
 8002ebe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ec2:	d002      	beq.n	8002eca <ADC_ConfigureBoostMode+0x106>
 8002ec4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002ec8:	d11e      	bne.n	8002f08 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	0c9b      	lsrs	r3, r3, #18
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	60fb      	str	r3, [r7, #12]
        break;
 8002eda:	e016      	b.n	8002f0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	091b      	lsrs	r3, r3, #4
 8002ee0:	60fb      	str	r3, [r7, #12]
        break;
 8002ee2:	e012      	b.n	8002f0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	60fb      	str	r3, [r7, #12]
        break;
 8002eea:	e00e      	b.n	8002f0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	60fb      	str	r3, [r7, #12]
        break;
 8002ef2:	e00a      	b.n	8002f0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	09db      	lsrs	r3, r3, #7
 8002ef8:	60fb      	str	r3, [r7, #12]
        break;
 8002efa:	e006      	b.n	8002f0a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	60fb      	str	r3, [r7, #12]
        break;
 8002f02:	e002      	b.n	8002f0a <ADC_ConfigureBoostMode+0x146>
        break;
 8002f04:	bf00      	nop
 8002f06:	e000      	b.n	8002f0a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002f08:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002f0a:	f7fe fe0f 	bl	8001b2c <HAL_GetREVID>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d815      	bhi.n	8002f44 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4a2b      	ldr	r2, [pc, #172]	; (8002fc8 <ADC_ConfigureBoostMode+0x204>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d908      	bls.n	8002f32 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002f30:	e03e      	b.n	8002fb0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f40:	609a      	str	r2, [r3, #8]
}
 8002f42:	e035      	b.n	8002fb0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4a1f      	ldr	r2, [pc, #124]	; (8002fcc <ADC_ConfigureBoostMode+0x208>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d808      	bhi.n	8002f64 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f60:	609a      	str	r2, [r3, #8]
}
 8002f62:	e025      	b.n	8002fb0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <ADC_ConfigureBoostMode+0x20c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d80a      	bhi.n	8002f82 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7e:	609a      	str	r2, [r3, #8]
}
 8002f80:	e016      	b.n	8002fb0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <ADC_ConfigureBoostMode+0x210>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d80a      	bhi.n	8002fa0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9c:	609a      	str	r2, [r3, #8]
}
 8002f9e:	e007      	b.n	8002fb0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002fae:	609a      	str	r2, [r3, #8]
}
 8002fb0:	bf00      	nop
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40022000 	.word	0x40022000
 8002fbc:	40022100 	.word	0x40022100
 8002fc0:	40022300 	.word	0x40022300
 8002fc4:	58026300 	.word	0x58026300
 8002fc8:	01312d00 	.word	0x01312d00
 8002fcc:	005f5e10 	.word	0x005f5e10
 8002fd0:	00bebc20 	.word	0x00bebc20
 8002fd4:	017d7840 	.word	0x017d7840

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <__NVIC_SetPriorityGrouping+0x40>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	4313      	orrs	r3, r2
 8003004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003006:	4a04      	ldr	r2, [pc, #16]	; (8003018 <__NVIC_SetPriorityGrouping+0x40>)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	60d3      	str	r3, [r2, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00
 800301c:	05fa0000 	.word	0x05fa0000

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800304c:	2b00      	cmp	r3, #0
 800304e:	db0a      	blt.n	8003066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	490c      	ldr	r1, [pc, #48]	; (8003088 <__NVIC_SetPriority+0x4c>)
 8003056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	440b      	add	r3, r1
 8003060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003064:	e00a      	b.n	800307c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4908      	ldr	r1, [pc, #32]	; (800308c <__NVIC_SetPriority+0x50>)
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	3b04      	subs	r3, #4
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	440b      	add	r3, r1
 800307a:	761a      	strb	r2, [r3, #24]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f1c3 0307 	rsb	r3, r3, #7
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	bf28      	it	cs
 80030ae:	2304      	movcs	r3, #4
 80030b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d902      	bls.n	80030c0 <NVIC_EncodePriority+0x30>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b03      	subs	r3, #3
 80030be:	e000      	b.n	80030c2 <NVIC_EncodePriority+0x32>
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	401a      	ands	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d8:	f04f 31ff 	mov.w	r1, #4294967295
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43d9      	mvns	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	4313      	orrs	r3, r2
         );
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3724      	adds	r7, #36	; 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003108:	d301      	bcc.n	800310e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310a:	2301      	movs	r3, #1
 800310c:	e00f      	b.n	800312e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <SysTick_Config+0x40>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003116:	210f      	movs	r1, #15
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	f7ff ff8e 	bl	800303c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <SysTick_Config+0x40>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <SysTick_Config+0x40>)
 8003128:	2207      	movs	r2, #7
 800312a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	e000e010 	.word	0xe000e010

0800313c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff47 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003160:	f7ff ff5e 	bl	8003020 <__NVIC_GetPriorityGrouping>
 8003164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	6978      	ldr	r0, [r7, #20]
 800316c:	f7ff ff90 	bl	8003090 <NVIC_EncodePriority>
 8003170:	4602      	mov	r2, r0
 8003172:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff5f 	bl	800303c <__NVIC_SetPriority>
}
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffb2 	bl	80030f8 <SysTick_Config>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b098      	sub	sp, #96	; 0x60
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80031a8:	4a84      	ldr	r2, [pc, #528]	; (80033bc <HAL_FDCAN_Init+0x21c>)
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	4611      	mov	r1, r2
 80031b0:	224c      	movs	r2, #76	; 0x4c
 80031b2:	4618      	mov	r0, r3
 80031b4:	f006 fc30 	bl	8009a18 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e1c6      	b.n	8003550 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7e      	ldr	r2, [pc, #504]	; (80033c0 <HAL_FDCAN_Init+0x220>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d106      	bne.n	80031da <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe f994 	bl	800151c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0210 	bic.w	r2, r2, #16
 8003202:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003204:	f7fe fc62 	bl	8001acc <HAL_GetTick>
 8003208:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800320a:	e014      	b.n	8003236 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800320c:	f7fe fc5e 	bl	8001acc <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b0a      	cmp	r3, #10
 8003218:	d90d      	bls.n	8003236 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e18c      	b.n	8003550 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d0e3      	beq.n	800320c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003254:	f7fe fc3a 	bl	8001acc <HAL_GetTick>
 8003258:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800325a:	e014      	b.n	8003286 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800325c:	f7fe fc36 	bl	8001acc <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b0a      	cmp	r3, #10
 8003268:	d90d      	bls.n	8003286 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2203      	movs	r2, #3
 800327e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e164      	b.n	8003550 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0e3      	beq.n	800325c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0202 	orr.w	r2, r2, #2
 80032a2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7c1b      	ldrb	r3, [r3, #16]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d108      	bne.n	80032be <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ba:	619a      	str	r2, [r3, #24]
 80032bc:	e007      	b.n	80032ce <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7c5b      	ldrb	r3, [r3, #17]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d108      	bne.n	80032e8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699a      	ldr	r2, [r3, #24]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e4:	619a      	str	r2, [r3, #24]
 80032e6:	e007      	b.n	80032f8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7c9b      	ldrb	r3, [r3, #18]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d108      	bne.n	8003312 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800330e:	619a      	str	r2, [r3, #24]
 8003310:	e007      	b.n	8003322 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003320:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003346:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0210 	bic.w	r2, r2, #16
 8003356:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d108      	bne.n	8003372 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0204 	orr.w	r2, r2, #4
 800336e:	619a      	str	r2, [r3, #24]
 8003370:	e030      	b.n	80033d4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d02c      	beq.n	80033d4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d020      	beq.n	80033c4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003390:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0210 	orr.w	r2, r2, #16
 80033a0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d114      	bne.n	80033d4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0220 	orr.w	r2, r2, #32
 80033b8:	619a      	str	r2, [r3, #24]
 80033ba:	e00b      	b.n	80033d4 <HAL_FDCAN_Init+0x234>
 80033bc:	0800c47c 	.word	0x0800c47c
 80033c0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0220 	orr.w	r2, r2, #32
 80033d2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	3b01      	subs	r3, #1
 80033da:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033e4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033ec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033fc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033fe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003408:	d115      	bne.n	8003436 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	3b01      	subs	r3, #1
 8003416:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003418:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	3b01      	subs	r3, #1
 8003420:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003422:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	3b01      	subs	r3, #1
 800342c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003432:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003434:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	4413      	add	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d011      	beq.n	8003486 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800346a:	f023 0107 	bic.w	r1, r3, #7
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	3360      	adds	r3, #96	; 0x60
 8003476:	443b      	add	r3, r7
 8003478:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d011      	beq.n	80034b2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003496:	f023 0107 	bic.w	r1, r3, #7
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	443b      	add	r3, r7
 80034a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d012      	beq.n	80034e0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034c2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	3360      	adds	r3, #96	; 0x60
 80034ce:	443b      	add	r3, r7
 80034d0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80034d4:	011a      	lsls	r2, r3, #4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d012      	beq.n	800350e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034f0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	3360      	adds	r3, #96	; 0x60
 80034fc:	443b      	add	r3, r7
 80034fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003502:	021a      	lsls	r2, r3, #8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a11      	ldr	r2, [pc, #68]	; (8003558 <HAL_FDCAN_Init+0x3b8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d107      	bne.n	8003528 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f022 0203 	bic.w	r2, r2, #3
 8003526:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 faef 	bl	8003b24 <FDCAN_CalcultateRamBlockAddresses>
 8003546:	4603      	mov	r3, r0
 8003548:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800354c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003550:	4618      	mov	r0, r3
 8003552:	3760      	adds	r7, #96	; 0x60
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	4000a000 	.word	0x4000a000

0800355c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800356c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d002      	beq.n	800357a <HAL_FDCAN_ConfigFilter+0x1e>
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d157      	bne.n	800362a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d12b      	bne.n	80035da <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b07      	cmp	r3, #7
 8003588:	d10d      	bne.n	80035a6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003596:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800359c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800359e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	e00e      	b.n	80035c4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035b2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80035ba:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e025      	b.n	8003626 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	075a      	lsls	r2, r3, #29
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b07      	cmp	r3, #7
 80035ee:	d103      	bne.n	80035f8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e006      	b.n	8003606 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	079a      	lsls	r2, r3, #30
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	3304      	adds	r3, #4
 800361e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e008      	b.n	800363c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d111      	bne.n	8003680 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e008      	b.n	8003692 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003686:	f043 0204 	orr.w	r2, r3, #4
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d141      	bne.n	800373a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036be:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e038      	b.n	800374c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80036e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e026      	b.n	800374c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fb8b 	bl	8003e30 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2101      	movs	r1, #1
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800372a:	2201      	movs	r2, #1
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	409a      	lsls	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e008      	b.n	800374c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003740:	f043 0208 	orr.w	r2, r3, #8
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003754:	b480      	push	{r7}
 8003756:	b08b      	sub	sp, #44	; 0x2c
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800376c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800376e:	7efb      	ldrb	r3, [r7, #27]
 8003770:	2b02      	cmp	r3, #2
 8003772:	f040 814b 	bne.w	8003a0c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d14d      	bne.n	8003818 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003784:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e13e      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e12c      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037cc:	0e1b      	lsrs	r3, r3, #24
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10b      	bne.n	80037ee <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037de:	0fdb      	lsrs	r3, r3, #31
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e8:	d101      	bne.n	80037ee <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80037ea:	2301      	movs	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	69f9      	ldr	r1, [r7, #28]
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e069      	b.n	80038ec <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b41      	cmp	r3, #65	; 0x41
 800381c:	d14d      	bne.n	80038ba <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0ed      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800384a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003858:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0db      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800386e:	0e1b      	lsrs	r3, r3, #24
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10b      	bne.n	8003890 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003880:	0fdb      	lsrs	r3, r3, #31
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800388a:	d101      	bne.n	8003890 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800388c:	2301      	movs	r3, #1
 800388e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ac:	69f9      	ldr	r1, [r7, #28]
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	e018      	b.n	80038ec <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d309      	bcc.n	80038d8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0a2      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0c9b      	lsrs	r3, r3, #18
 8003906:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e005      	b.n	800391c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	3304      	adds	r3, #4
 8003938:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0e1b      	lsrs	r3, r3, #24
 800396e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	0fda      	lsrs	r2, r3, #31
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	3304      	adds	r3, #4
 8003984:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800398a:	2300      	movs	r3, #0
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	e00a      	b.n	80039a6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	441a      	add	r2, r3
 8003996:	6839      	ldr	r1, [r7, #0]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	440b      	add	r3, r1
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	3301      	adds	r3, #1
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <HAL_FDCAN_GetRxMessage+0x2d8>)
 80039ae:	5cd3      	ldrb	r3, [r2, r3]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d3eb      	bcc.n	8003990 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d105      	bne.n	80039ca <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80039c8:	e01e      	b.n	8003a08 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b41      	cmp	r3, #65	; 0x41
 80039ce:	d105      	bne.n	80039dc <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80039da:	e015      	b.n	8003a08 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b1f      	cmp	r3, #31
 80039e0:	d808      	bhi.n	80039f4 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2101      	movs	r1, #1
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	fa01 f202 	lsl.w	r2, r1, r2
 80039ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80039f2:	e009      	b.n	8003a08 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 021f 	and.w	r2, r3, #31
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2101      	movs	r1, #1
 8003a00:	fa01 f202 	lsl.w	r2, r1, r2
 8003a04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e008      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a12:	f043 0208 	orr.w	r2, r3, #8
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	372c      	adds	r7, #44	; 0x2c
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	0800c4d8 	.word	0x0800c4d8

08003a30 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003a42:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d002      	beq.n	8003a50 <HAL_FDCAN_ActivateNotification+0x20>
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d155      	bne.n	8003afc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a6e:	e014      	b.n	8003a9a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d108      	bne.n	8003a92 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0202 	orr.w	r2, r2, #2
 8003a8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a90:	e003      	b.n	8003a9a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2203      	movs	r2, #3
 8003a98:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <HAL_FDCAN_ActivateNotification+0xec>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6553      	str	r3, [r2, #84]	; 0x54
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	0f9b      	lsrs	r3, r3, #30
 8003af2:	490b      	ldr	r1, [pc, #44]	; (8003b20 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e008      	b.n	8003b0e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	3fcfffff 	.word	0x3fcfffff
 8003b20:	4000a800 	.word	0x4000a800

08003b24 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003b3a:	4ba7      	ldr	r3, [pc, #668]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	0091      	lsls	r1, r2, #2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	430b      	orrs	r3, r1
 8003b48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b54:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	041a      	lsls	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	4413      	add	r3, r2
 8003b70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b7a:	4b97      	ldr	r3, [pc, #604]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	0091      	lsls	r1, r2, #2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	430b      	orrs	r3, r1
 8003b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	041a      	lsls	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003bbc:	4b86      	ldr	r3, [pc, #536]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	0091      	lsls	r1, r2, #2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bd6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	041a      	lsls	r2, r3, #16
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c04:	4b74      	ldr	r3, [pc, #464]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	0091      	lsls	r1, r2, #2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c1e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	041a      	lsls	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	4413      	add	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c4c:	4b62      	ldr	r3, [pc, #392]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	0091      	lsls	r1, r2, #2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003c78:	4b57      	ldr	r3, [pc, #348]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	0091      	lsls	r1, r2, #2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c92:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	041a      	lsls	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	0091      	lsls	r1, r2, #2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cd4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	041a      	lsls	r2, r3, #16
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cf0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	061a      	lsls	r2, r3, #24
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d08:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009a      	lsls	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	441a      	add	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	441a      	add	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	441a      	add	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	441a      	add	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a04      	ldr	r2, [pc, #16]	; (8003de0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d915      	bls.n	8003e00 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003dd4:	e006      	b.n	8003de4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003dd6:	bf00      	nop
 8003dd8:	ffff0003 	.word	0xffff0003
 8003ddc:	10002b00 	.word	0x10002b00
 8003de0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dea:	f043 0220 	orr.w	r2, r3, #32
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2203      	movs	r2, #3
 8003df8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e010      	b.n	8003e22 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e005      	b.n	8003e14 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3304      	adds	r3, #4
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3f3      	bcc.n	8003e08 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop

08003e30 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003e4e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	e00a      	b.n	8003e72 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003e64:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003e6a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e70:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003e7c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003e82:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003e88:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e020      	b.n	8003f08 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	3303      	adds	r3, #3
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	440b      	add	r3, r1
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003ede:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	440b      	add	r3, r1
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003eec:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	440a      	add	r2, r1
 8003ef4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003ef6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	3304      	adds	r3, #4
 8003f00:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	3304      	adds	r3, #4
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	4a06      	ldr	r2, [pc, #24]	; (8003f28 <FDCAN_CopyMessageToRAM+0xf8>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	461a      	mov	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d3d5      	bcc.n	8003ec6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	3724      	adds	r7, #36	; 0x24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	0800c4d8 	.word	0x0800c4d8

08003f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f3a:	4b89      	ldr	r3, [pc, #548]	; (8004160 <HAL_GPIO_Init+0x234>)
 8003f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f3e:	e194      	b.n	800426a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	2101      	movs	r1, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8186 	beq.w	8004264 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d005      	beq.n	8003f70 <HAL_GPIO_Init+0x44>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d130      	bne.n	8003fd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0201 	and.w	r2, r3, #1
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d017      	beq.n	800400e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	2203      	movs	r2, #3
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4313      	orrs	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d123      	bne.n	8004062 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	08da      	lsrs	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3208      	adds	r2, #8
 8004022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	220f      	movs	r2, #15
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	08da      	lsrs	r2, r3, #3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3208      	adds	r2, #8
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0203 	and.w	r2, r3, #3
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80e0 	beq.w	8004264 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a4:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_GPIO_Init+0x238>)
 80040a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040aa:	4a2e      	ldr	r2, [pc, #184]	; (8004164 <HAL_GPIO_Init+0x238>)
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040b4:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <HAL_GPIO_Init+0x238>)
 80040b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040c2:	4a29      	ldr	r2, [pc, #164]	; (8004168 <HAL_GPIO_Init+0x23c>)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	089b      	lsrs	r3, r3, #2
 80040c8:	3302      	adds	r3, #2
 80040ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	220f      	movs	r2, #15
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a20      	ldr	r2, [pc, #128]	; (800416c <HAL_GPIO_Init+0x240>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d052      	beq.n	8004194 <HAL_GPIO_Init+0x268>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <HAL_GPIO_Init+0x244>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d031      	beq.n	800415a <HAL_GPIO_Init+0x22e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <HAL_GPIO_Init+0x248>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d02b      	beq.n	8004156 <HAL_GPIO_Init+0x22a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <HAL_GPIO_Init+0x24c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d025      	beq.n	8004152 <HAL_GPIO_Init+0x226>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1c      	ldr	r2, [pc, #112]	; (800417c <HAL_GPIO_Init+0x250>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01f      	beq.n	800414e <HAL_GPIO_Init+0x222>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <HAL_GPIO_Init+0x254>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d019      	beq.n	800414a <HAL_GPIO_Init+0x21e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <HAL_GPIO_Init+0x258>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_GPIO_Init+0x21a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <HAL_GPIO_Init+0x25c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00d      	beq.n	8004142 <HAL_GPIO_Init+0x216>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a18      	ldr	r2, [pc, #96]	; (800418c <HAL_GPIO_Init+0x260>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <HAL_GPIO_Init+0x212>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a17      	ldr	r2, [pc, #92]	; (8004190 <HAL_GPIO_Init+0x264>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_GPIO_Init+0x20e>
 8004136:	2309      	movs	r3, #9
 8004138:	e02d      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800413a:	230a      	movs	r3, #10
 800413c:	e02b      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800413e:	2308      	movs	r3, #8
 8004140:	e029      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 8004142:	2307      	movs	r3, #7
 8004144:	e027      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 8004146:	2306      	movs	r3, #6
 8004148:	e025      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800414a:	2305      	movs	r3, #5
 800414c:	e023      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800414e:	2304      	movs	r3, #4
 8004150:	e021      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 8004152:	2303      	movs	r3, #3
 8004154:	e01f      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 8004156:	2302      	movs	r3, #2
 8004158:	e01d      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800415a:	2301      	movs	r3, #1
 800415c:	e01b      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800415e:	bf00      	nop
 8004160:	58000080 	.word	0x58000080
 8004164:	58024400 	.word	0x58024400
 8004168:	58000400 	.word	0x58000400
 800416c:	58020000 	.word	0x58020000
 8004170:	58020400 	.word	0x58020400
 8004174:	58020800 	.word	0x58020800
 8004178:	58020c00 	.word	0x58020c00
 800417c:	58021000 	.word	0x58021000
 8004180:	58021400 	.word	0x58021400
 8004184:	58021800 	.word	0x58021800
 8004188:	58021c00 	.word	0x58021c00
 800418c:	58022000 	.word	0x58022000
 8004190:	58022400 	.word	0x58022400
 8004194:	2300      	movs	r3, #0
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	f002 0203 	and.w	r2, r2, #3
 800419c:	0092      	lsls	r2, r2, #2
 800419e:	4093      	lsls	r3, r2
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a6:	4938      	ldr	r1, [pc, #224]	; (8004288 <HAL_GPIO_Init+0x35c>)
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	3302      	adds	r3, #2
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	3301      	adds	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	f47f ae63 	bne.w	8003f40 <HAL_GPIO_Init+0x14>
  }
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	3724      	adds	r7, #36	; 0x24
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	58000400 	.word	0x58000400

0800428c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
 8004298:	4613      	mov	r3, r2
 800429a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800429c:	787b      	ldrb	r3, [r7, #1]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042a8:	e003      	b.n	80042b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	041a      	lsls	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	619a      	str	r2, [r3, #24]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr

080042be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	460b      	mov	r3, r1
 80042c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042d0:	887a      	ldrh	r2, [r7, #2]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4013      	ands	r3, r2
 80042d6:	041a      	lsls	r2, r3, #16
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	43d9      	mvns	r1, r3
 80042dc:	887b      	ldrh	r3, [r7, #2]
 80042de:	400b      	ands	r3, r1
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	619a      	str	r2, [r3, #24]
}
 80042e6:	bf00      	nop
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80042fc:	4a08      	ldr	r2, [pc, #32]	; (8004320 <HAL_HSEM_FastTake+0x2c>)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3320      	adds	r3, #32
 8004302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004306:	4a07      	ldr	r2, [pc, #28]	; (8004324 <HAL_HSEM_FastTake+0x30>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	58026400 	.word	0x58026400
 8004324:	80000300 	.word	0x80000300

08004328 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004332:	4906      	ldr	r1, [pc, #24]	; (800434c <HAL_HSEM_Release+0x24>)
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr
 800434c:	58026400 	.word	0x58026400

08004350 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004358:	4b29      	ldr	r3, [pc, #164]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	2b06      	cmp	r3, #6
 8004362:	d00a      	beq.n	800437a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004364:	4b26      	ldr	r3, [pc, #152]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	429a      	cmp	r2, r3
 8004370:	d001      	beq.n	8004376 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e040      	b.n	80043f8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004376:	2300      	movs	r3, #0
 8004378:	e03e      	b.n	80043f8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800437a:	4b21      	ldr	r3, [pc, #132]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004382:	491f      	ldr	r1, [pc, #124]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4313      	orrs	r3, r2
 8004388:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800438a:	f7fd fb9f 	bl	8001acc <HAL_GetTick>
 800438e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004390:	e009      	b.n	80043a6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004392:	f7fd fb9b 	bl	8001acc <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a0:	d901      	bls.n	80043a6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e028      	b.n	80043f8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80043a6:	4b16      	ldr	r3, [pc, #88]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043b2:	d1ee      	bne.n	8004392 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b1e      	cmp	r3, #30
 80043b8:	d008      	beq.n	80043cc <HAL_PWREx_ConfigSupply+0x7c>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b2e      	cmp	r3, #46	; 0x2e
 80043be:	d005      	beq.n	80043cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b1d      	cmp	r3, #29
 80043c4:	d002      	beq.n	80043cc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b2d      	cmp	r3, #45	; 0x2d
 80043ca:	d114      	bne.n	80043f6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80043cc:	f7fd fb7e 	bl	8001acc <HAL_GetTick>
 80043d0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043d2:	e009      	b.n	80043e8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043d4:	f7fd fb7a 	bl	8001acc <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043e2:	d901      	bls.n	80043e8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e007      	b.n	80043f8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043e8:	4b05      	ldr	r3, [pc, #20]	; (8004400 <HAL_PWREx_ConfigSupply+0xb0>)
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d1ee      	bne.n	80043d4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	58024800 	.word	0x58024800

08004404 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08c      	sub	sp, #48	; 0x30
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d102      	bne.n	8004418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	f000 bc1d 	b.w	8004c52 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8087 	beq.w	8004534 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004426:	4b99      	ldr	r3, [pc, #612]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004430:	4b96      	ldr	r3, [pc, #600]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004438:	2b10      	cmp	r3, #16
 800443a:	d007      	beq.n	800444c <HAL_RCC_OscConfig+0x48>
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	2b18      	cmp	r3, #24
 8004440:	d110      	bne.n	8004464 <HAL_RCC_OscConfig+0x60>
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	f003 0303 	and.w	r3, r3, #3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d10b      	bne.n	8004464 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800444c:	4b8f      	ldr	r3, [pc, #572]	; (800468c <HAL_RCC_OscConfig+0x288>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d06c      	beq.n	8004532 <HAL_RCC_OscConfig+0x12e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d168      	bne.n	8004532 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e3f6      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d106      	bne.n	800447c <HAL_RCC_OscConfig+0x78>
 800446e:	4b87      	ldr	r3, [pc, #540]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a86      	ldr	r2, [pc, #536]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	e02e      	b.n	80044da <HAL_RCC_OscConfig+0xd6>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10c      	bne.n	800449e <HAL_RCC_OscConfig+0x9a>
 8004484:	4b81      	ldr	r3, [pc, #516]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a80      	ldr	r2, [pc, #512]	; (800468c <HAL_RCC_OscConfig+0x288>)
 800448a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b7e      	ldr	r3, [pc, #504]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a7d      	ldr	r2, [pc, #500]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e01d      	b.n	80044da <HAL_RCC_OscConfig+0xd6>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044a6:	d10c      	bne.n	80044c2 <HAL_RCC_OscConfig+0xbe>
 80044a8:	4b78      	ldr	r3, [pc, #480]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a77      	ldr	r2, [pc, #476]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80044ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b2:	6013      	str	r3, [r2, #0]
 80044b4:	4b75      	ldr	r3, [pc, #468]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a74      	ldr	r2, [pc, #464]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80044ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	e00b      	b.n	80044da <HAL_RCC_OscConfig+0xd6>
 80044c2:	4b72      	ldr	r3, [pc, #456]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a71      	ldr	r2, [pc, #452]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80044c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b6f      	ldr	r3, [pc, #444]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a6e      	ldr	r2, [pc, #440]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80044d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d013      	beq.n	800450a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e2:	f7fd faf3 	bl	8001acc <HAL_GetTick>
 80044e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ea:	f7fd faef 	bl	8001acc <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b64      	cmp	r3, #100	; 0x64
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e3aa      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044fc:	4b63      	ldr	r3, [pc, #396]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0f0      	beq.n	80044ea <HAL_RCC_OscConfig+0xe6>
 8004508:	e014      	b.n	8004534 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fd fadf 	bl	8001acc <HAL_GetTick>
 800450e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004512:	f7fd fadb 	bl	8001acc <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b64      	cmp	r3, #100	; 0x64
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e396      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004524:	4b59      	ldr	r3, [pc, #356]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1f0      	bne.n	8004512 <HAL_RCC_OscConfig+0x10e>
 8004530:	e000      	b.n	8004534 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004532:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	f000 80cb 	beq.w	80046d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004542:	4b52      	ldr	r3, [pc, #328]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800454a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800454c:	4b4f      	ldr	r3, [pc, #316]	; (800468c <HAL_RCC_OscConfig+0x288>)
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_RCC_OscConfig+0x164>
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	2b18      	cmp	r3, #24
 800455c:	d156      	bne.n	800460c <HAL_RCC_OscConfig+0x208>
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d151      	bne.n	800460c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004568:	4b48      	ldr	r3, [pc, #288]	; (800468c <HAL_RCC_OscConfig+0x288>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	d005      	beq.n	8004580 <HAL_RCC_OscConfig+0x17c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d101      	bne.n	8004580 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e368      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004580:	4b42      	ldr	r3, [pc, #264]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 0219 	bic.w	r2, r3, #25
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	493f      	ldr	r1, [pc, #252]	; (800468c <HAL_RCC_OscConfig+0x288>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004592:	f7fd fa9b 	bl	8001acc <HAL_GetTick>
 8004596:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459a:	f7fd fa97 	bl	8001acc <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e352      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ac:	4b37      	ldr	r3, [pc, #220]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b8:	f7fd fab8 	bl	8001b2c <HAL_GetREVID>
 80045bc:	4603      	mov	r3, r0
 80045be:	f241 0203 	movw	r2, #4099	; 0x1003
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d817      	bhi.n	80045f6 <HAL_RCC_OscConfig+0x1f2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d108      	bne.n	80045e0 <HAL_RCC_OscConfig+0x1dc>
 80045ce:	4b2f      	ldr	r3, [pc, #188]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045d6:	4a2d      	ldr	r2, [pc, #180]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80045d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045dc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045de:	e07b      	b.n	80046d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e0:	4b2a      	ldr	r3, [pc, #168]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	031b      	lsls	r3, r3, #12
 80045ee:	4927      	ldr	r1, [pc, #156]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f4:	e070      	b.n	80046d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f6:	4b25      	ldr	r3, [pc, #148]	; (800468c <HAL_RCC_OscConfig+0x288>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	061b      	lsls	r3, r3, #24
 8004604:	4921      	ldr	r1, [pc, #132]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004606:	4313      	orrs	r3, r2
 8004608:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800460a:	e065      	b.n	80046d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d048      	beq.n	80046a6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004614:	4b1d      	ldr	r3, [pc, #116]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f023 0219 	bic.w	r2, r3, #25
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	491a      	ldr	r1, [pc, #104]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004622:	4313      	orrs	r3, r2
 8004624:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004626:	f7fd fa51 	bl	8001acc <HAL_GetTick>
 800462a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800462e:	f7fd fa4d 	bl	8001acc <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e308      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004640:	4b12      	ldr	r3, [pc, #72]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800464c:	f7fd fa6e 	bl	8001b2c <HAL_GetREVID>
 8004650:	4603      	mov	r3, r0
 8004652:	f241 0203 	movw	r2, #4099	; 0x1003
 8004656:	4293      	cmp	r3, r2
 8004658:	d81a      	bhi.n	8004690 <HAL_RCC_OscConfig+0x28c>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b40      	cmp	r3, #64	; 0x40
 8004660:	d108      	bne.n	8004674 <HAL_RCC_OscConfig+0x270>
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800466a:	4a08      	ldr	r2, [pc, #32]	; (800468c <HAL_RCC_OscConfig+0x288>)
 800466c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004670:	6053      	str	r3, [r2, #4]
 8004672:	e031      	b.n	80046d8 <HAL_RCC_OscConfig+0x2d4>
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	4902      	ldr	r1, [pc, #8]	; (800468c <HAL_RCC_OscConfig+0x288>)
 8004684:	4313      	orrs	r3, r2
 8004686:	604b      	str	r3, [r1, #4]
 8004688:	e026      	b.n	80046d8 <HAL_RCC_OscConfig+0x2d4>
 800468a:	bf00      	nop
 800468c:	58024400 	.word	0x58024400
 8004690:	4b9a      	ldr	r3, [pc, #616]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	061b      	lsls	r3, r3, #24
 800469e:	4997      	ldr	r1, [pc, #604]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	604b      	str	r3, [r1, #4]
 80046a4:	e018      	b.n	80046d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046a6:	4b95      	ldr	r3, [pc, #596]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a94      	ldr	r2, [pc, #592]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b2:	f7fd fa0b 	bl	8001acc <HAL_GetTick>
 80046b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ba:	f7fd fa07 	bl	8001acc <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e2c2      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046cc:	4b8b      	ldr	r3, [pc, #556]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0304 	and.w	r3, r3, #4
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 80a9 	beq.w	8004838 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046e6:	4b85      	ldr	r3, [pc, #532]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046f0:	4b82      	ldr	r3, [pc, #520]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d007      	beq.n	800470c <HAL_RCC_OscConfig+0x308>
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	2b18      	cmp	r3, #24
 8004700:	d13a      	bne.n	8004778 <HAL_RCC_OscConfig+0x374>
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f003 0303 	and.w	r3, r3, #3
 8004708:	2b01      	cmp	r3, #1
 800470a:	d135      	bne.n	8004778 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800470c:	4b7b      	ldr	r3, [pc, #492]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_OscConfig+0x320>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	2b80      	cmp	r3, #128	; 0x80
 800471e:	d001      	beq.n	8004724 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e296      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004724:	f7fd fa02 	bl	8001b2c <HAL_GetREVID>
 8004728:	4603      	mov	r3, r0
 800472a:	f241 0203 	movw	r2, #4099	; 0x1003
 800472e:	4293      	cmp	r3, r2
 8004730:	d817      	bhi.n	8004762 <HAL_RCC_OscConfig+0x35e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	2b20      	cmp	r3, #32
 8004738:	d108      	bne.n	800474c <HAL_RCC_OscConfig+0x348>
 800473a:	4b70      	ldr	r3, [pc, #448]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004742:	4a6e      	ldr	r2, [pc, #440]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004748:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800474a:	e075      	b.n	8004838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800474c:	4b6b      	ldr	r3, [pc, #428]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	069b      	lsls	r3, r3, #26
 800475a:	4968      	ldr	r1, [pc, #416]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004760:	e06a      	b.n	8004838 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004762:	4b66      	ldr	r3, [pc, #408]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	061b      	lsls	r3, r3, #24
 8004770:	4962      	ldr	r1, [pc, #392]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004772:	4313      	orrs	r3, r2
 8004774:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004776:	e05f      	b.n	8004838 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	69db      	ldr	r3, [r3, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d042      	beq.n	8004806 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004780:	4b5e      	ldr	r3, [pc, #376]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a5d      	ldr	r2, [pc, #372]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800478a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd f99e 	bl	8001acc <HAL_GetTick>
 8004790:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004794:	f7fd f99a 	bl	8001acc <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e255      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80047a6:	4b55      	ldr	r3, [pc, #340]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047b2:	f7fd f9bb 	bl	8001b2c <HAL_GetREVID>
 80047b6:	4603      	mov	r3, r0
 80047b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80047bc:	4293      	cmp	r3, r2
 80047be:	d817      	bhi.n	80047f0 <HAL_RCC_OscConfig+0x3ec>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d108      	bne.n	80047da <HAL_RCC_OscConfig+0x3d6>
 80047c8:	4b4c      	ldr	r3, [pc, #304]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047d0:	4a4a      	ldr	r2, [pc, #296]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80047d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047d6:	6053      	str	r3, [r2, #4]
 80047d8:	e02e      	b.n	8004838 <HAL_RCC_OscConfig+0x434>
 80047da:	4b48      	ldr	r3, [pc, #288]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	069b      	lsls	r3, r3, #26
 80047e8:	4944      	ldr	r1, [pc, #272]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	604b      	str	r3, [r1, #4]
 80047ee:	e023      	b.n	8004838 <HAL_RCC_OscConfig+0x434>
 80047f0:	4b42      	ldr	r3, [pc, #264]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	061b      	lsls	r3, r3, #24
 80047fe:	493f      	ldr	r1, [pc, #252]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004800:	4313      	orrs	r3, r2
 8004802:	60cb      	str	r3, [r1, #12]
 8004804:	e018      	b.n	8004838 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004806:	4b3d      	ldr	r3, [pc, #244]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a3c      	ldr	r2, [pc, #240]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 800480c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fd f95b 	bl	8001acc <HAL_GetTick>
 8004816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800481a:	f7fd f957 	bl	8001acc <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e212      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800482c:	4b33      	ldr	r3, [pc, #204]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1f0      	bne.n	800481a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0308 	and.w	r3, r3, #8
 8004840:	2b00      	cmp	r3, #0
 8004842:	d036      	beq.n	80048b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	695b      	ldr	r3, [r3, #20]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d019      	beq.n	8004880 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800484c:	4b2b      	ldr	r3, [pc, #172]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 800484e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004850:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fd f938 	bl	8001acc <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004860:	f7fd f934 	bl	8001acc <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1ef      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004872:	4b22      	ldr	r3, [pc, #136]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x45c>
 800487e:	e018      	b.n	80048b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004880:	4b1e      	ldr	r3, [pc, #120]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004884:	4a1d      	ldr	r2, [pc, #116]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800488c:	f7fd f91e 	bl	8001acc <HAL_GetTick>
 8004890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004894:	f7fd f91a 	bl	8001acc <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e1d5      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80048a6:	4b15      	ldr	r3, [pc, #84]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d039      	beq.n	8004932 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d01c      	beq.n	8004900 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048c6:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a0c      	ldr	r2, [pc, #48]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80048cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048d2:	f7fd f8fb 	bl	8001acc <HAL_GetTick>
 80048d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048d8:	e008      	b.n	80048ec <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048da:	f7fd f8f7 	bl	8001acc <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d901      	bls.n	80048ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e1b2      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048ec:	4b03      	ldr	r3, [pc, #12]	; (80048fc <HAL_RCC_OscConfig+0x4f8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d0f0      	beq.n	80048da <HAL_RCC_OscConfig+0x4d6>
 80048f8:	e01b      	b.n	8004932 <HAL_RCC_OscConfig+0x52e>
 80048fa:	bf00      	nop
 80048fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004900:	4b9b      	ldr	r3, [pc, #620]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a9a      	ldr	r2, [pc, #616]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800490a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800490c:	f7fd f8de 	bl	8001acc <HAL_GetTick>
 8004910:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004914:	f7fd f8da 	bl	8001acc <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b02      	cmp	r3, #2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e195      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004926:	4b92      	ldr	r3, [pc, #584]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f0      	bne.n	8004914 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8081 	beq.w	8004a42 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004940:	4b8c      	ldr	r3, [pc, #560]	; (8004b74 <HAL_RCC_OscConfig+0x770>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a8b      	ldr	r2, [pc, #556]	; (8004b74 <HAL_RCC_OscConfig+0x770>)
 8004946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800494a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800494c:	f7fd f8be 	bl	8001acc <HAL_GetTick>
 8004950:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004954:	f7fd f8ba 	bl	8001acc <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e175      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004966:	4b83      	ldr	r3, [pc, #524]	; (8004b74 <HAL_RCC_OscConfig+0x770>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d106      	bne.n	8004988 <HAL_RCC_OscConfig+0x584>
 800497a:	4b7d      	ldr	r3, [pc, #500]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 800497c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800497e:	4a7c      	ldr	r2, [pc, #496]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	6713      	str	r3, [r2, #112]	; 0x70
 8004986:	e02d      	b.n	80049e4 <HAL_RCC_OscConfig+0x5e0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10c      	bne.n	80049aa <HAL_RCC_OscConfig+0x5a6>
 8004990:	4b77      	ldr	r3, [pc, #476]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004994:	4a76      	ldr	r2, [pc, #472]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004996:	f023 0301 	bic.w	r3, r3, #1
 800499a:	6713      	str	r3, [r2, #112]	; 0x70
 800499c:	4b74      	ldr	r3, [pc, #464]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4a73      	ldr	r2, [pc, #460]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 80049a2:	f023 0304 	bic.w	r3, r3, #4
 80049a6:	6713      	str	r3, [r2, #112]	; 0x70
 80049a8:	e01c      	b.n	80049e4 <HAL_RCC_OscConfig+0x5e0>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	2b05      	cmp	r3, #5
 80049b0:	d10c      	bne.n	80049cc <HAL_RCC_OscConfig+0x5c8>
 80049b2:	4b6f      	ldr	r3, [pc, #444]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 80049b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b6:	4a6e      	ldr	r2, [pc, #440]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 80049b8:	f043 0304 	orr.w	r3, r3, #4
 80049bc:	6713      	str	r3, [r2, #112]	; 0x70
 80049be:	4b6c      	ldr	r3, [pc, #432]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c2:	4a6b      	ldr	r2, [pc, #428]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ca:	e00b      	b.n	80049e4 <HAL_RCC_OscConfig+0x5e0>
 80049cc:	4b68      	ldr	r3, [pc, #416]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	4a67      	ldr	r2, [pc, #412]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 80049d2:	f023 0301 	bic.w	r3, r3, #1
 80049d6:	6713      	str	r3, [r2, #112]	; 0x70
 80049d8:	4b65      	ldr	r3, [pc, #404]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 80049da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049dc:	4a64      	ldr	r2, [pc, #400]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 80049de:	f023 0304 	bic.w	r3, r3, #4
 80049e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d015      	beq.n	8004a18 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fd f86e 	bl	8001acc <HAL_GetTick>
 80049f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049f2:	e00a      	b.n	8004a0a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049f4:	f7fd f86a 	bl	8001acc <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e123      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a0a:	4b59      	ldr	r3, [pc, #356]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0ee      	beq.n	80049f4 <HAL_RCC_OscConfig+0x5f0>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fd f858 	bl	8001acc <HAL_GetTick>
 8004a1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fd f854 	bl	8001acc <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e10d      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a36:	4b4e      	ldr	r3, [pc, #312]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1ee      	bne.n	8004a20 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	f000 8102 	beq.w	8004c50 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a4c:	4b48      	ldr	r3, [pc, #288]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a54:	2b18      	cmp	r3, #24
 8004a56:	f000 80bd 	beq.w	8004bd4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	f040 809e 	bne.w	8004ba0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a64:	4b42      	ldr	r3, [pc, #264]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a41      	ldr	r2, [pc, #260]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a70:	f7fd f82c 	bl	8001acc <HAL_GetTick>
 8004a74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a78:	f7fd f828 	bl	8001acc <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e0e3      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a8a:	4b39      	ldr	r3, [pc, #228]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a96:	4b36      	ldr	r3, [pc, #216]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a9a:	4b37      	ldr	r3, [pc, #220]	; (8004b78 <HAL_RCC_OscConfig+0x774>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004aa6:	0112      	lsls	r2, r2, #4
 8004aa8:	430a      	orrs	r2, r1
 8004aaa:	4931      	ldr	r1, [pc, #196]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004aac:	4313      	orrs	r3, r2
 8004aae:	628b      	str	r3, [r1, #40]	; 0x28
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	025b      	lsls	r3, r3, #9
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	3b01      	subs	r3, #1
 8004acc:	041b      	lsls	r3, r3, #16
 8004ace:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	061b      	lsls	r3, r3, #24
 8004adc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ae0:	4923      	ldr	r1, [pc, #140]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004ae6:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aea:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004aec:	f023 0301 	bic.w	r3, r3, #1
 8004af0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004af2:	4b1f      	ldr	r3, [pc, #124]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004af6:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <HAL_RCC_OscConfig+0x778>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004afe:	00d2      	lsls	r2, r2, #3
 8004b00:	491b      	ldr	r1, [pc, #108]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b06:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	f023 020c 	bic.w	r2, r3, #12
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	4917      	ldr	r1, [pc, #92]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b18:	4b15      	ldr	r3, [pc, #84]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	f023 0202 	bic.w	r2, r3, #2
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b24:	4912      	ldr	r1, [pc, #72]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b2a:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b2e:	4a10      	ldr	r2, [pc, #64]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b36:	4b0e      	ldr	r3, [pc, #56]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3a:	4a0d      	ldr	r2, [pc, #52]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b46:	4a0a      	ldr	r2, [pc, #40]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004b4e:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b52:	4a07      	ldr	r2, [pc, #28]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b54:	f043 0301 	orr.w	r3, r3, #1
 8004b58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <HAL_RCC_OscConfig+0x76c>)
 8004b60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b66:	f7fc ffb1 	bl	8001acc <HAL_GetTick>
 8004b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b6c:	e011      	b.n	8004b92 <HAL_RCC_OscConfig+0x78e>
 8004b6e:	bf00      	nop
 8004b70:	58024400 	.word	0x58024400
 8004b74:	58024800 	.word	0x58024800
 8004b78:	fffffc0c 	.word	0xfffffc0c
 8004b7c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b80:	f7fc ffa4 	bl	8001acc <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e05f      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b92:	4b32      	ldr	r3, [pc, #200]	; (8004c5c <HAL_RCC_OscConfig+0x858>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x77c>
 8004b9e:	e057      	b.n	8004c50 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba0:	4b2e      	ldr	r3, [pc, #184]	; (8004c5c <HAL_RCC_OscConfig+0x858>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a2d      	ldr	r2, [pc, #180]	; (8004c5c <HAL_RCC_OscConfig+0x858>)
 8004ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fc ff8e 	bl	8001acc <HAL_GetTick>
 8004bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb4:	f7fc ff8a 	bl	8001acc <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e045      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bc6:	4b25      	ldr	r3, [pc, #148]	; (8004c5c <HAL_RCC_OscConfig+0x858>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f0      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x7b0>
 8004bd2:	e03d      	b.n	8004c50 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bd4:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <HAL_RCC_OscConfig+0x858>)
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bda:	4b20      	ldr	r3, [pc, #128]	; (8004c5c <HAL_RCC_OscConfig+0x858>)
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d031      	beq.n	8004c4c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	f003 0203 	and.w	r2, r3, #3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d12a      	bne.n	8004c4c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d122      	bne.n	8004c4c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d11a      	bne.n	8004c4c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	0a5b      	lsrs	r3, r3, #9
 8004c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c22:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d111      	bne.n	8004c4c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d108      	bne.n	8004c4c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	0e1b      	lsrs	r3, r3, #24
 8004c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c46:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e000      	b.n	8004c52 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3730      	adds	r7, #48	; 0x30
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	58024400 	.word	0x58024400

08004c60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e19c      	b.n	8004fae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c74:	4b8a      	ldr	r3, [pc, #552]	; (8004ea0 <HAL_RCC_ClockConfig+0x240>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d910      	bls.n	8004ca4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c82:	4b87      	ldr	r3, [pc, #540]	; (8004ea0 <HAL_RCC_ClockConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 020f 	bic.w	r2, r3, #15
 8004c8a:	4985      	ldr	r1, [pc, #532]	; (8004ea0 <HAL_RCC_ClockConfig+0x240>)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c92:	4b83      	ldr	r3, [pc, #524]	; (8004ea0 <HAL_RCC_ClockConfig+0x240>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d001      	beq.n	8004ca4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e184      	b.n	8004fae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0304 	and.w	r3, r3, #4
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d010      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	4b7b      	ldr	r3, [pc, #492]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d908      	bls.n	8004cd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004cc0:	4b78      	ldr	r3, [pc, #480]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	4975      	ldr	r1, [pc, #468]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d010      	beq.n	8004d00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	4b70      	ldr	r3, [pc, #448]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d908      	bls.n	8004d00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cee:	4b6d      	ldr	r3, [pc, #436]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	496a      	ldr	r1, [pc, #424]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d010      	beq.n	8004d2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699a      	ldr	r2, [r3, #24]
 8004d10:	4b64      	ldr	r3, [pc, #400]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d908      	bls.n	8004d2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d1c:	4b61      	ldr	r3, [pc, #388]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	495e      	ldr	r1, [pc, #376]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d010      	beq.n	8004d5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	4b59      	ldr	r3, [pc, #356]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d908      	bls.n	8004d5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d4a:	4b56      	ldr	r3, [pc, #344]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	4953      	ldr	r1, [pc, #332]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d010      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	4b4d      	ldr	r3, [pc, #308]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d908      	bls.n	8004d8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d78:	4b4a      	ldr	r3, [pc, #296]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	f023 020f 	bic.w	r2, r3, #15
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	4947      	ldr	r1, [pc, #284]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d055      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d96:	4b43      	ldr	r3, [pc, #268]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	4940      	ldr	r1, [pc, #256]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004db0:	4b3c      	ldr	r3, [pc, #240]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d121      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0f6      	b.n	8004fae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d107      	bne.n	8004dd8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dc8:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d115      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e0ea      	b.n	8004fae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004de0:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d109      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e0de      	b.n	8004fae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004df0:	4b2c      	ldr	r3, [pc, #176]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0d6      	b.n	8004fae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e00:	4b28      	ldr	r3, [pc, #160]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f023 0207 	bic.w	r2, r3, #7
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	4925      	ldr	r1, [pc, #148]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e12:	f7fc fe5b 	bl	8001acc <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e18:	e00a      	b.n	8004e30 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e1a:	f7fc fe57 	bl	8001acc <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e0be      	b.n	8004fae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e30:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	00db      	lsls	r3, r3, #3
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d1eb      	bne.n	8004e1a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d010      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	4b14      	ldr	r3, [pc, #80]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f003 030f 	and.w	r3, r3, #15
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d208      	bcs.n	8004e70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e5e:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f023 020f 	bic.w	r2, r3, #15
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	490e      	ldr	r1, [pc, #56]	; (8004ea4 <HAL_RCC_ClockConfig+0x244>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_ClockConfig+0x240>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 030f 	and.w	r3, r3, #15
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d214      	bcs.n	8004ea8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <HAL_RCC_ClockConfig+0x240>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 020f 	bic.w	r2, r3, #15
 8004e86:	4906      	ldr	r1, [pc, #24]	; (8004ea0 <HAL_RCC_ClockConfig+0x240>)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <HAL_RCC_ClockConfig+0x240>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 030f 	and.w	r3, r3, #15
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e086      	b.n	8004fae <HAL_RCC_ClockConfig+0x34e>
 8004ea0:	52002000 	.word	0x52002000
 8004ea4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0304 	and.w	r3, r3, #4
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d010      	beq.n	8004ed6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	4b3f      	ldr	r3, [pc, #252]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d208      	bcs.n	8004ed6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ec4:	4b3c      	ldr	r3, [pc, #240]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	4939      	ldr	r1, [pc, #228]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d010      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	4b34      	ldr	r3, [pc, #208]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d208      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ef2:	4b31      	ldr	r3, [pc, #196]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	492e      	ldr	r1, [pc, #184]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d010      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	699a      	ldr	r2, [r3, #24]
 8004f14:	4b28      	ldr	r3, [pc, #160]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d208      	bcs.n	8004f32 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	4922      	ldr	r1, [pc, #136]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d010      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	69da      	ldr	r2, [r3, #28]
 8004f42:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d208      	bcs.n	8004f60 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f4e:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	4917      	ldr	r1, [pc, #92]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f60:	f000 f834 	bl	8004fcc <HAL_RCC_GetSysClockFreq>
 8004f64:	4602      	mov	r2, r0
 8004f66:	4b14      	ldr	r3, [pc, #80]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	4912      	ldr	r1, [pc, #72]	; (8004fbc <HAL_RCC_ClockConfig+0x35c>)
 8004f72:	5ccb      	ldrb	r3, [r1, r3]
 8004f74:	f003 031f 	and.w	r3, r3, #31
 8004f78:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f7e:	4b0e      	ldr	r3, [pc, #56]	; (8004fb8 <HAL_RCC_ClockConfig+0x358>)
 8004f80:	699b      	ldr	r3, [r3, #24]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <HAL_RCC_ClockConfig+0x35c>)
 8004f88:	5cd3      	ldrb	r3, [r2, r3]
 8004f8a:	f003 031f 	and.w	r3, r3, #31
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
 8004f94:	4a0a      	ldr	r2, [pc, #40]	; (8004fc0 <HAL_RCC_ClockConfig+0x360>)
 8004f96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f98:	4a0a      	ldr	r2, [pc, #40]	; (8004fc4 <HAL_RCC_ClockConfig+0x364>)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004f9e:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <HAL_RCC_ClockConfig+0x368>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fc fd48 	bl	8001a38 <HAL_InitTick>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	58024400 	.word	0x58024400
 8004fbc:	0800c4c8 	.word	0x0800c4c8
 8004fc0:	24000004 	.word	0x24000004
 8004fc4:	24000000 	.word	0x24000000
 8004fc8:	24000008 	.word	0x24000008

08004fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b089      	sub	sp, #36	; 0x24
 8004fd0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fd2:	4bb3      	ldr	r3, [pc, #716]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fda:	2b18      	cmp	r3, #24
 8004fdc:	f200 8155 	bhi.w	800528a <HAL_RCC_GetSysClockFreq+0x2be>
 8004fe0:	a201      	add	r2, pc, #4	; (adr r2, 8004fe8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe6:	bf00      	nop
 8004fe8:	0800504d 	.word	0x0800504d
 8004fec:	0800528b 	.word	0x0800528b
 8004ff0:	0800528b 	.word	0x0800528b
 8004ff4:	0800528b 	.word	0x0800528b
 8004ff8:	0800528b 	.word	0x0800528b
 8004ffc:	0800528b 	.word	0x0800528b
 8005000:	0800528b 	.word	0x0800528b
 8005004:	0800528b 	.word	0x0800528b
 8005008:	08005073 	.word	0x08005073
 800500c:	0800528b 	.word	0x0800528b
 8005010:	0800528b 	.word	0x0800528b
 8005014:	0800528b 	.word	0x0800528b
 8005018:	0800528b 	.word	0x0800528b
 800501c:	0800528b 	.word	0x0800528b
 8005020:	0800528b 	.word	0x0800528b
 8005024:	0800528b 	.word	0x0800528b
 8005028:	08005079 	.word	0x08005079
 800502c:	0800528b 	.word	0x0800528b
 8005030:	0800528b 	.word	0x0800528b
 8005034:	0800528b 	.word	0x0800528b
 8005038:	0800528b 	.word	0x0800528b
 800503c:	0800528b 	.word	0x0800528b
 8005040:	0800528b 	.word	0x0800528b
 8005044:	0800528b 	.word	0x0800528b
 8005048:	0800507f 	.word	0x0800507f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800504c:	4b94      	ldr	r3, [pc, #592]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005058:	4b91      	ldr	r3, [pc, #580]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	08db      	lsrs	r3, r3, #3
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	4a90      	ldr	r2, [pc, #576]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005064:	fa22 f303 	lsr.w	r3, r2, r3
 8005068:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800506a:	e111      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800506c:	4b8d      	ldr	r3, [pc, #564]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800506e:	61bb      	str	r3, [r7, #24]
    break;
 8005070:	e10e      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005072:	4b8d      	ldr	r3, [pc, #564]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005074:	61bb      	str	r3, [r7, #24]
    break;
 8005076:	e10b      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005078:	4b8c      	ldr	r3, [pc, #560]	; (80052ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800507a:	61bb      	str	r3, [r7, #24]
    break;
 800507c:	e108      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800507e:	4b88      	ldr	r3, [pc, #544]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	f003 0303 	and.w	r3, r3, #3
 8005086:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005088:	4b85      	ldr	r3, [pc, #532]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005092:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005094:	4b82      	ldr	r3, [pc, #520]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800509e:	4b80      	ldr	r3, [pc, #512]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a2:	08db      	lsrs	r3, r3, #3
 80050a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80e1 	beq.w	8005284 <HAL_RCC_GetSysClockFreq+0x2b8>
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	f000 8083 	beq.w	80051d0 <HAL_RCC_GetSysClockFreq+0x204>
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	f200 80a1 	bhi.w	8005214 <HAL_RCC_GetSysClockFreq+0x248>
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d003      	beq.n	80050e0 <HAL_RCC_GetSysClockFreq+0x114>
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d056      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x1c0>
 80050de:	e099      	b.n	8005214 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050e0:	4b6f      	ldr	r3, [pc, #444]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0320 	and.w	r3, r3, #32
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d02d      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050ec:	4b6c      	ldr	r3, [pc, #432]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	08db      	lsrs	r3, r3, #3
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	4a6b      	ldr	r2, [pc, #428]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050f8:	fa22 f303 	lsr.w	r3, r2, r3
 80050fc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	ee07 3a90 	vmov	s15, r3
 8005104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005116:	4b62      	ldr	r3, [pc, #392]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511e:	ee07 3a90 	vmov	s15, r3
 8005122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005126:	ed97 6a02 	vldr	s12, [r7, #8]
 800512a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800512e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005142:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005146:	e087      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005152:	eddf 6a58 	vldr	s13, [pc, #352]	; 80052b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515a:	4b51      	ldr	r3, [pc, #324]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516a:	ed97 6a02 	vldr	s12, [r7, #8]
 800516e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800518a:	e065      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	eddf 6a48 	vldr	s13, [pc, #288]	; 80052b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800519a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519e:	4b40      	ldr	r3, [pc, #256]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80051b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ce:	e043      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80052bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80051de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e2:	4b2f      	ldr	r3, [pc, #188]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005212:	e021      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005226:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005236:	ed97 6a02 	vldr	s12, [r7, #8]
 800523a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800523e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005252:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005256:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005258:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	0a5b      	lsrs	r3, r3, #9
 800525e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005262:	3301      	adds	r3, #1
 8005264:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	ee07 3a90 	vmov	s15, r3
 800526c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005270:	edd7 6a07 	vldr	s13, [r7, #28]
 8005274:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800527c:	ee17 3a90 	vmov	r3, s15
 8005280:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005282:	e005      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	61bb      	str	r3, [r7, #24]
    break;
 8005288:	e002      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800528a:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800528c:	61bb      	str	r3, [r7, #24]
    break;
 800528e:	bf00      	nop
  }

  return sysclockfreq;
 8005290:	69bb      	ldr	r3, [r7, #24]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3724      	adds	r7, #36	; 0x24
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	58024400 	.word	0x58024400
 80052a4:	03d09000 	.word	0x03d09000
 80052a8:	003d0900 	.word	0x003d0900
 80052ac:	007a1200 	.word	0x007a1200
 80052b0:	46000000 	.word	0x46000000
 80052b4:	4c742400 	.word	0x4c742400
 80052b8:	4a742400 	.word	0x4a742400
 80052bc:	4af42400 	.word	0x4af42400

080052c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80052c6:	f7ff fe81 	bl	8004fcc <HAL_RCC_GetSysClockFreq>
 80052ca:	4602      	mov	r2, r0
 80052cc:	4b10      	ldr	r3, [pc, #64]	; (8005310 <HAL_RCC_GetHCLKFreq+0x50>)
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	0a1b      	lsrs	r3, r3, #8
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	490f      	ldr	r1, [pc, #60]	; (8005314 <HAL_RCC_GetHCLKFreq+0x54>)
 80052d8:	5ccb      	ldrb	r3, [r1, r3]
 80052da:	f003 031f 	and.w	r3, r3, #31
 80052de:	fa22 f303 	lsr.w	r3, r2, r3
 80052e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <HAL_RCC_GetHCLKFreq+0x50>)
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	4a09      	ldr	r2, [pc, #36]	; (8005314 <HAL_RCC_GetHCLKFreq+0x54>)
 80052ee:	5cd3      	ldrb	r3, [r2, r3]
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	fa22 f303 	lsr.w	r3, r2, r3
 80052fa:	4a07      	ldr	r2, [pc, #28]	; (8005318 <HAL_RCC_GetHCLKFreq+0x58>)
 80052fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052fe:	4a07      	ldr	r2, [pc, #28]	; (800531c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005304:	4b04      	ldr	r3, [pc, #16]	; (8005318 <HAL_RCC_GetHCLKFreq+0x58>)
 8005306:	681b      	ldr	r3, [r3, #0]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	58024400 	.word	0x58024400
 8005314:	0800c4c8 	.word	0x0800c4c8
 8005318:	24000004 	.word	0x24000004
 800531c:	24000000 	.word	0x24000000

08005320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005324:	f7ff ffcc 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 8005328:	4602      	mov	r2, r0
 800532a:	4b06      	ldr	r3, [pc, #24]	; (8005344 <HAL_RCC_GetPCLK1Freq+0x24>)
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	f003 0307 	and.w	r3, r3, #7
 8005334:	4904      	ldr	r1, [pc, #16]	; (8005348 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005336:	5ccb      	ldrb	r3, [r1, r3]
 8005338:	f003 031f 	and.w	r3, r3, #31
 800533c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005340:	4618      	mov	r0, r3
 8005342:	bd80      	pop	{r7, pc}
 8005344:	58024400 	.word	0x58024400
 8005348:	0800c4c8 	.word	0x0800c4c8

0800534c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005350:	f7ff ffb6 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 8005354:	4602      	mov	r2, r0
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	0a1b      	lsrs	r3, r3, #8
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	4904      	ldr	r1, [pc, #16]	; (8005374 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005362:	5ccb      	ldrb	r3, [r1, r3]
 8005364:	f003 031f 	and.w	r3, r3, #31
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800536c:	4618      	mov	r0, r3
 800536e:	bd80      	pop	{r7, pc}
 8005370:	58024400 	.word	0x58024400
 8005374:	0800c4c8 	.word	0x0800c4c8

08005378 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005380:	2300      	movs	r3, #0
 8005382:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005384:	2300      	movs	r3, #0
 8005386:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d03f      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005398:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800539c:	d02a      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800539e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80053a2:	d824      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053a8:	d018      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80053aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ae:	d81e      	bhi.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d003      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80053b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b8:	d007      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80053ba:	e018      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053bc:	4ba3      	ldr	r3, [pc, #652]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	4aa2      	ldr	r2, [pc, #648]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053c8:	e015      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3304      	adds	r3, #4
 80053ce:	2102      	movs	r1, #2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f001 fff9 	bl	80073c8 <RCCEx_PLL2_Config>
 80053d6:	4603      	mov	r3, r0
 80053d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053da:	e00c      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3324      	adds	r3, #36	; 0x24
 80053e0:	2102      	movs	r1, #2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f002 f8a2 	bl	800752c <RCCEx_PLL3_Config>
 80053e8:	4603      	mov	r3, r0
 80053ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053ec:	e003      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
      break;
 80053f2:	e000      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80053f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053f6:	7dfb      	ldrb	r3, [r7, #23]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d109      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053fc:	4b93      	ldr	r3, [pc, #588]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005408:	4990      	ldr	r1, [pc, #576]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800540a:	4313      	orrs	r3, r2
 800540c:	650b      	str	r3, [r1, #80]	; 0x50
 800540e:	e001      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005410:	7dfb      	ldrb	r3, [r7, #23]
 8005412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541c:	2b00      	cmp	r3, #0
 800541e:	d03d      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005424:	2b04      	cmp	r3, #4
 8005426:	d826      	bhi.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005428:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800542a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542e:	bf00      	nop
 8005430:	08005445 	.word	0x08005445
 8005434:	08005453 	.word	0x08005453
 8005438:	08005465 	.word	0x08005465
 800543c:	0800547d 	.word	0x0800547d
 8005440:	0800547d 	.word	0x0800547d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005444:	4b81      	ldr	r3, [pc, #516]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	4a80      	ldr	r2, [pc, #512]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800544a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800544e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005450:	e015      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3304      	adds	r3, #4
 8005456:	2100      	movs	r1, #0
 8005458:	4618      	mov	r0, r3
 800545a:	f001 ffb5 	bl	80073c8 <RCCEx_PLL2_Config>
 800545e:	4603      	mov	r3, r0
 8005460:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005462:	e00c      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3324      	adds	r3, #36	; 0x24
 8005468:	2100      	movs	r1, #0
 800546a:	4618      	mov	r0, r3
 800546c:	f002 f85e 	bl	800752c <RCCEx_PLL3_Config>
 8005470:	4603      	mov	r3, r0
 8005472:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005474:	e003      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	75fb      	strb	r3, [r7, #23]
      break;
 800547a:	e000      	b.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800547c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800547e:	7dfb      	ldrb	r3, [r7, #23]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d109      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005484:	4b71      	ldr	r3, [pc, #452]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005488:	f023 0207 	bic.w	r2, r3, #7
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005490:	496e      	ldr	r1, [pc, #440]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	650b      	str	r3, [r1, #80]	; 0x50
 8005496:	e001      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	7dfb      	ldrb	r3, [r7, #23]
 800549a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d042      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b0:	d02b      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80054b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b6:	d825      	bhi.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80054b8:	2bc0      	cmp	r3, #192	; 0xc0
 80054ba:	d028      	beq.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80054bc:	2bc0      	cmp	r3, #192	; 0xc0
 80054be:	d821      	bhi.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80054c0:	2b80      	cmp	r3, #128	; 0x80
 80054c2:	d016      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80054c4:	2b80      	cmp	r3, #128	; 0x80
 80054c6:	d81d      	bhi.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80054cc:	2b40      	cmp	r3, #64	; 0x40
 80054ce:	d007      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80054d0:	e018      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054d2:	4b5e      	ldr	r3, [pc, #376]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d6:	4a5d      	ldr	r2, [pc, #372]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054de:	e017      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	3304      	adds	r3, #4
 80054e4:	2100      	movs	r1, #0
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 ff6e 	bl	80073c8 <RCCEx_PLL2_Config>
 80054ec:	4603      	mov	r3, r0
 80054ee:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054f0:	e00e      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3324      	adds	r3, #36	; 0x24
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f002 f817 	bl	800752c <RCCEx_PLL3_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005502:	e005      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	75fb      	strb	r3, [r7, #23]
      break;
 8005508:	e002      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800550a:	bf00      	nop
 800550c:	e000      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800550e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005516:	4b4d      	ldr	r3, [pc, #308]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800551a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005522:	494a      	ldr	r1, [pc, #296]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005524:	4313      	orrs	r3, r2
 8005526:	650b      	str	r3, [r1, #80]	; 0x50
 8005528:	e001      	b.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800552a:	7dfb      	ldrb	r3, [r7, #23]
 800552c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005536:	2b00      	cmp	r3, #0
 8005538:	d049      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005540:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005544:	d030      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005546:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800554a:	d82a      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800554c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005550:	d02c      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005552:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005556:	d824      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800555c:	d018      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800555e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005562:	d81e      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005568:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800556c:	d007      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800556e:	e018      	b.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005570:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	4a35      	ldr	r2, [pc, #212]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800557c:	e017      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	3304      	adds	r3, #4
 8005582:	2100      	movs	r1, #0
 8005584:	4618      	mov	r0, r3
 8005586:	f001 ff1f 	bl	80073c8 <RCCEx_PLL2_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800558e:	e00e      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3324      	adds	r3, #36	; 0x24
 8005594:	2100      	movs	r1, #0
 8005596:	4618      	mov	r0, r3
 8005598:	f001 ffc8 	bl	800752c <RCCEx_PLL3_Config>
 800559c:	4603      	mov	r3, r0
 800559e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055a0:	e005      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
      break;
 80055a6:	e002      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80055ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10a      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055b4:	4b25      	ldr	r3, [pc, #148]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80055c2:	4922      	ldr	r1, [pc, #136]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	658b      	str	r3, [r1, #88]	; 0x58
 80055c8:	e001      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d04b      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e4:	d030      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80055e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055ea:	d82a      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055f0:	d02e      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80055f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055f6:	d824      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055fc:	d018      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80055fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005602:	d81e      	bhi.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d003      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800560c:	d007      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800560e:	e018      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005610:	4b0e      	ldr	r3, [pc, #56]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	4a0d      	ldr	r2, [pc, #52]	; (800564c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005616:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800561a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800561c:	e019      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3304      	adds	r3, #4
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f001 fecf 	bl	80073c8 <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800562e:	e010      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	3324      	adds	r3, #36	; 0x24
 8005634:	2100      	movs	r1, #0
 8005636:	4618      	mov	r0, r3
 8005638:	f001 ff78 	bl	800752c <RCCEx_PLL3_Config>
 800563c:	4603      	mov	r3, r0
 800563e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005640:	e007      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	75fb      	strb	r3, [r7, #23]
      break;
 8005646:	e004      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005648:	bf00      	nop
 800564a:	e002      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800564c:	58024400 	.word	0x58024400
      break;
 8005650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10a      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005658:	4b99      	ldr	r3, [pc, #612]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800565a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005666:	4996      	ldr	r1, [pc, #600]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005668:	4313      	orrs	r3, r2
 800566a:	658b      	str	r3, [r1, #88]	; 0x58
 800566c:	e001      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d032      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005682:	2b30      	cmp	r3, #48	; 0x30
 8005684:	d01c      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005686:	2b30      	cmp	r3, #48	; 0x30
 8005688:	d817      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x342>
 800568a:	2b20      	cmp	r3, #32
 800568c:	d00c      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800568e:	2b20      	cmp	r3, #32
 8005690:	d813      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d016      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005696:	2b10      	cmp	r3, #16
 8005698:	d10f      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800569a:	4b89      	ldr	r3, [pc, #548]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800569c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569e:	4a88      	ldr	r2, [pc, #544]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80056a6:	e00e      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	2102      	movs	r1, #2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 fe8a 	bl	80073c8 <RCCEx_PLL2_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80056b8:	e005      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	75fb      	strb	r3, [r7, #23]
      break;
 80056be:	e002      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80056c0:	bf00      	nop
 80056c2:	e000      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80056c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80056cc:	4b7c      	ldr	r3, [pc, #496]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056d8:	4979      	ldr	r1, [pc, #484]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056de:	e001      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
 80056e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d047      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f8:	d030      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80056fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056fe:	d82a      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005704:	d02c      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005706:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800570a:	d824      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800570c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005710:	d018      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005716:	d81e      	bhi.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800571c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005720:	d007      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005722:	e018      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005724:	4b66      	ldr	r3, [pc, #408]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005728:	4a65      	ldr	r2, [pc, #404]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800572a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800572e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005730:	e017      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3304      	adds	r3, #4
 8005736:	2100      	movs	r1, #0
 8005738:	4618      	mov	r0, r3
 800573a:	f001 fe45 	bl	80073c8 <RCCEx_PLL2_Config>
 800573e:	4603      	mov	r3, r0
 8005740:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005742:	e00e      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	3324      	adds	r3, #36	; 0x24
 8005748:	2100      	movs	r1, #0
 800574a:	4618      	mov	r0, r3
 800574c:	f001 feee 	bl	800752c <RCCEx_PLL3_Config>
 8005750:	4603      	mov	r3, r0
 8005752:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005754:	e005      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
      break;
 800575a:	e002      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800575c:	bf00      	nop
 800575e:	e000      	b.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d109      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005768:	4b55      	ldr	r3, [pc, #340]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800576a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800576c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005774:	4952      	ldr	r1, [pc, #328]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005776:	4313      	orrs	r3, r2
 8005778:	650b      	str	r3, [r1, #80]	; 0x50
 800577a:	e001      	b.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
 800577e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d049      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005794:	d02e      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800579a:	d828      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 800579c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057a0:	d02a      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80057a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057a6:	d822      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80057a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057ac:	d026      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x484>
 80057ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057b2:	d81c      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80057b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057b8:	d010      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x464>
 80057ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057be:	d816      	bhi.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x476>
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d01d      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c8:	d111      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	3304      	adds	r3, #4
 80057ce:	2101      	movs	r1, #1
 80057d0:	4618      	mov	r0, r3
 80057d2:	f001 fdf9 	bl	80073c8 <RCCEx_PLL2_Config>
 80057d6:	4603      	mov	r3, r0
 80057d8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057da:	e012      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3324      	adds	r3, #36	; 0x24
 80057e0:	2101      	movs	r1, #1
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 fea2 	bl	800752c <RCCEx_PLL3_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057ec:	e009      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
      break;
 80057f2:	e006      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057f4:	bf00      	nop
 80057f6:	e004      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057f8:	bf00      	nop
 80057fa:	e002      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057fc:	bf00      	nop
 80057fe:	e000      	b.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005802:	7dfb      	ldrb	r3, [r7, #23]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d109      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005808:	4b2d      	ldr	r3, [pc, #180]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800580a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005814:	492a      	ldr	r1, [pc, #168]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005816:	4313      	orrs	r3, r2
 8005818:	650b      	str	r3, [r1, #80]	; 0x50
 800581a:	e001      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d04d      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005832:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005836:	d02e      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800583c:	d828      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800583e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005842:	d02a      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005848:	d822      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800584a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800584e:	d026      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005850:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005854:	d81c      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800585a:	d010      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800585c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005860:	d816      	bhi.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d01d      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800586a:	d111      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3304      	adds	r3, #4
 8005870:	2101      	movs	r1, #1
 8005872:	4618      	mov	r0, r3
 8005874:	f001 fda8 	bl	80073c8 <RCCEx_PLL2_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800587c:	e012      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	3324      	adds	r3, #36	; 0x24
 8005882:	2101      	movs	r1, #1
 8005884:	4618      	mov	r0, r3
 8005886:	f001 fe51 	bl	800752c <RCCEx_PLL3_Config>
 800588a:	4603      	mov	r3, r0
 800588c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800588e:	e009      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	75fb      	strb	r3, [r7, #23]
      break;
 8005894:	e006      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005896:	bf00      	nop
 8005898:	e004      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800589a:	bf00      	nop
 800589c:	e002      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80058a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10c      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058aa:	4b05      	ldr	r3, [pc, #20]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80058b8:	4901      	ldr	r1, [pc, #4]	; (80058c0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	658b      	str	r3, [r1, #88]	; 0x58
 80058be:	e003      	b.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80058c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
 80058c6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d02f      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058dc:	d00e      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80058de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e2:	d814      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x596>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d015      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80058e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058ec:	d10f      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ee:	4baf      	ldr	r3, [pc, #700]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	4aae      	ldr	r2, [pc, #696]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80058fa:	e00c      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3304      	adds	r3, #4
 8005900:	2101      	movs	r1, #1
 8005902:	4618      	mov	r0, r3
 8005904:	f001 fd60 	bl	80073c8 <RCCEx_PLL2_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800590c:	e003      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	75fb      	strb	r3, [r7, #23]
      break;
 8005912:	e000      	b.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8005914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005916:	7dfb      	ldrb	r3, [r7, #23]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d109      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800591c:	4ba3      	ldr	r3, [pc, #652]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800591e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005920:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005928:	49a0      	ldr	r1, [pc, #640]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800592a:	4313      	orrs	r3, r2
 800592c:	650b      	str	r3, [r1, #80]	; 0x50
 800592e:	e001      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d032      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005944:	2b03      	cmp	r3, #3
 8005946:	d81b      	bhi.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005987 	.word	0x08005987
 8005954:	08005961 	.word	0x08005961
 8005958:	0800596f 	.word	0x0800596f
 800595c:	08005987 	.word	0x08005987
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005960:	4b92      	ldr	r3, [pc, #584]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	4a91      	ldr	r2, [pc, #580]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800596c:	e00c      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3304      	adds	r3, #4
 8005972:	2102      	movs	r1, #2
 8005974:	4618      	mov	r0, r3
 8005976:	f001 fd27 	bl	80073c8 <RCCEx_PLL2_Config>
 800597a:	4603      	mov	r3, r0
 800597c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800597e:	e003      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	75fb      	strb	r3, [r7, #23]
      break;
 8005984:	e000      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005988:	7dfb      	ldrb	r3, [r7, #23]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d109      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800598e:	4b87      	ldr	r3, [pc, #540]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005992:	f023 0203 	bic.w	r2, r3, #3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599a:	4984      	ldr	r1, [pc, #528]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800599c:	4313      	orrs	r3, r2
 800599e:	64cb      	str	r3, [r1, #76]	; 0x4c
 80059a0:	e001      	b.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a2:	7dfb      	ldrb	r3, [r7, #23]
 80059a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8086 	beq.w	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059b4:	4b7e      	ldr	r3, [pc, #504]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a7d      	ldr	r2, [pc, #500]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80059ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059c0:	f7fc f884 	bl	8001acc <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059c6:	e009      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c8:	f7fc f880 	bl	8001acc <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	; 0x64
 80059d4:	d902      	bls.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	75fb      	strb	r3, [r7, #23]
        break;
 80059da:	e005      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059dc:	4b74      	ldr	r3, [pc, #464]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0ef      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80059e8:	7dfb      	ldrb	r3, [r7, #23]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d166      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059ee:	4b6f      	ldr	r3, [pc, #444]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059f8:	4053      	eors	r3, r2
 80059fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d013      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a02:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a0a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a0c:	4b67      	ldr	r3, [pc, #412]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a10:	4a66      	ldr	r2, [pc, #408]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a16:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a18:	4b64      	ldr	r3, [pc, #400]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1c:	4a63      	ldr	r2, [pc, #396]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a22:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005a24:	4a61      	ldr	r2, [pc, #388]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a34:	d115      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a36:	f7fc f849 	bl	8001acc <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a3c:	e00b      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a3e:	f7fc f845 	bl	8001acc <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d902      	bls.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005a50:	2303      	movs	r3, #3
 8005a52:	75fb      	strb	r3, [r7, #23]
            break;
 8005a54:	e005      	b.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a56:	4b55      	ldr	r3, [pc, #340]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0ed      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d126      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a76:	d10d      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005a78:	4b4c      	ldr	r3, [pc, #304]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a86:	0919      	lsrs	r1, r3, #4
 8005a88:	4b4a      	ldr	r3, [pc, #296]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005a8a:	400b      	ands	r3, r1
 8005a8c:	4947      	ldr	r1, [pc, #284]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	610b      	str	r3, [r1, #16]
 8005a92:	e005      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005a94:	4b45      	ldr	r3, [pc, #276]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	4a44      	ldr	r2, [pc, #272]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a9a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a9e:	6113      	str	r3, [r2, #16]
 8005aa0:	4b42      	ldr	r3, [pc, #264]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005aa2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005aae:	493f      	ldr	r1, [pc, #252]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	670b      	str	r3, [r1, #112]	; 0x70
 8005ab4:	e004      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ab6:	7dfb      	ldrb	r3, [r7, #23]
 8005ab8:	75bb      	strb	r3, [r7, #22]
 8005aba:	e001      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
 8005abe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	f000 8085 	beq.w	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ad2:	2b28      	cmp	r3, #40	; 0x28
 8005ad4:	d866      	bhi.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005bb9 	.word	0x08005bb9
 8005ae0:	08005ba5 	.word	0x08005ba5
 8005ae4:	08005ba5 	.word	0x08005ba5
 8005ae8:	08005ba5 	.word	0x08005ba5
 8005aec:	08005ba5 	.word	0x08005ba5
 8005af0:	08005ba5 	.word	0x08005ba5
 8005af4:	08005ba5 	.word	0x08005ba5
 8005af8:	08005ba5 	.word	0x08005ba5
 8005afc:	08005b81 	.word	0x08005b81
 8005b00:	08005ba5 	.word	0x08005ba5
 8005b04:	08005ba5 	.word	0x08005ba5
 8005b08:	08005ba5 	.word	0x08005ba5
 8005b0c:	08005ba5 	.word	0x08005ba5
 8005b10:	08005ba5 	.word	0x08005ba5
 8005b14:	08005ba5 	.word	0x08005ba5
 8005b18:	08005ba5 	.word	0x08005ba5
 8005b1c:	08005b93 	.word	0x08005b93
 8005b20:	08005ba5 	.word	0x08005ba5
 8005b24:	08005ba5 	.word	0x08005ba5
 8005b28:	08005ba5 	.word	0x08005ba5
 8005b2c:	08005ba5 	.word	0x08005ba5
 8005b30:	08005ba5 	.word	0x08005ba5
 8005b34:	08005ba5 	.word	0x08005ba5
 8005b38:	08005ba5 	.word	0x08005ba5
 8005b3c:	08005bb9 	.word	0x08005bb9
 8005b40:	08005ba5 	.word	0x08005ba5
 8005b44:	08005ba5 	.word	0x08005ba5
 8005b48:	08005ba5 	.word	0x08005ba5
 8005b4c:	08005ba5 	.word	0x08005ba5
 8005b50:	08005ba5 	.word	0x08005ba5
 8005b54:	08005ba5 	.word	0x08005ba5
 8005b58:	08005ba5 	.word	0x08005ba5
 8005b5c:	08005bb9 	.word	0x08005bb9
 8005b60:	08005ba5 	.word	0x08005ba5
 8005b64:	08005ba5 	.word	0x08005ba5
 8005b68:	08005ba5 	.word	0x08005ba5
 8005b6c:	08005ba5 	.word	0x08005ba5
 8005b70:	08005ba5 	.word	0x08005ba5
 8005b74:	08005ba5 	.word	0x08005ba5
 8005b78:	08005ba5 	.word	0x08005ba5
 8005b7c:	08005bb9 	.word	0x08005bb9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3304      	adds	r3, #4
 8005b84:	2101      	movs	r1, #1
 8005b86:	4618      	mov	r0, r3
 8005b88:	f001 fc1e 	bl	80073c8 <RCCEx_PLL2_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b90:	e013      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3324      	adds	r3, #36	; 0x24
 8005b96:	2101      	movs	r1, #1
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 fcc7 	bl	800752c <RCCEx_PLL3_Config>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005ba2:	e00a      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]
      break;
 8005ba8:	e007      	b.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005baa:	bf00      	nop
 8005bac:	58024400 	.word	0x58024400
 8005bb0:	58024800 	.word	0x58024800
 8005bb4:	00ffffcf 	.word	0x00ffffcf
      break;
 8005bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005bc0:	4b96      	ldr	r3, [pc, #600]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bcc:	4993      	ldr	r1, [pc, #588]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	654b      	str	r3, [r1, #84]	; 0x54
 8005bd2:	e001      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd4:	7dfb      	ldrb	r3, [r7, #23]
 8005bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d038      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005be8:	2b05      	cmp	r3, #5
 8005bea:	d821      	bhi.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005bec:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c37 	.word	0x08005c37
 8005bf8:	08005c0d 	.word	0x08005c0d
 8005bfc:	08005c1f 	.word	0x08005c1f
 8005c00:	08005c37 	.word	0x08005c37
 8005c04:	08005c37 	.word	0x08005c37
 8005c08:	08005c37 	.word	0x08005c37
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	3304      	adds	r3, #4
 8005c10:	2101      	movs	r1, #1
 8005c12:	4618      	mov	r0, r3
 8005c14:	f001 fbd8 	bl	80073c8 <RCCEx_PLL2_Config>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c1c:	e00c      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3324      	adds	r3, #36	; 0x24
 8005c22:	2101      	movs	r1, #1
 8005c24:	4618      	mov	r0, r3
 8005c26:	f001 fc81 	bl	800752c <RCCEx_PLL3_Config>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005c2e:	e003      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	75fb      	strb	r3, [r7, #23]
      break;
 8005c34:	e000      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005c36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d109      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c3e:	4b77      	ldr	r3, [pc, #476]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c42:	f023 0207 	bic.w	r2, r3, #7
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c4a:	4974      	ldr	r1, [pc, #464]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	654b      	str	r3, [r1, #84]	; 0x54
 8005c50:	e001      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
 8005c54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d03a      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c68:	2b05      	cmp	r3, #5
 8005c6a:	d821      	bhi.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005c6c:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c72:	bf00      	nop
 8005c74:	08005cb7 	.word	0x08005cb7
 8005c78:	08005c8d 	.word	0x08005c8d
 8005c7c:	08005c9f 	.word	0x08005c9f
 8005c80:	08005cb7 	.word	0x08005cb7
 8005c84:	08005cb7 	.word	0x08005cb7
 8005c88:	08005cb7 	.word	0x08005cb7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	3304      	adds	r3, #4
 8005c90:	2101      	movs	r1, #1
 8005c92:	4618      	mov	r0, r3
 8005c94:	f001 fb98 	bl	80073c8 <RCCEx_PLL2_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c9c:	e00c      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	3324      	adds	r3, #36	; 0x24
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 fc41 	bl	800752c <RCCEx_PLL3_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005cae:	e003      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	75fb      	strb	r3, [r7, #23]
      break;
 8005cb4:	e000      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005cb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cbe:	4b57      	ldr	r3, [pc, #348]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc2:	f023 0207 	bic.w	r2, r3, #7
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ccc:	4953      	ldr	r1, [pc, #332]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	658b      	str	r3, [r1, #88]	; 0x58
 8005cd2:	e001      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	7dfb      	ldrb	r3, [r7, #23]
 8005cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0320 	and.w	r3, r3, #32
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d04b      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cee:	d02e      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cf4:	d828      	bhi.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d02a      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d00:	d822      	bhi.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005d02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d06:	d026      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005d08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005d0c:	d81c      	bhi.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d12:	d010      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d18:	d816      	bhi.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01d      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d22:	d111      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3304      	adds	r3, #4
 8005d28:	2100      	movs	r1, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 fb4c 	bl	80073c8 <RCCEx_PLL2_Config>
 8005d30:	4603      	mov	r3, r0
 8005d32:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d34:	e012      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3324      	adds	r3, #36	; 0x24
 8005d3a:	2102      	movs	r1, #2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f001 fbf5 	bl	800752c <RCCEx_PLL3_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d46:	e009      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d4c:	e006      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e004      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d52:	bf00      	nop
 8005d54:	e002      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d56:	bf00      	nop
 8005d58:	e000      	b.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d62:	4b2e      	ldr	r3, [pc, #184]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d70:	492a      	ldr	r1, [pc, #168]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d72:	4313      	orrs	r3, r2
 8005d74:	654b      	str	r3, [r1, #84]	; 0x54
 8005d76:	e001      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d04d      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d8e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d92:	d02e      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005d94:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d98:	d828      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9e:	d02a      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da4:	d822      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005da6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005daa:	d026      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005dac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005db0:	d81c      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005db6:	d010      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dbc:	d816      	bhi.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d01d      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc6:	d111      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3304      	adds	r3, #4
 8005dcc:	2100      	movs	r1, #0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f001 fafa 	bl	80073c8 <RCCEx_PLL2_Config>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005dd8:	e012      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3324      	adds	r3, #36	; 0x24
 8005dde:	2102      	movs	r1, #2
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 fba3 	bl	800752c <RCCEx_PLL3_Config>
 8005de6:	4603      	mov	r3, r0
 8005de8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005dea:	e009      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	75fb      	strb	r3, [r7, #23]
      break;
 8005df0:	e006      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005df2:	bf00      	nop
 8005df4:	e004      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005df6:	bf00      	nop
 8005df8:	e002      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005dfa:	bf00      	nop
 8005dfc:	e000      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005dfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e00:	7dfb      	ldrb	r3, [r7, #23]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10c      	bne.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e06:	4b05      	ldr	r3, [pc, #20]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e14:	4901      	ldr	r1, [pc, #4]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	658b      	str	r3, [r1, #88]	; 0x58
 8005e1a:	e003      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005e1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e20:	7dfb      	ldrb	r3, [r7, #23]
 8005e22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d04b      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e36:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e3a:	d02e      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005e3c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e40:	d828      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e46:	d02a      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e4c:	d822      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e4e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e52:	d026      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005e54:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e58:	d81c      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e5e:	d010      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e64:	d816      	bhi.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d01d      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e6e:	d111      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3304      	adds	r3, #4
 8005e74:	2100      	movs	r1, #0
 8005e76:	4618      	mov	r0, r3
 8005e78:	f001 faa6 	bl	80073c8 <RCCEx_PLL2_Config>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e80:	e012      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3324      	adds	r3, #36	; 0x24
 8005e86:	2102      	movs	r1, #2
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f001 fb4f 	bl	800752c <RCCEx_PLL3_Config>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e92:	e009      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	75fb      	strb	r3, [r7, #23]
      break;
 8005e98:	e006      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e9a:	bf00      	nop
 8005e9c:	e004      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e9e:	bf00      	nop
 8005ea0:	e002      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005ea2:	bf00      	nop
 8005ea4:	e000      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005eae:	4b9d      	ldr	r3, [pc, #628]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ebc:	4999      	ldr	r1, [pc, #612]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	658b      	str	r3, [r1, #88]	; 0x58
 8005ec2:	e001      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
 8005ec6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0308 	and.w	r3, r3, #8
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01a      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ede:	d10a      	bne.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3324      	adds	r3, #36	; 0x24
 8005ee4:	2102      	movs	r1, #2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 fb20 	bl	800752c <RCCEx_PLL3_Config>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ef6:	4b8b      	ldr	r3, [pc, #556]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f04:	4987      	ldr	r1, [pc, #540]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 0310 	and.w	r3, r3, #16
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01a      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f20:	d10a      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	3324      	adds	r3, #36	; 0x24
 8005f26:	2102      	movs	r1, #2
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 faff 	bl	800752c <RCCEx_PLL3_Config>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f38:	4b7a      	ldr	r3, [pc, #488]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f46:	4977      	ldr	r1, [pc, #476]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d034      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f62:	d01d      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005f64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f68:	d817      	bhi.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f72:	d009      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005f74:	e011      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	3304      	adds	r3, #4
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 fa23 	bl	80073c8 <RCCEx_PLL2_Config>
 8005f82:	4603      	mov	r3, r0
 8005f84:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f86:	e00c      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3324      	adds	r3, #36	; 0x24
 8005f8c:	2102      	movs	r1, #2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 facc 	bl	800752c <RCCEx_PLL3_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f98:	e003      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fa2:	7dfb      	ldrb	r3, [r7, #23]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fa8:	4b5e      	ldr	r3, [pc, #376]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005fb6:	495b      	ldr	r1, [pc, #364]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	658b      	str	r3, [r1, #88]	; 0x58
 8005fbc:	e001      	b.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbe:	7dfb      	ldrb	r3, [r7, #23]
 8005fc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d033      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fd8:	d01c      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005fda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fde:	d816      	bhi.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe4:	d003      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005fe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fea:	d007      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005fec:	e00f      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fee:	4b4d      	ldr	r3, [pc, #308]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	4a4c      	ldr	r2, [pc, #304]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005ffa:	e00c      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3324      	adds	r3, #36	; 0x24
 8006000:	2101      	movs	r1, #1
 8006002:	4618      	mov	r0, r3
 8006004:	f001 fa92 	bl	800752c <RCCEx_PLL3_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800600c:	e003      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	75fb      	strb	r3, [r7, #23]
      break;
 8006012:	e000      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006014:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006016:	7dfb      	ldrb	r3, [r7, #23]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800601c:	4b41      	ldr	r3, [pc, #260]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800602a:	493e      	ldr	r1, [pc, #248]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800602c:	4313      	orrs	r3, r2
 800602e:	654b      	str	r3, [r1, #84]	; 0x54
 8006030:	e001      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d029      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800604a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800604e:	d007      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006050:	e00f      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006052:	4b34      	ldr	r3, [pc, #208]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	4a33      	ldr	r2, [pc, #204]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800605c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800605e:	e00b      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3304      	adds	r3, #4
 8006064:	2102      	movs	r1, #2
 8006066:	4618      	mov	r0, r3
 8006068:	f001 f9ae 	bl	80073c8 <RCCEx_PLL2_Config>
 800606c:	4603      	mov	r3, r0
 800606e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006070:	e002      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
      break;
 8006076:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800607e:	4b29      	ldr	r3, [pc, #164]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006082:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608a:	4926      	ldr	r1, [pc, #152]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800608c:	4313      	orrs	r3, r2
 800608e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006090:	e001      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
 8006094:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	3324      	adds	r3, #36	; 0x24
 80060a6:	2102      	movs	r1, #2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fa3f 	bl	800752c <RCCEx_PLL3_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d033      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060cc:	d017      	beq.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80060ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060d2:	d811      	bhi.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80060d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060d8:	d013      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80060da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060de:	d80b      	bhi.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d010      	beq.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80060e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060e8:	d106      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ea:	4b0e      	ldr	r3, [pc, #56]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	4a0d      	ldr	r2, [pc, #52]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80060f6:	e007      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	75fb      	strb	r3, [r7, #23]
      break;
 80060fc:	e004      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80060fe:	bf00      	nop
 8006100:	e002      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006102:	bf00      	nop
 8006104:	e000      	b.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006106:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006108:	7dfb      	ldrb	r3, [r7, #23]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10c      	bne.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800610e:	4b05      	ldr	r3, [pc, #20]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800611a:	4902      	ldr	r1, [pc, #8]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800611c:	4313      	orrs	r3, r2
 800611e:	654b      	str	r3, [r1, #84]	; 0x54
 8006120:	e004      	b.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8006122:	bf00      	nop
 8006124:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d008      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006138:	4b31      	ldr	r3, [pc, #196]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800613a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800613c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	492e      	ldr	r1, [pc, #184]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006146:	4313      	orrs	r3, r2
 8006148:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006156:	4b2a      	ldr	r3, [pc, #168]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006164:	4926      	ldr	r1, [pc, #152]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006166:	4313      	orrs	r3, r2
 8006168:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d008      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006176:	4b22      	ldr	r3, [pc, #136]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006182:	491f      	ldr	r1, [pc, #124]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006184:	4313      	orrs	r3, r2
 8006186:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00d      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006194:	4b1a      	ldr	r3, [pc, #104]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	4a19      	ldr	r2, [pc, #100]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800619a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800619e:	6113      	str	r3, [r2, #16]
 80061a0:	4b17      	ldr	r3, [pc, #92]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061a2:	691a      	ldr	r2, [r3, #16]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80061aa:	4915      	ldr	r1, [pc, #84]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	da08      	bge.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80061b8:	4b11      	ldr	r3, [pc, #68]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c4:	490e      	ldr	r1, [pc, #56]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d009      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e4:	4906      	ldr	r1, [pc, #24]	; (8006200 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80061ea:	7dbb      	ldrb	r3, [r7, #22]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	e000      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	58024400 	.word	0x58024400

08006204 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b090      	sub	sp, #64	; 0x40
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006212:	f040 8095 	bne.w	8006340 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006216:	4b97      	ldr	r3, [pc, #604]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	2b04      	cmp	r3, #4
 8006224:	f200 8088 	bhi.w	8006338 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006228:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	08006245 	.word	0x08006245
 8006234:	0800626d 	.word	0x0800626d
 8006238:	08006295 	.word	0x08006295
 800623c:	08006331 	.word	0x08006331
 8006240:	080062bd 	.word	0x080062bd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006244:	4b8b      	ldr	r3, [pc, #556]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006250:	d108      	bne.n	8006264 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006256:	4618      	mov	r0, r3
 8006258:	f000 ff64 	bl	8007124 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800625c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006260:	f000 bc94 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006264:	2300      	movs	r3, #0
 8006266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006268:	f000 bc90 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800626c:	4b81      	ldr	r3, [pc, #516]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006278:	d108      	bne.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800627a:	f107 0318 	add.w	r3, r7, #24
 800627e:	4618      	mov	r0, r3
 8006280:	f000 fca8 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006288:	f000 bc80 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800628c:	2300      	movs	r3, #0
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006290:	f000 bc7c 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006294:	4b77      	ldr	r3, [pc, #476]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800629c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062a0:	d108      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062a2:	f107 030c 	add.w	r3, r7, #12
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 fde8 	bl	8006e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80062b0:	f000 bc6c 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80062b8:	f000 bc68 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80062bc:	4b6d      	ldr	r3, [pc, #436]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80062c6:	4b6b      	ldr	r3, [pc, #428]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d10c      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80062d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d109      	bne.n	80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062d8:	4b66      	ldr	r3, [pc, #408]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	08db      	lsrs	r3, r3, #3
 80062de:	f003 0303 	and.w	r3, r3, #3
 80062e2:	4a65      	ldr	r2, [pc, #404]	; (8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80062e4:	fa22 f303 	lsr.w	r3, r2, r3
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ea:	e01f      	b.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062ec:	4b61      	ldr	r3, [pc, #388]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f8:	d106      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80062fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006300:	d102      	bne.n	8006308 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006302:	4b5e      	ldr	r3, [pc, #376]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006304:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006306:	e011      	b.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006308:	4b5a      	ldr	r3, [pc, #360]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006314:	d106      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8006316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800631c:	d102      	bne.n	8006324 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800631e:	4b58      	ldr	r3, [pc, #352]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006320:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006322:	e003      	b.n	800632c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006328:	f000 bc30 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800632c:	f000 bc2e 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006330:	4b54      	ldr	r3, [pc, #336]	; (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006334:	f000 bc2a 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006338:	2300      	movs	r3, #0
 800633a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800633c:	f000 bc26 	b.w	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006346:	f040 809f 	bne.w	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800634a:	4b4a      	ldr	r3, [pc, #296]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800634c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800634e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006352:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635a:	d04d      	beq.n	80063f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800635c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800635e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006362:	f200 8084 	bhi.w	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2bc0      	cmp	r3, #192	; 0xc0
 800636a:	d07d      	beq.n	8006468 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	2bc0      	cmp	r3, #192	; 0xc0
 8006370:	d87d      	bhi.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006374:	2b80      	cmp	r3, #128	; 0x80
 8006376:	d02d      	beq.n	80063d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d877      	bhi.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006380:	2b00      	cmp	r3, #0
 8006382:	d003      	beq.n	800638c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006386:	2b40      	cmp	r3, #64	; 0x40
 8006388:	d012      	beq.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800638a:	e070      	b.n	800646e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800638c:	4b39      	ldr	r3, [pc, #228]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006394:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006398:	d107      	bne.n	80063aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800639a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 fec0 	bl	8007124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063a8:	e3f0      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80063aa:	2300      	movs	r3, #0
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063ae:	e3ed      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80063b0:	4b30      	ldr	r3, [pc, #192]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063bc:	d107      	bne.n	80063ce <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063be:	f107 0318 	add.w	r3, r7, #24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fc06 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063cc:	e3de      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063d2:	e3db      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063d4:	4b27      	ldr	r3, [pc, #156]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063e0:	d107      	bne.n	80063f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063e2:	f107 030c 	add.w	r3, r7, #12
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fd48 	bl	8006e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063f0:	e3cc      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063f6:	e3c9      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80063f8:	4b1e      	ldr	r3, [pc, #120]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006400:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006402:	4b1c      	ldr	r3, [pc, #112]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0304 	and.w	r3, r3, #4
 800640a:	2b04      	cmp	r3, #4
 800640c:	d10c      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	2b00      	cmp	r3, #0
 8006412:	d109      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006414:	4b17      	ldr	r3, [pc, #92]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	08db      	lsrs	r3, r3, #3
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	4a16      	ldr	r2, [pc, #88]	; (8006478 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006420:	fa22 f303 	lsr.w	r3, r2, r3
 8006424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006426:	e01e      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006428:	4b12      	ldr	r3, [pc, #72]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006434:	d106      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006438:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800643c:	d102      	bne.n	8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800643e:	4b0f      	ldr	r3, [pc, #60]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006442:	e010      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006444:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800644c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006450:	d106      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006458:	d102      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800645a:	4b09      	ldr	r3, [pc, #36]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800645c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800645e:	e002      	b.n	8006466 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006464:	e392      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006466:	e391      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800646a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800646c:	e38e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006472:	e38b      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006474:	58024400 	.word	0x58024400
 8006478:	03d09000 	.word	0x03d09000
 800647c:	003d0900 	.word	0x003d0900
 8006480:	007a1200 	.word	0x007a1200
 8006484:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800648e:	f040 809c 	bne.w	80065ca <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006492:	4b9d      	ldr	r3, [pc, #628]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006496:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800649a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064a2:	d054      	beq.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064aa:	f200 808b 	bhi.w	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064b4:	f000 8083 	beq.w	80065be <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064be:	f200 8081 	bhi.w	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064c8:	d02f      	beq.n	800652a <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 80064ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064d0:	d878      	bhi.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80064d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064de:	d012      	beq.n	8006506 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80064e0:	e070      	b.n	80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064e2:	4b89      	ldr	r3, [pc, #548]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ee:	d107      	bne.n	8006500 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064f4:	4618      	mov	r0, r3
 80064f6:	f000 fe15 	bl	8007124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064fe:	e345      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006504:	e342      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006506:	4b80      	ldr	r3, [pc, #512]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800650e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006512:	d107      	bne.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006514:	f107 0318 	add.w	r3, r7, #24
 8006518:	4618      	mov	r0, r3
 800651a:	f000 fb5b 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006522:	e333      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006524:	2300      	movs	r3, #0
 8006526:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006528:	e330      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800652a:	4b77      	ldr	r3, [pc, #476]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006536:	d107      	bne.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006538:	f107 030c 	add.w	r3, r7, #12
 800653c:	4618      	mov	r0, r3
 800653e:	f000 fc9d 	bl	8006e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006546:	e321      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006548:	2300      	movs	r3, #0
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800654c:	e31e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800654e:	4b6e      	ldr	r3, [pc, #440]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006556:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006558:	4b6b      	ldr	r3, [pc, #428]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b04      	cmp	r3, #4
 8006562:	d10c      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800656a:	4b67      	ldr	r3, [pc, #412]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	08db      	lsrs	r3, r3, #3
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	4a65      	ldr	r2, [pc, #404]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006576:	fa22 f303 	lsr.w	r3, r2, r3
 800657a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800657c:	e01e      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800657e:	4b62      	ldr	r3, [pc, #392]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800658a:	d106      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800658c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006592:	d102      	bne.n	800659a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006594:	4b5e      	ldr	r3, [pc, #376]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006598:	e010      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800659a:	4b5b      	ldr	r3, [pc, #364]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065a6:	d106      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80065a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065ae:	d102      	bne.n	80065b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80065b0:	4b58      	ldr	r3, [pc, #352]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80065b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065b4:	e002      	b.n	80065bc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80065b6:	2300      	movs	r3, #0
 80065b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80065ba:	e2e7      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80065bc:	e2e6      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80065be:	4b56      	ldr	r3, [pc, #344]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065c2:	e2e3      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80065c8:	e2e0      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d0:	f040 80a7 	bne.w	8006722 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80065d4:	4b4c      	ldr	r3, [pc, #304]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80065d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065d8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80065dc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065e4:	d055      	beq.n	8006692 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80065e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065ec:	f200 8096 	bhi.w	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80065f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065f6:	f000 8084 	beq.w	8006702 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80065fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006600:	f200 808c 	bhi.w	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800660a:	d030      	beq.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800660c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006612:	f200 8083 	bhi.w	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006622:	d012      	beq.n	800664a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8006624:	e07a      	b.n	800671c <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006626:	4b38      	ldr	r3, [pc, #224]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006632:	d107      	bne.n	8006644 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006638:	4618      	mov	r0, r3
 800663a:	f000 fd73 	bl	8007124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800663e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006642:	e2a3      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006644:	2300      	movs	r3, #0
 8006646:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006648:	e2a0      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800664a:	4b2f      	ldr	r3, [pc, #188]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006656:	d107      	bne.n	8006668 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006658:	f107 0318 	add.w	r3, r7, #24
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fab9 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006666:	e291      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006668:	2300      	movs	r3, #0
 800666a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800666c:	e28e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800666e:	4b26      	ldr	r3, [pc, #152]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800667a:	d107      	bne.n	800668c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800667c:	f107 030c 	add.w	r3, r7, #12
 8006680:	4618      	mov	r0, r3
 8006682:	f000 fbfb 	bl	8006e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800668a:	e27f      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800668c:	2300      	movs	r3, #0
 800668e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006690:	e27c      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006692:	4b1d      	ldr	r3, [pc, #116]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006696:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800669a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800669c:	4b1a      	ldr	r3, [pc, #104]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d10c      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80066ae:	4b16      	ldr	r3, [pc, #88]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	08db      	lsrs	r3, r3, #3
 80066b4:	f003 0303 	and.w	r3, r3, #3
 80066b8:	4a14      	ldr	r2, [pc, #80]	; (800670c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80066ba:	fa22 f303 	lsr.w	r3, r2, r3
 80066be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c0:	e01e      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80066c2:	4b11      	ldr	r3, [pc, #68]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ce:	d106      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 80066d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066d6:	d102      	bne.n	80066de <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80066d8:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80066da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066dc:	e010      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ea:	d106      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80066ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066f2:	d102      	bne.n	80066fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80066f4:	4b07      	ldr	r3, [pc, #28]	; (8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80066f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f8:	e002      	b.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80066fe:	e245      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006700:	e244      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006702:	4b05      	ldr	r3, [pc, #20]	; (8006718 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8006704:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006706:	e241      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006708:	58024400 	.word	0x58024400
 800670c:	03d09000 	.word	0x03d09000
 8006710:	003d0900 	.word	0x003d0900
 8006714:	007a1200 	.word	0x007a1200
 8006718:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800671c:	2300      	movs	r3, #0
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006720:	e234      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006728:	f040 809c 	bne.w	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800672c:	4b9b      	ldr	r3, [pc, #620]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800672e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006730:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006734:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800673c:	d054      	beq.n	80067e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006744:	f200 808b 	bhi.w	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800674e:	f000 8083 	beq.w	8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006758:	f200 8081 	bhi.w	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006762:	d02f      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8006764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800676a:	d878      	bhi.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	2b00      	cmp	r3, #0
 8006770:	d004      	beq.n	800677c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8006772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006778:	d012      	beq.n	80067a0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800677a:	e070      	b.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800677c:	4b87      	ldr	r3, [pc, #540]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006788:	d107      	bne.n	800679a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800678a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fcc8 	bl	8007124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006796:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006798:	e1f8      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800679a:	2300      	movs	r3, #0
 800679c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800679e:	e1f5      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067a0:	4b7e      	ldr	r3, [pc, #504]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ac:	d107      	bne.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067ae:	f107 0318 	add.w	r3, r7, #24
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fa0e 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067bc:	e1e6      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80067be:	2300      	movs	r3, #0
 80067c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067c2:	e1e3      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80067c4:	4b75      	ldr	r3, [pc, #468]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067d0:	d107      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067d2:	f107 030c 	add.w	r3, r7, #12
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 fb50 	bl	8006e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067e0:	e1d4      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067e6:	e1d1      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067e8:	4b6c      	ldr	r3, [pc, #432]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067f0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067f2:	4b6a      	ldr	r3, [pc, #424]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d10c      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80067fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006800:	2b00      	cmp	r3, #0
 8006802:	d109      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006804:	4b65      	ldr	r3, [pc, #404]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	08db      	lsrs	r3, r3, #3
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	4a64      	ldr	r2, [pc, #400]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006810:	fa22 f303 	lsr.w	r3, r2, r3
 8006814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006816:	e01e      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006818:	4b60      	ldr	r3, [pc, #384]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006824:	d106      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800682c:	d102      	bne.n	8006834 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800682e:	4b5d      	ldr	r3, [pc, #372]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006832:	e010      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006834:	4b59      	ldr	r3, [pc, #356]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800683c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006840:	d106      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006848:	d102      	bne.n	8006850 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800684a:	4b57      	ldr	r3, [pc, #348]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800684c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800684e:	e002      	b.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006854:	e19a      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006856:	e199      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006858:	4b54      	ldr	r3, [pc, #336]	; (80069ac <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800685a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800685c:	e196      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800685e:	2300      	movs	r3, #0
 8006860:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006862:	e193      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800686a:	d173      	bne.n	8006954 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800686c:	4b4b      	ldr	r3, [pc, #300]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800686e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006874:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800687c:	d02f      	beq.n	80068de <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800687e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006884:	d863      	bhi.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	2b00      	cmp	r3, #0
 800688a:	d004      	beq.n	8006896 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800688c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006892:	d012      	beq.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8006894:	e05b      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006896:	4b41      	ldr	r3, [pc, #260]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800689e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068a2:	d107      	bne.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80068a4:	f107 0318 	add.w	r3, r7, #24
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f993 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068b2:	e16b      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068b8:	e168      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80068ba:	4b38      	ldr	r3, [pc, #224]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80068c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068c6:	d107      	bne.n	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80068c8:	f107 030c 	add.w	r3, r7, #12
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fad5 	bl	8006e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068d6:	e159      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068dc:	e156      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068de:	4b2f      	ldr	r3, [pc, #188]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068e6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068e8:	4b2c      	ldr	r3, [pc, #176]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0304 	and.w	r3, r3, #4
 80068f0:	2b04      	cmp	r3, #4
 80068f2:	d10c      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80068f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068fa:	4b28      	ldr	r3, [pc, #160]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	08db      	lsrs	r3, r3, #3
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8006906:	fa22 f303 	lsr.w	r3, r2, r3
 800690a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690c:	e01e      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800690e:	4b23      	ldr	r3, [pc, #140]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800691a:	d106      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006922:	d102      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006924:	4b1f      	ldr	r3, [pc, #124]	; (80069a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8006926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006928:	e010      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800692a:	4b1c      	ldr	r3, [pc, #112]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006932:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006936:	d106      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800693e:	d102      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006940:	4b19      	ldr	r3, [pc, #100]	; (80069a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006944:	e002      	b.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800694a:	e11f      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800694c:	e11e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006952:	e11b      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800695a:	d13e      	bne.n	80069da <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800695c:	4b0f      	ldr	r3, [pc, #60]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800695e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006964:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006972:	d01d      	beq.n	80069b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006974:	e02e      	b.n	80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006976:	4b09      	ldr	r3, [pc, #36]	; (800699c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800697e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006982:	d107      	bne.n	8006994 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006988:	4618      	mov	r0, r3
 800698a:	f000 fbcb 	bl	8007124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006990:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006992:	e0fb      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006994:	2300      	movs	r3, #0
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006998:	e0f8      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800699a:	bf00      	nop
 800699c:	58024400 	.word	0x58024400
 80069a0:	03d09000 	.word	0x03d09000
 80069a4:	003d0900 	.word	0x003d0900
 80069a8:	007a1200 	.word	0x007a1200
 80069ac:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80069b0:	4b79      	ldr	r3, [pc, #484]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069bc:	d107      	bne.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069be:	f107 0318 	add.w	r3, r7, #24
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 f906 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80069c8:	6a3b      	ldr	r3, [r7, #32]
 80069ca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80069cc:	e0de      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d2:	e0db      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069d8:	e0d8      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069e0:	f040 8085 	bne.w	8006aee <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80069e4:	4b6c      	ldr	r3, [pc, #432]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069e8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80069ec:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069f4:	d06b      	beq.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80069f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069fc:	d874      	bhi.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a04:	d056      	beq.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8006a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a0c:	d86c      	bhi.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a14:	d03b      	beq.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a1c:	d864      	bhi.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a24:	d021      	beq.n	8006a6a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8006a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a2c:	d85c      	bhi.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d004      	beq.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a3a:	d004      	beq.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006a3c:	e054      	b.n	8006ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a3e:	f000 f8b3 	bl	8006ba8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a42:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006a44:	e0a2      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a46:	4b54      	ldr	r3, [pc, #336]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a52:	d107      	bne.n	8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a54:	f107 0318 	add.w	r3, r7, #24
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 f8bb 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a62:	e093      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006a64:	2300      	movs	r3, #0
 8006a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a68:	e090      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a6a:	4b4b      	ldr	r3, [pc, #300]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a76:	d107      	bne.n	8006a88 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 f9fd 	bl	8006e7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a86:	e081      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a8c:	e07e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a8e:	4b42      	ldr	r3, [pc, #264]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0304 	and.w	r3, r3, #4
 8006a96:	2b04      	cmp	r3, #4
 8006a98:	d109      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a9a:	4b3f      	ldr	r3, [pc, #252]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	08db      	lsrs	r3, r3, #3
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	4a3d      	ldr	r2, [pc, #244]	; (8006b9c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006aac:	e06e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ab2:	e06b      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006ab4:	4b38      	ldr	r3, [pc, #224]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ac0:	d102      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8006ac2:	4b37      	ldr	r3, [pc, #220]	; (8006ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ac6:	e061      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006acc:	e05e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006ace:	4b32      	ldr	r3, [pc, #200]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ad6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ada:	d102      	bne.n	8006ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006adc:	4b31      	ldr	r3, [pc, #196]	; (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006ade:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006ae0:	e054      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ae6:	e051      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006aec:	e04e      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006af4:	d148      	bne.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006af6:	4b28      	ldr	r3, [pc, #160]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006af8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006afa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006afe:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b06:	d02a      	beq.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b0e:	d838      	bhi.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b1c:	d00d      	beq.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006b1e:	e030      	b.n	8006b82 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006b20:	4b1d      	ldr	r3, [pc, #116]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b2c:	d102      	bne.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8006b2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006b30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b32:	e02b      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b38:	e028      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b3a:	4b17      	ldr	r3, [pc, #92]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b46:	d107      	bne.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fae9 	bl	8007124 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b56:	e019      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b5c:	e016      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b6a:	d107      	bne.n	8006b7c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b6c:	f107 0318 	add.w	r3, r7, #24
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 f82f 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b7a:	e007      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b80:	e004      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b86:	e001      	b.n	8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3740      	adds	r7, #64	; 0x40
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	58024400 	.word	0x58024400
 8006b9c:	03d09000 	.word	0x03d09000
 8006ba0:	003d0900 	.word	0x003d0900
 8006ba4:	007a1200 	.word	0x007a1200

08006ba8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006bac:	f7fe fb88 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	4b06      	ldr	r3, [pc, #24]	; (8006bcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	091b      	lsrs	r3, r3, #4
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	4904      	ldr	r1, [pc, #16]	; (8006bd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006bbe:	5ccb      	ldrb	r3, [r1, r3]
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	0800c4c8 	.word	0x0800c4c8

08006bd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b089      	sub	sp, #36	; 0x24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bdc:	4ba1      	ldr	r3, [pc, #644]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006be6:	4b9f      	ldr	r3, [pc, #636]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bea:	0b1b      	lsrs	r3, r3, #12
 8006bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bf0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bf2:	4b9c      	ldr	r3, [pc, #624]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf6:	091b      	lsrs	r3, r3, #4
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006bfe:	4b99      	ldr	r3, [pc, #612]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c02:	08db      	lsrs	r3, r3, #3
 8006c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c08:	693a      	ldr	r2, [r7, #16]
 8006c0a:	fb02 f303 	mul.w	r3, r2, r3
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 8111 	beq.w	8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	f000 8083 	beq.w	8006d30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	f200 80a1 	bhi.w	8006d74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d003      	beq.n	8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d056      	beq.n	8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c3e:	e099      	b.n	8006d74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c40:	4b88      	ldr	r3, [pc, #544]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0320 	and.w	r3, r3, #32
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d02d      	beq.n	8006ca8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c4c:	4b85      	ldr	r3, [pc, #532]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	08db      	lsrs	r3, r3, #3
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	4a84      	ldr	r2, [pc, #528]	; (8006e68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c58:	fa22 f303 	lsr.w	r3, r2, r3
 8006c5c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	ee07 3a90 	vmov	s15, r3
 8006c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c76:	4b7b      	ldr	r3, [pc, #492]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006ca6:	e087      	b.n	8006db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cba:	4b6a      	ldr	r3, [pc, #424]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cc2:	ee07 3a90 	vmov	s15, r3
 8006cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cea:	e065      	b.n	8006db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfe:	4b59      	ldr	r3, [pc, #356]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d2e:	e043      	b.n	8006db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d42:	4b48      	ldr	r3, [pc, #288]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d72:	e021      	b.n	8006db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d86:	4b37      	ldr	r3, [pc, #220]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006db6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006db8:	4b2a      	ldr	r3, [pc, #168]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	0a5b      	lsrs	r3, r3, #9
 8006dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dde:	ee17 2a90 	vmov	r2, s15
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006de6:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	0c1b      	lsrs	r3, r3, #16
 8006dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006df0:	ee07 3a90 	vmov	s15, r3
 8006df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e0c:	ee17 2a90 	vmov	r2, s15
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006e14:	4b13      	ldr	r3, [pc, #76]	; (8006e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e18:	0e1b      	lsrs	r3, r3, #24
 8006e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e3a:	ee17 2a90 	vmov	r2, s15
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e42:	e008      	b.n	8006e56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	609a      	str	r2, [r3, #8]
}
 8006e56:	bf00      	nop
 8006e58:	3724      	adds	r7, #36	; 0x24
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	58024400 	.word	0x58024400
 8006e68:	03d09000 	.word	0x03d09000
 8006e6c:	46000000 	.word	0x46000000
 8006e70:	4c742400 	.word	0x4c742400
 8006e74:	4a742400 	.word	0x4a742400
 8006e78:	4af42400 	.word	0x4af42400

08006e7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b089      	sub	sp, #36	; 0x24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e84:	4ba1      	ldr	r3, [pc, #644]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006e8e:	4b9f      	ldr	r3, [pc, #636]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e92:	0d1b      	lsrs	r3, r3, #20
 8006e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e9a:	4b9c      	ldr	r3, [pc, #624]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9e:	0a1b      	lsrs	r3, r3, #8
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006ea6:	4b99      	ldr	r3, [pc, #612]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eaa:	08db      	lsrs	r3, r3, #3
 8006eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	fb02 f303 	mul.w	r3, r2, r3
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ebe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8111 	beq.w	80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	f000 8083 	beq.w	8006fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	f200 80a1 	bhi.w	800701c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d056      	beq.n	8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ee6:	e099      	b.n	800701c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ee8:	4b88      	ldr	r3, [pc, #544]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d02d      	beq.n	8006f50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ef4:	4b85      	ldr	r3, [pc, #532]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	08db      	lsrs	r3, r3, #3
 8006efa:	f003 0303 	and.w	r3, r3, #3
 8006efe:	4a84      	ldr	r2, [pc, #528]	; (8007110 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006f00:	fa22 f303 	lsr.w	r3, r2, r3
 8006f04:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	ee07 3a90 	vmov	s15, r3
 8006f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1e:	4b7b      	ldr	r3, [pc, #492]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f26:	ee07 3a90 	vmov	s15, r3
 8006f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f4a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f4e:	e087      	b.n	8007060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007118 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f62:	4b6a      	ldr	r3, [pc, #424]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f6a:	ee07 3a90 	vmov	s15, r3
 8006f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f92:	e065      	b.n	8007060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	ee07 3a90 	vmov	s15, r3
 8006f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800711c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fa6:	4b59      	ldr	r3, [pc, #356]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fd6:	e043      	b.n	8007060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	ee07 3a90 	vmov	s15, r3
 8006fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fe2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fea:	4b48      	ldr	r3, [pc, #288]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff2:	ee07 3a90 	vmov	s15, r3
 8006ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ffe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800700e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007016:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800701a:	e021      	b.n	8007060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	ee07 3a90 	vmov	s15, r3
 8007022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007026:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800711c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800702a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800702e:	4b37      	ldr	r3, [pc, #220]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800703e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007042:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800704e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800705e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007060:	4b2a      	ldr	r3, [pc, #168]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	0a5b      	lsrs	r3, r3, #9
 8007066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007076:	ee37 7a87 	vadd.f32	s14, s15, s14
 800707a:	edd7 6a07 	vldr	s13, [r7, #28]
 800707e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007086:	ee17 2a90 	vmov	r2, s15
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800708e:	4b1f      	ldr	r3, [pc, #124]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007092:	0c1b      	lsrs	r3, r3, #16
 8007094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007098:	ee07 3a90 	vmov	s15, r3
 800709c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80070ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070b4:	ee17 2a90 	vmov	r2, s15
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80070bc:	4b13      	ldr	r3, [pc, #76]	; (800710c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80070be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c0:	0e1b      	lsrs	r3, r3, #24
 80070c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80070da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070e2:	ee17 2a90 	vmov	r2, s15
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070ea:	e008      	b.n	80070fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	609a      	str	r2, [r3, #8]
}
 80070fe:	bf00      	nop
 8007100:	3724      	adds	r7, #36	; 0x24
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	58024400 	.word	0x58024400
 8007110:	03d09000 	.word	0x03d09000
 8007114:	46000000 	.word	0x46000000
 8007118:	4c742400 	.word	0x4c742400
 800711c:	4a742400 	.word	0x4a742400
 8007120:	4af42400 	.word	0x4af42400

08007124 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007124:	b480      	push	{r7}
 8007126:	b089      	sub	sp, #36	; 0x24
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800712c:	4ba0      	ldr	r3, [pc, #640]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	f003 0303 	and.w	r3, r3, #3
 8007134:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007136:	4b9e      	ldr	r3, [pc, #632]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	091b      	lsrs	r3, r3, #4
 800713c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007140:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007142:	4b9b      	ldr	r3, [pc, #620]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800714c:	4b98      	ldr	r3, [pc, #608]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007150:	08db      	lsrs	r3, r3, #3
 8007152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	fb02 f303 	mul.w	r3, r2, r3
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007164:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8111 	beq.w	8007392 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	2b02      	cmp	r3, #2
 8007174:	f000 8083 	beq.w	800727e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	2b02      	cmp	r3, #2
 800717c:	f200 80a1 	bhi.w	80072c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d056      	beq.n	800723a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800718c:	e099      	b.n	80072c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800718e:	4b88      	ldr	r3, [pc, #544]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0320 	and.w	r3, r3, #32
 8007196:	2b00      	cmp	r3, #0
 8007198:	d02d      	beq.n	80071f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800719a:	4b85      	ldr	r3, [pc, #532]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	08db      	lsrs	r3, r3, #3
 80071a0:	f003 0303 	and.w	r3, r3, #3
 80071a4:	4a83      	ldr	r2, [pc, #524]	; (80073b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80071a6:	fa22 f303 	lsr.w	r3, r2, r3
 80071aa:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	ee07 3a90 	vmov	s15, r3
 80071b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	ee07 3a90 	vmov	s15, r3
 80071bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c4:	4b7a      	ldr	r3, [pc, #488]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80071d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071f4:	e087      	b.n	8007306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	ee07 3a90 	vmov	s15, r3
 80071fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007200:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80073bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007204:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007208:	4b69      	ldr	r3, [pc, #420]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007218:	ed97 6a03 	vldr	s12, [r7, #12]
 800721c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007220:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007224:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007228:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800722c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007234:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007238:	e065      	b.n	8007306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	ee07 3a90 	vmov	s15, r3
 8007240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007244:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80073c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007248:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800724c:	4b58      	ldr	r3, [pc, #352]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007254:	ee07 3a90 	vmov	s15, r3
 8007258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800725c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007260:	eddf 5a55 	vldr	s11, [pc, #340]	; 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800726c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007278:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800727c:	e043      	b.n	8007306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	ee07 3a90 	vmov	s15, r3
 8007284:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007288:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80073c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800728c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007290:	4b47      	ldr	r3, [pc, #284]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007298:	ee07 3a90 	vmov	s15, r3
 800729c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80072a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072c0:	e021      	b.n	8007306 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80073bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80072d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072d4:	4b36      	ldr	r3, [pc, #216]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80072e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80073b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007300:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007304:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007306:	4b2a      	ldr	r3, [pc, #168]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	0a5b      	lsrs	r3, r3, #9
 800730c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007310:	ee07 3a90 	vmov	s15, r3
 8007314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800731c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007320:	edd7 6a07 	vldr	s13, [r7, #28]
 8007324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732c:	ee17 2a90 	vmov	r2, s15
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007334:	4b1e      	ldr	r3, [pc, #120]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733e:	ee07 3a90 	vmov	s15, r3
 8007342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007346:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800734a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800734e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800735a:	ee17 2a90 	vmov	r2, s15
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007362:	4b13      	ldr	r3, [pc, #76]	; (80073b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007366:	0e1b      	lsrs	r3, r3, #24
 8007368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736c:	ee07 3a90 	vmov	s15, r3
 8007370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007378:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007388:	ee17 2a90 	vmov	r2, s15
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007390:	e008      	b.n	80073a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	609a      	str	r2, [r3, #8]
}
 80073a4:	bf00      	nop
 80073a6:	3724      	adds	r7, #36	; 0x24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	58024400 	.word	0x58024400
 80073b4:	03d09000 	.word	0x03d09000
 80073b8:	46000000 	.word	0x46000000
 80073bc:	4c742400 	.word	0x4c742400
 80073c0:	4a742400 	.word	0x4a742400
 80073c4:	4af42400 	.word	0x4af42400

080073c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073d6:	4b53      	ldr	r3, [pc, #332]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d101      	bne.n	80073e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e099      	b.n	800751a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073e6:	4b4f      	ldr	r3, [pc, #316]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a4e      	ldr	r2, [pc, #312]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80073ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f2:	f7fa fb6b 	bl	8001acc <HAL_GetTick>
 80073f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073f8:	e008      	b.n	800740c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073fa:	f7fa fb67 	bl	8001acc <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b02      	cmp	r3, #2
 8007406:	d901      	bls.n	800740c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	e086      	b.n	800751a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800740c:	4b45      	ldr	r3, [pc, #276]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1f0      	bne.n	80073fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007418:	4b42      	ldr	r3, [pc, #264]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 800741a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800741c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	031b      	lsls	r3, r3, #12
 8007426:	493f      	ldr	r1, [pc, #252]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007428:	4313      	orrs	r3, r2
 800742a:	628b      	str	r3, [r1, #40]	; 0x28
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	3b01      	subs	r3, #1
 8007432:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	3b01      	subs	r3, #1
 800743c:	025b      	lsls	r3, r3, #9
 800743e:	b29b      	uxth	r3, r3
 8007440:	431a      	orrs	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	3b01      	subs	r3, #1
 8007448:	041b      	lsls	r3, r3, #16
 800744a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	3b01      	subs	r3, #1
 8007456:	061b      	lsls	r3, r3, #24
 8007458:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800745c:	4931      	ldr	r1, [pc, #196]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 800745e:	4313      	orrs	r3, r2
 8007460:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007462:	4b30      	ldr	r3, [pc, #192]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	492d      	ldr	r1, [pc, #180]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007470:	4313      	orrs	r3, r2
 8007472:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007474:	4b2b      	ldr	r3, [pc, #172]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	f023 0220 	bic.w	r2, r3, #32
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	699b      	ldr	r3, [r3, #24]
 8007480:	4928      	ldr	r1, [pc, #160]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007482:	4313      	orrs	r3, r2
 8007484:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007486:	4b27      	ldr	r3, [pc, #156]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748a:	4a26      	ldr	r2, [pc, #152]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 800748c:	f023 0310 	bic.w	r3, r3, #16
 8007490:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007492:	4b24      	ldr	r3, [pc, #144]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 8007494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007496:	4b24      	ldr	r3, [pc, #144]	; (8007528 <RCCEx_PLL2_Config+0x160>)
 8007498:	4013      	ands	r3, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	69d2      	ldr	r2, [r2, #28]
 800749e:	00d2      	lsls	r2, r2, #3
 80074a0:	4920      	ldr	r1, [pc, #128]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074a2:	4313      	orrs	r3, r2
 80074a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80074a6:	4b1f      	ldr	r3, [pc, #124]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	4a1e      	ldr	r2, [pc, #120]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074ac:	f043 0310 	orr.w	r3, r3, #16
 80074b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d106      	bne.n	80074c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80074b8:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	4a19      	ldr	r2, [pc, #100]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074c4:	e00f      	b.n	80074e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d106      	bne.n	80074da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80074cc:	4b15      	ldr	r3, [pc, #84]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	4a14      	ldr	r2, [pc, #80]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074d8:	e005      	b.n	80074e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074da:	4b12      	ldr	r3, [pc, #72]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074de:	4a11      	ldr	r2, [pc, #68]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a0e      	ldr	r2, [pc, #56]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 80074ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074f2:	f7fa faeb 	bl	8001acc <HAL_GetTick>
 80074f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074f8:	e008      	b.n	800750c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074fa:	f7fa fae7 	bl	8001acc <HAL_GetTick>
 80074fe:	4602      	mov	r2, r0
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	2b02      	cmp	r3, #2
 8007506:	d901      	bls.n	800750c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e006      	b.n	800751a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <RCCEx_PLL2_Config+0x15c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d0f0      	beq.n	80074fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007518:	7bfb      	ldrb	r3, [r7, #15]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	58024400 	.word	0x58024400
 8007528:	ffff0007 	.word	0xffff0007

0800752c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800753a:	4b53      	ldr	r3, [pc, #332]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 800753c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	2b03      	cmp	r3, #3
 8007544:	d101      	bne.n	800754a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e099      	b.n	800767e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800754a:	4b4f      	ldr	r3, [pc, #316]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a4e      	ldr	r2, [pc, #312]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007556:	f7fa fab9 	bl	8001acc <HAL_GetTick>
 800755a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800755c:	e008      	b.n	8007570 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800755e:	f7fa fab5 	bl	8001acc <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e086      	b.n	800767e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007570:	4b45      	ldr	r3, [pc, #276]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1f0      	bne.n	800755e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800757c:	4b42      	ldr	r3, [pc, #264]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007580:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	051b      	lsls	r3, r3, #20
 800758a:	493f      	ldr	r1, [pc, #252]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 800758c:	4313      	orrs	r3, r2
 800758e:	628b      	str	r3, [r1, #40]	; 0x28
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	3b01      	subs	r3, #1
 8007596:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	3b01      	subs	r3, #1
 80075a0:	025b      	lsls	r3, r3, #9
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	3b01      	subs	r3, #1
 80075ac:	041b      	lsls	r3, r3, #16
 80075ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80075b2:	431a      	orrs	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	061b      	lsls	r3, r3, #24
 80075bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80075c0:	4931      	ldr	r1, [pc, #196]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075c2:	4313      	orrs	r3, r2
 80075c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80075c6:	4b30      	ldr	r3, [pc, #192]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	492d      	ldr	r1, [pc, #180]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075d8:	4b2b      	ldr	r3, [pc, #172]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	4928      	ldr	r1, [pc, #160]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075ea:	4b27      	ldr	r3, [pc, #156]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ee:	4a26      	ldr	r2, [pc, #152]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075f6:	4b24      	ldr	r3, [pc, #144]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 80075f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075fa:	4b24      	ldr	r3, [pc, #144]	; (800768c <RCCEx_PLL3_Config+0x160>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	69d2      	ldr	r2, [r2, #28]
 8007602:	00d2      	lsls	r2, r2, #3
 8007604:	4920      	ldr	r1, [pc, #128]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007606:	4313      	orrs	r3, r2
 8007608:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800760a:	4b1f      	ldr	r3, [pc, #124]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d106      	bne.n	800762a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800761c:	4b1a      	ldr	r3, [pc, #104]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	4a19      	ldr	r2, [pc, #100]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007622:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007626:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007628:	e00f      	b.n	800764a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d106      	bne.n	800763e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007630:	4b15      	ldr	r3, [pc, #84]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	4a14      	ldr	r2, [pc, #80]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007636:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800763a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800763c:	e005      	b.n	800764a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800763e:	4b12      	ldr	r3, [pc, #72]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	4a11      	ldr	r2, [pc, #68]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007648:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800764a:	4b0f      	ldr	r3, [pc, #60]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a0e      	ldr	r2, [pc, #56]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007654:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007656:	f7fa fa39 	bl	8001acc <HAL_GetTick>
 800765a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800765c:	e008      	b.n	8007670 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800765e:	f7fa fa35 	bl	8001acc <HAL_GetTick>
 8007662:	4602      	mov	r2, r0
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	2b02      	cmp	r3, #2
 800766a:	d901      	bls.n	8007670 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e006      	b.n	800767e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <RCCEx_PLL3_Config+0x15c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d0f0      	beq.n	800765e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	58024400 	.word	0x58024400
 800768c:	ffff0007 	.word	0xffff0007

08007690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e049      	b.n	8007736 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d106      	bne.n	80076bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7f9 ffaa 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4619      	mov	r1, r3
 80076ce:	4610      	mov	r0, r2
 80076d0:	f000 fbb0 	bl	8007e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d101      	bne.n	8007750 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e049      	b.n	80077e4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007756:	b2db      	uxtb	r3, r3
 8007758:	2b00      	cmp	r3, #0
 800775a:	d106      	bne.n	800776a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f841 	bl	80077ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2202      	movs	r2, #2
 800776e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	3304      	adds	r3, #4
 800777a:	4619      	mov	r1, r3
 800777c:	4610      	mov	r0, r2
 800777e:	f000 fb59 	bl	8007e34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2201      	movs	r2, #1
 800779e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2201      	movs	r2, #1
 80077a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d109      	bne.n	8007824 <HAL_TIM_PWM_Start+0x24>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b01      	cmp	r3, #1
 800781a:	bf14      	ite	ne
 800781c:	2301      	movne	r3, #1
 800781e:	2300      	moveq	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	e03c      	b.n	800789e <HAL_TIM_PWM_Start+0x9e>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b04      	cmp	r3, #4
 8007828:	d109      	bne.n	800783e <HAL_TIM_PWM_Start+0x3e>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b01      	cmp	r3, #1
 8007834:	bf14      	ite	ne
 8007836:	2301      	movne	r3, #1
 8007838:	2300      	moveq	r3, #0
 800783a:	b2db      	uxtb	r3, r3
 800783c:	e02f      	b.n	800789e <HAL_TIM_PWM_Start+0x9e>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d109      	bne.n	8007858 <HAL_TIM_PWM_Start+0x58>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	bf14      	ite	ne
 8007850:	2301      	movne	r3, #1
 8007852:	2300      	moveq	r3, #0
 8007854:	b2db      	uxtb	r3, r3
 8007856:	e022      	b.n	800789e <HAL_TIM_PWM_Start+0x9e>
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	2b0c      	cmp	r3, #12
 800785c:	d109      	bne.n	8007872 <HAL_TIM_PWM_Start+0x72>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007864:	b2db      	uxtb	r3, r3
 8007866:	2b01      	cmp	r3, #1
 8007868:	bf14      	ite	ne
 800786a:	2301      	movne	r3, #1
 800786c:	2300      	moveq	r3, #0
 800786e:	b2db      	uxtb	r3, r3
 8007870:	e015      	b.n	800789e <HAL_TIM_PWM_Start+0x9e>
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b10      	cmp	r3, #16
 8007876:	d109      	bne.n	800788c <HAL_TIM_PWM_Start+0x8c>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800787e:	b2db      	uxtb	r3, r3
 8007880:	2b01      	cmp	r3, #1
 8007882:	bf14      	ite	ne
 8007884:	2301      	movne	r3, #1
 8007886:	2300      	moveq	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	e008      	b.n	800789e <HAL_TIM_PWM_Start+0x9e>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b01      	cmp	r3, #1
 8007896:	bf14      	ite	ne
 8007898:	2301      	movne	r3, #1
 800789a:	2300      	moveq	r3, #0
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80078a2:	2301      	movs	r3, #1
 80078a4:	e0a1      	b.n	80079ea <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d104      	bne.n	80078b6 <HAL_TIM_PWM_Start+0xb6>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2202      	movs	r2, #2
 80078b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078b4:	e023      	b.n	80078fe <HAL_TIM_PWM_Start+0xfe>
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	2b04      	cmp	r3, #4
 80078ba:	d104      	bne.n	80078c6 <HAL_TIM_PWM_Start+0xc6>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078c4:	e01b      	b.n	80078fe <HAL_TIM_PWM_Start+0xfe>
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d104      	bne.n	80078d6 <HAL_TIM_PWM_Start+0xd6>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2202      	movs	r2, #2
 80078d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078d4:	e013      	b.n	80078fe <HAL_TIM_PWM_Start+0xfe>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b0c      	cmp	r3, #12
 80078da:	d104      	bne.n	80078e6 <HAL_TIM_PWM_Start+0xe6>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2202      	movs	r2, #2
 80078e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078e4:	e00b      	b.n	80078fe <HAL_TIM_PWM_Start+0xfe>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b10      	cmp	r3, #16
 80078ea:	d104      	bne.n	80078f6 <HAL_TIM_PWM_Start+0xf6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078f4:	e003      	b.n	80078fe <HAL_TIM_PWM_Start+0xfe>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2201      	movs	r2, #1
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fea2 	bl	8008650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a38      	ldr	r2, [pc, #224]	; (80079f4 <HAL_TIM_PWM_Start+0x1f4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d013      	beq.n	800793e <HAL_TIM_PWM_Start+0x13e>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a37      	ldr	r2, [pc, #220]	; (80079f8 <HAL_TIM_PWM_Start+0x1f8>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d00e      	beq.n	800793e <HAL_TIM_PWM_Start+0x13e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a35      	ldr	r2, [pc, #212]	; (80079fc <HAL_TIM_PWM_Start+0x1fc>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d009      	beq.n	800793e <HAL_TIM_PWM_Start+0x13e>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a34      	ldr	r2, [pc, #208]	; (8007a00 <HAL_TIM_PWM_Start+0x200>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d004      	beq.n	800793e <HAL_TIM_PWM_Start+0x13e>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a32      	ldr	r2, [pc, #200]	; (8007a04 <HAL_TIM_PWM_Start+0x204>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d101      	bne.n	8007942 <HAL_TIM_PWM_Start+0x142>
 800793e:	2301      	movs	r3, #1
 8007940:	e000      	b.n	8007944 <HAL_TIM_PWM_Start+0x144>
 8007942:	2300      	movs	r3, #0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007956:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a25      	ldr	r2, [pc, #148]	; (80079f4 <HAL_TIM_PWM_Start+0x1f4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d022      	beq.n	80079a8 <HAL_TIM_PWM_Start+0x1a8>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800796a:	d01d      	beq.n	80079a8 <HAL_TIM_PWM_Start+0x1a8>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a25      	ldr	r2, [pc, #148]	; (8007a08 <HAL_TIM_PWM_Start+0x208>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d018      	beq.n	80079a8 <HAL_TIM_PWM_Start+0x1a8>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a24      	ldr	r2, [pc, #144]	; (8007a0c <HAL_TIM_PWM_Start+0x20c>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d013      	beq.n	80079a8 <HAL_TIM_PWM_Start+0x1a8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a22      	ldr	r2, [pc, #136]	; (8007a10 <HAL_TIM_PWM_Start+0x210>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00e      	beq.n	80079a8 <HAL_TIM_PWM_Start+0x1a8>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a1a      	ldr	r2, [pc, #104]	; (80079f8 <HAL_TIM_PWM_Start+0x1f8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d009      	beq.n	80079a8 <HAL_TIM_PWM_Start+0x1a8>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <HAL_TIM_PWM_Start+0x214>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d004      	beq.n	80079a8 <HAL_TIM_PWM_Start+0x1a8>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a16      	ldr	r2, [pc, #88]	; (80079fc <HAL_TIM_PWM_Start+0x1fc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d115      	bne.n	80079d4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	4b1a      	ldr	r3, [pc, #104]	; (8007a18 <HAL_TIM_PWM_Start+0x218>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b06      	cmp	r3, #6
 80079b8:	d015      	beq.n	80079e6 <HAL_TIM_PWM_Start+0x1e6>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079c0:	d011      	beq.n	80079e6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f042 0201 	orr.w	r2, r2, #1
 80079d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079d2:	e008      	b.n	80079e6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0201 	orr.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	e000      	b.n	80079e8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	40010000 	.word	0x40010000
 80079f8:	40010400 	.word	0x40010400
 80079fc:	40014000 	.word	0x40014000
 8007a00:	40014400 	.word	0x40014400
 8007a04:	40014800 	.word	0x40014800
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
 8007a14:	40001800 	.word	0x40001800
 8007a18:	00010007 	.word	0x00010007

08007a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b086      	sub	sp, #24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a36:	2302      	movs	r3, #2
 8007a38:	e0ff      	b.n	8007c3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b14      	cmp	r3, #20
 8007a46:	f200 80f0 	bhi.w	8007c2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a4a:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007aa5 	.word	0x08007aa5
 8007a54:	08007c2b 	.word	0x08007c2b
 8007a58:	08007c2b 	.word	0x08007c2b
 8007a5c:	08007c2b 	.word	0x08007c2b
 8007a60:	08007ae5 	.word	0x08007ae5
 8007a64:	08007c2b 	.word	0x08007c2b
 8007a68:	08007c2b 	.word	0x08007c2b
 8007a6c:	08007c2b 	.word	0x08007c2b
 8007a70:	08007b27 	.word	0x08007b27
 8007a74:	08007c2b 	.word	0x08007c2b
 8007a78:	08007c2b 	.word	0x08007c2b
 8007a7c:	08007c2b 	.word	0x08007c2b
 8007a80:	08007b67 	.word	0x08007b67
 8007a84:	08007c2b 	.word	0x08007c2b
 8007a88:	08007c2b 	.word	0x08007c2b
 8007a8c:	08007c2b 	.word	0x08007c2b
 8007a90:	08007ba9 	.word	0x08007ba9
 8007a94:	08007c2b 	.word	0x08007c2b
 8007a98:	08007c2b 	.word	0x08007c2b
 8007a9c:	08007c2b 	.word	0x08007c2b
 8007aa0:	08007be9 	.word	0x08007be9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fa5c 	bl	8007f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699a      	ldr	r2, [r3, #24]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f042 0208 	orr.w	r2, r2, #8
 8007abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	699a      	ldr	r2, [r3, #24]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0204 	bic.w	r2, r2, #4
 8007ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6999      	ldr	r1, [r3, #24]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	619a      	str	r2, [r3, #24]
      break;
 8007ae2:	e0a5      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68b9      	ldr	r1, [r7, #8]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f000 facc 	bl	8008088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699a      	ldr	r2, [r3, #24]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6999      	ldr	r1, [r3, #24]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	021a      	lsls	r2, r3, #8
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	430a      	orrs	r2, r1
 8007b22:	619a      	str	r2, [r3, #24]
      break;
 8007b24:	e084      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fb35 	bl	800819c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69da      	ldr	r2, [r3, #28]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f042 0208 	orr.w	r2, r2, #8
 8007b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69da      	ldr	r2, [r3, #28]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0204 	bic.w	r2, r2, #4
 8007b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	69d9      	ldr	r1, [r3, #28]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	691a      	ldr	r2, [r3, #16]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	61da      	str	r2, [r3, #28]
      break;
 8007b64:	e064      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 fb9d 	bl	80082ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69da      	ldr	r2, [r3, #28]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69d9      	ldr	r1, [r3, #28]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	021a      	lsls	r2, r3, #8
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	61da      	str	r2, [r3, #28]
      break;
 8007ba6:	e043      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68b9      	ldr	r1, [r7, #8]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f000 fbe6 	bl	8008380 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0208 	orr.w	r2, r2, #8
 8007bc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f022 0204 	bic.w	r2, r2, #4
 8007bd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	691a      	ldr	r2, [r3, #16]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	430a      	orrs	r2, r1
 8007be4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007be6:	e023      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fc2a 	bl	8008448 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	021a      	lsls	r2, r3, #8
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007c28:	e002      	b.n	8007c30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8007c2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop

08007c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d101      	bne.n	8007c60 <HAL_TIM_ConfigClockSource+0x1c>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	e0dc      	b.n	8007e1a <HAL_TIM_ConfigClockSource+0x1d6>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2201      	movs	r2, #1
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	689b      	ldr	r3, [r3, #8]
 8007c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	4b6a      	ldr	r3, [pc, #424]	; (8007e24 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68ba      	ldr	r2, [r7, #8]
 8007c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a64      	ldr	r2, [pc, #400]	; (8007e28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	f000 80a9 	beq.w	8007dee <HAL_TIM_ConfigClockSource+0x1aa>
 8007c9c:	4a62      	ldr	r2, [pc, #392]	; (8007e28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	f200 80ae 	bhi.w	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ca4:	4a61      	ldr	r2, [pc, #388]	; (8007e2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	f000 80a1 	beq.w	8007dee <HAL_TIM_ConfigClockSource+0x1aa>
 8007cac:	4a5f      	ldr	r2, [pc, #380]	; (8007e2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	f200 80a6 	bhi.w	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cb4:	4a5e      	ldr	r2, [pc, #376]	; (8007e30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	f000 8099 	beq.w	8007dee <HAL_TIM_ConfigClockSource+0x1aa>
 8007cbc:	4a5c      	ldr	r2, [pc, #368]	; (8007e30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	f200 809e 	bhi.w	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cc4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007cc8:	f000 8091 	beq.w	8007dee <HAL_TIM_ConfigClockSource+0x1aa>
 8007ccc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007cd0:	f200 8096 	bhi.w	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cd8:	f000 8089 	beq.w	8007dee <HAL_TIM_ConfigClockSource+0x1aa>
 8007cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ce0:	f200 808e 	bhi.w	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ce8:	d03e      	beq.n	8007d68 <HAL_TIM_ConfigClockSource+0x124>
 8007cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cee:	f200 8087 	bhi.w	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cf6:	f000 8086 	beq.w	8007e06 <HAL_TIM_ConfigClockSource+0x1c2>
 8007cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cfe:	d87f      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d00:	2b70      	cmp	r3, #112	; 0x70
 8007d02:	d01a      	beq.n	8007d3a <HAL_TIM_ConfigClockSource+0xf6>
 8007d04:	2b70      	cmp	r3, #112	; 0x70
 8007d06:	d87b      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d08:	2b60      	cmp	r3, #96	; 0x60
 8007d0a:	d050      	beq.n	8007dae <HAL_TIM_ConfigClockSource+0x16a>
 8007d0c:	2b60      	cmp	r3, #96	; 0x60
 8007d0e:	d877      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d10:	2b50      	cmp	r3, #80	; 0x50
 8007d12:	d03c      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x14a>
 8007d14:	2b50      	cmp	r3, #80	; 0x50
 8007d16:	d873      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d18:	2b40      	cmp	r3, #64	; 0x40
 8007d1a:	d058      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0x18a>
 8007d1c:	2b40      	cmp	r3, #64	; 0x40
 8007d1e:	d86f      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d20:	2b30      	cmp	r3, #48	; 0x30
 8007d22:	d064      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x1aa>
 8007d24:	2b30      	cmp	r3, #48	; 0x30
 8007d26:	d86b      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d060      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x1aa>
 8007d2c:	2b20      	cmp	r3, #32
 8007d2e:	d867      	bhi.n	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d05c      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x1aa>
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d05a      	beq.n	8007dee <HAL_TIM_ConfigClockSource+0x1aa>
 8007d38:	e062      	b.n	8007e00 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	6899      	ldr	r1, [r3, #8]
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	f000 fc61 	bl	8008610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	609a      	str	r2, [r3, #8]
      break;
 8007d66:	e04f      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	6899      	ldr	r1, [r3, #8]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	f000 fc4a 	bl	8008610 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	689a      	ldr	r2, [r3, #8]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d8a:	609a      	str	r2, [r3, #8]
      break;
 8007d8c:	e03c      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	6859      	ldr	r1, [r3, #4]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	f000 fbba 	bl	8008514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2150      	movs	r1, #80	; 0x50
 8007da6:	4618      	mov	r0, r3
 8007da8:	f000 fc14 	bl	80085d4 <TIM_ITRx_SetConfig>
      break;
 8007dac:	e02c      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6818      	ldr	r0, [r3, #0]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	6859      	ldr	r1, [r3, #4]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	f000 fbd9 	bl	8008572 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2160      	movs	r1, #96	; 0x60
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f000 fc04 	bl	80085d4 <TIM_ITRx_SetConfig>
      break;
 8007dcc:	e01c      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6859      	ldr	r1, [r3, #4]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	461a      	mov	r2, r3
 8007ddc:	f000 fb9a 	bl	8008514 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	2140      	movs	r1, #64	; 0x40
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 fbf4 	bl	80085d4 <TIM_ITRx_SetConfig>
      break;
 8007dec:	e00c      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4619      	mov	r1, r3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	f000 fbeb 	bl	80085d4 <TIM_ITRx_SetConfig>
      break;
 8007dfe:	e003      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	73fb      	strb	r3, [r7, #15]
      break;
 8007e04:	e000      	b.n	8007e08 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	ffceff88 	.word	0xffceff88
 8007e28:	00100040 	.word	0x00100040
 8007e2c:	00100030 	.word	0x00100030
 8007e30:	00100020 	.word	0x00100020

08007e34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a40      	ldr	r2, [pc, #256]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d013      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e52:	d00f      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a3d      	ldr	r2, [pc, #244]	; (8007f4c <TIM_Base_SetConfig+0x118>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00b      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a3c      	ldr	r2, [pc, #240]	; (8007f50 <TIM_Base_SetConfig+0x11c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d007      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a3b      	ldr	r2, [pc, #236]	; (8007f54 <TIM_Base_SetConfig+0x120>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d003      	beq.n	8007e74 <TIM_Base_SetConfig+0x40>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a3a      	ldr	r2, [pc, #232]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d108      	bne.n	8007e86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	68fa      	ldr	r2, [r7, #12]
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2f      	ldr	r2, [pc, #188]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d01f      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e94:	d01b      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a2c      	ldr	r2, [pc, #176]	; (8007f4c <TIM_Base_SetConfig+0x118>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d017      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a2b      	ldr	r2, [pc, #172]	; (8007f50 <TIM_Base_SetConfig+0x11c>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d013      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a2a      	ldr	r2, [pc, #168]	; (8007f54 <TIM_Base_SetConfig+0x120>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00f      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a29      	ldr	r2, [pc, #164]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d00b      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a28      	ldr	r2, [pc, #160]	; (8007f5c <TIM_Base_SetConfig+0x128>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d007      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	4a27      	ldr	r2, [pc, #156]	; (8007f60 <TIM_Base_SetConfig+0x12c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d003      	beq.n	8007ece <TIM_Base_SetConfig+0x9a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a26      	ldr	r2, [pc, #152]	; (8007f64 <TIM_Base_SetConfig+0x130>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d108      	bne.n	8007ee0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	4313      	orrs	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	689a      	ldr	r2, [r3, #8]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a10      	ldr	r2, [pc, #64]	; (8007f48 <TIM_Base_SetConfig+0x114>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d00f      	beq.n	8007f2c <TIM_Base_SetConfig+0xf8>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a12      	ldr	r2, [pc, #72]	; (8007f58 <TIM_Base_SetConfig+0x124>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00b      	beq.n	8007f2c <TIM_Base_SetConfig+0xf8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a11      	ldr	r2, [pc, #68]	; (8007f5c <TIM_Base_SetConfig+0x128>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d007      	beq.n	8007f2c <TIM_Base_SetConfig+0xf8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a10      	ldr	r2, [pc, #64]	; (8007f60 <TIM_Base_SetConfig+0x12c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_Base_SetConfig+0xf8>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a0f      	ldr	r2, [pc, #60]	; (8007f64 <TIM_Base_SetConfig+0x130>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d103      	bne.n	8007f34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	615a      	str	r2, [r3, #20]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40010000 	.word	0x40010000
 8007f4c:	40000400 	.word	0x40000400
 8007f50:	40000800 	.word	0x40000800
 8007f54:	40000c00 	.word	0x40000c00
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40014400 	.word	0x40014400
 8007f64:	40014800 	.word	0x40014800

08007f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	f023 0201 	bic.w	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4b37      	ldr	r3, [pc, #220]	; (8008070 <TIM_OC1_SetConfig+0x108>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0303 	bic.w	r3, r3, #3
 8007f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f023 0302 	bic.w	r3, r3, #2
 8007fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a2d      	ldr	r2, [pc, #180]	; (8008074 <TIM_OC1_SetConfig+0x10c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00f      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x7c>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a2c      	ldr	r2, [pc, #176]	; (8008078 <TIM_OC1_SetConfig+0x110>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00b      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x7c>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a2b      	ldr	r2, [pc, #172]	; (800807c <TIM_OC1_SetConfig+0x114>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d007      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x7c>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a2a      	ldr	r2, [pc, #168]	; (8008080 <TIM_OC1_SetConfig+0x118>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x7c>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a29      	ldr	r2, [pc, #164]	; (8008084 <TIM_OC1_SetConfig+0x11c>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d10c      	bne.n	8007ffe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f023 0308 	bic.w	r3, r3, #8
 8007fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f023 0304 	bic.w	r3, r3, #4
 8007ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a1c      	ldr	r2, [pc, #112]	; (8008074 <TIM_OC1_SetConfig+0x10c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d00f      	beq.n	8008026 <TIM_OC1_SetConfig+0xbe>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a1b      	ldr	r2, [pc, #108]	; (8008078 <TIM_OC1_SetConfig+0x110>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00b      	beq.n	8008026 <TIM_OC1_SetConfig+0xbe>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a1a      	ldr	r2, [pc, #104]	; (800807c <TIM_OC1_SetConfig+0x114>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d007      	beq.n	8008026 <TIM_OC1_SetConfig+0xbe>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a19      	ldr	r2, [pc, #100]	; (8008080 <TIM_OC1_SetConfig+0x118>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d003      	beq.n	8008026 <TIM_OC1_SetConfig+0xbe>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a18      	ldr	r2, [pc, #96]	; (8008084 <TIM_OC1_SetConfig+0x11c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d111      	bne.n	800804a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800802c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	695b      	ldr	r3, [r3, #20]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	4313      	orrs	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	4313      	orrs	r3, r2
 8008048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	685a      	ldr	r2, [r3, #4]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	621a      	str	r2, [r3, #32]
}
 8008064:	bf00      	nop
 8008066:	371c      	adds	r7, #28
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	fffeff8f 	.word	0xfffeff8f
 8008074:	40010000 	.word	0x40010000
 8008078:	40010400 	.word	0x40010400
 800807c:	40014000 	.word	0x40014000
 8008080:	40014400 	.word	0x40014400
 8008084:	40014800 	.word	0x40014800

08008088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	f023 0210 	bic.w	r2, r3, #16
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	4b34      	ldr	r3, [pc, #208]	; (8008184 <TIM_OC2_SetConfig+0xfc>)
 80080b4:	4013      	ands	r3, r2
 80080b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	021b      	lsls	r3, r3, #8
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f023 0320 	bic.w	r3, r3, #32
 80080d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	011b      	lsls	r3, r3, #4
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a29      	ldr	r2, [pc, #164]	; (8008188 <TIM_OC2_SetConfig+0x100>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d003      	beq.n	80080f0 <TIM_OC2_SetConfig+0x68>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a28      	ldr	r2, [pc, #160]	; (800818c <TIM_OC2_SetConfig+0x104>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d10d      	bne.n	800810c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	4313      	orrs	r3, r2
 8008102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800810a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	4a1e      	ldr	r2, [pc, #120]	; (8008188 <TIM_OC2_SetConfig+0x100>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d00f      	beq.n	8008134 <TIM_OC2_SetConfig+0xac>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a1d      	ldr	r2, [pc, #116]	; (800818c <TIM_OC2_SetConfig+0x104>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d00b      	beq.n	8008134 <TIM_OC2_SetConfig+0xac>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a1c      	ldr	r2, [pc, #112]	; (8008190 <TIM_OC2_SetConfig+0x108>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d007      	beq.n	8008134 <TIM_OC2_SetConfig+0xac>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a1b      	ldr	r2, [pc, #108]	; (8008194 <TIM_OC2_SetConfig+0x10c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d003      	beq.n	8008134 <TIM_OC2_SetConfig+0xac>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a1a      	ldr	r2, [pc, #104]	; (8008198 <TIM_OC2_SetConfig+0x110>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d113      	bne.n	800815c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800813a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008142:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	695b      	ldr	r3, [r3, #20]
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	685a      	ldr	r2, [r3, #4]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	621a      	str	r2, [r3, #32]
}
 8008176:	bf00      	nop
 8008178:	371c      	adds	r7, #28
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop
 8008184:	feff8fff 	.word	0xfeff8fff
 8008188:	40010000 	.word	0x40010000
 800818c:	40010400 	.word	0x40010400
 8008190:	40014000 	.word	0x40014000
 8008194:	40014400 	.word	0x40014400
 8008198:	40014800 	.word	0x40014800

0800819c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800819c:	b480      	push	{r7}
 800819e:	b087      	sub	sp, #28
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6a1b      	ldr	r3, [r3, #32]
 80081aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	69db      	ldr	r3, [r3, #28]
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081c4:	68fa      	ldr	r2, [r7, #12]
 80081c6:	4b33      	ldr	r3, [pc, #204]	; (8008294 <TIM_OC3_SetConfig+0xf8>)
 80081c8:	4013      	ands	r3, r2
 80081ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 0303 	bic.w	r3, r3, #3
 80081d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	4313      	orrs	r3, r2
 80081dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	021b      	lsls	r3, r3, #8
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a28      	ldr	r2, [pc, #160]	; (8008298 <TIM_OC3_SetConfig+0xfc>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d003      	beq.n	8008202 <TIM_OC3_SetConfig+0x66>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a27      	ldr	r2, [pc, #156]	; (800829c <TIM_OC3_SetConfig+0x100>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d10d      	bne.n	800821e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	4313      	orrs	r3, r2
 8008214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800821c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a1d      	ldr	r2, [pc, #116]	; (8008298 <TIM_OC3_SetConfig+0xfc>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d00f      	beq.n	8008246 <TIM_OC3_SetConfig+0xaa>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a1c      	ldr	r2, [pc, #112]	; (800829c <TIM_OC3_SetConfig+0x100>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d00b      	beq.n	8008246 <TIM_OC3_SetConfig+0xaa>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a1b      	ldr	r2, [pc, #108]	; (80082a0 <TIM_OC3_SetConfig+0x104>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d007      	beq.n	8008246 <TIM_OC3_SetConfig+0xaa>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a1a      	ldr	r2, [pc, #104]	; (80082a4 <TIM_OC3_SetConfig+0x108>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d003      	beq.n	8008246 <TIM_OC3_SetConfig+0xaa>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a19      	ldr	r2, [pc, #100]	; (80082a8 <TIM_OC3_SetConfig+0x10c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d113      	bne.n	800826e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800824c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	011b      	lsls	r3, r3, #4
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	4313      	orrs	r3, r2
 8008260:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	693a      	ldr	r2, [r7, #16]
 8008272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	621a      	str	r2, [r3, #32]
}
 8008288:	bf00      	nop
 800828a:	371c      	adds	r7, #28
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	fffeff8f 	.word	0xfffeff8f
 8008298:	40010000 	.word	0x40010000
 800829c:	40010400 	.word	0x40010400
 80082a0:	40014000 	.word	0x40014000
 80082a4:	40014400 	.word	0x40014400
 80082a8:	40014800 	.word	0x40014800

080082ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	4b24      	ldr	r3, [pc, #144]	; (8008368 <TIM_OC4_SetConfig+0xbc>)
 80082d8:	4013      	ands	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	021b      	lsls	r3, r3, #8
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	031b      	lsls	r3, r3, #12
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	4313      	orrs	r3, r2
 8008302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a19      	ldr	r2, [pc, #100]	; (800836c <TIM_OC4_SetConfig+0xc0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00f      	beq.n	800832c <TIM_OC4_SetConfig+0x80>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a18      	ldr	r2, [pc, #96]	; (8008370 <TIM_OC4_SetConfig+0xc4>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00b      	beq.n	800832c <TIM_OC4_SetConfig+0x80>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a17      	ldr	r2, [pc, #92]	; (8008374 <TIM_OC4_SetConfig+0xc8>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d007      	beq.n	800832c <TIM_OC4_SetConfig+0x80>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a16      	ldr	r2, [pc, #88]	; (8008378 <TIM_OC4_SetConfig+0xcc>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d003      	beq.n	800832c <TIM_OC4_SetConfig+0x80>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a15      	ldr	r2, [pc, #84]	; (800837c <TIM_OC4_SetConfig+0xd0>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d109      	bne.n	8008340 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008332:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	695b      	ldr	r3, [r3, #20]
 8008338:	019b      	lsls	r3, r3, #6
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	4313      	orrs	r3, r2
 800833e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	693a      	ldr	r2, [r7, #16]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	bf00      	nop
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	feff8fff 	.word	0xfeff8fff
 800836c:	40010000 	.word	0x40010000
 8008370:	40010400 	.word	0x40010400
 8008374:	40014000 	.word	0x40014000
 8008378:	40014400 	.word	0x40014400
 800837c:	40014800 	.word	0x40014800

08008380 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a1b      	ldr	r3, [r3, #32]
 800838e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a1b      	ldr	r3, [r3, #32]
 800839a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	4b21      	ldr	r3, [pc, #132]	; (8008430 <TIM_OC5_SetConfig+0xb0>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80083c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	041b      	lsls	r3, r3, #16
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a18      	ldr	r2, [pc, #96]	; (8008434 <TIM_OC5_SetConfig+0xb4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d00f      	beq.n	80083f6 <TIM_OC5_SetConfig+0x76>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a17      	ldr	r2, [pc, #92]	; (8008438 <TIM_OC5_SetConfig+0xb8>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d00b      	beq.n	80083f6 <TIM_OC5_SetConfig+0x76>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a16      	ldr	r2, [pc, #88]	; (800843c <TIM_OC5_SetConfig+0xbc>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d007      	beq.n	80083f6 <TIM_OC5_SetConfig+0x76>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a15      	ldr	r2, [pc, #84]	; (8008440 <TIM_OC5_SetConfig+0xc0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d003      	beq.n	80083f6 <TIM_OC5_SetConfig+0x76>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a14      	ldr	r2, [pc, #80]	; (8008444 <TIM_OC5_SetConfig+0xc4>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d109      	bne.n	800840a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	021b      	lsls	r3, r3, #8
 8008404:	697a      	ldr	r2, [r7, #20]
 8008406:	4313      	orrs	r3, r2
 8008408:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68fa      	ldr	r2, [r7, #12]
 8008414:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	621a      	str	r2, [r3, #32]
}
 8008424:	bf00      	nop
 8008426:	371c      	adds	r7, #28
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	fffeff8f 	.word	0xfffeff8f
 8008434:	40010000 	.word	0x40010000
 8008438:	40010400 	.word	0x40010400
 800843c:	40014000 	.word	0x40014000
 8008440:	40014400 	.word	0x40014400
 8008444:	40014800 	.word	0x40014800

08008448 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800846e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4b22      	ldr	r3, [pc, #136]	; (80084fc <TIM_OC6_SetConfig+0xb4>)
 8008474:	4013      	ands	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800848a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	051b      	lsls	r3, r3, #20
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a19      	ldr	r2, [pc, #100]	; (8008500 <TIM_OC6_SetConfig+0xb8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d00f      	beq.n	80084c0 <TIM_OC6_SetConfig+0x78>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a18      	ldr	r2, [pc, #96]	; (8008504 <TIM_OC6_SetConfig+0xbc>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d00b      	beq.n	80084c0 <TIM_OC6_SetConfig+0x78>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	4a17      	ldr	r2, [pc, #92]	; (8008508 <TIM_OC6_SetConfig+0xc0>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d007      	beq.n	80084c0 <TIM_OC6_SetConfig+0x78>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a16      	ldr	r2, [pc, #88]	; (800850c <TIM_OC6_SetConfig+0xc4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <TIM_OC6_SetConfig+0x78>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a15      	ldr	r2, [pc, #84]	; (8008510 <TIM_OC6_SetConfig+0xc8>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d109      	bne.n	80084d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80084c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	029b      	lsls	r3, r3, #10
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	621a      	str	r2, [r3, #32]
}
 80084ee:	bf00      	nop
 80084f0:	371c      	adds	r7, #28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	feff8fff 	.word	0xfeff8fff
 8008500:	40010000 	.word	0x40010000
 8008504:	40010400 	.word	0x40010400
 8008508:	40014000 	.word	0x40014000
 800850c:	40014400 	.word	0x40014400
 8008510:	40014800 	.word	0x40014800

08008514 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008514:	b480      	push	{r7}
 8008516:	b087      	sub	sp, #28
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	f023 0201 	bic.w	r2, r3, #1
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800853e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	011b      	lsls	r3, r3, #4
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	4313      	orrs	r3, r2
 8008548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f023 030a 	bic.w	r3, r3, #10
 8008550:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	621a      	str	r2, [r3, #32]
}
 8008566:	bf00      	nop
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008572:	b480      	push	{r7}
 8008574:	b087      	sub	sp, #28
 8008576:	af00      	add	r7, sp, #0
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6a1b      	ldr	r3, [r3, #32]
 8008582:	f023 0210 	bic.w	r2, r3, #16
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800859c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	031b      	lsls	r3, r3, #12
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	011b      	lsls	r3, r3, #4
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	621a      	str	r2, [r3, #32]
}
 80085c6:	bf00      	nop
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
	...

080085d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	4b09      	ldr	r3, [pc, #36]	; (800860c <TIM_ITRx_SetConfig+0x38>)
 80085e8:	4013      	ands	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085ec:	683a      	ldr	r2, [r7, #0]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f043 0307 	orr.w	r3, r3, #7
 80085f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	609a      	str	r2, [r3, #8]
}
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	ffcfff8f 	.word	0xffcfff8f

08008610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
 800861c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800862a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	021a      	lsls	r2, r3, #8
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	431a      	orrs	r2, r3
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4313      	orrs	r3, r2
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	4313      	orrs	r3, r2
 800863c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	609a      	str	r2, [r3, #8]
}
 8008644:	bf00      	nop
 8008646:	371c      	adds	r7, #28
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008650:	b480      	push	{r7}
 8008652:	b087      	sub	sp, #28
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 031f 	and.w	r3, r3, #31
 8008662:	2201      	movs	r2, #1
 8008664:	fa02 f303 	lsl.w	r3, r2, r3
 8008668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a1a      	ldr	r2, [r3, #32]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	43db      	mvns	r3, r3
 8008672:	401a      	ands	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6a1a      	ldr	r2, [r3, #32]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	fa01 f303 	lsl.w	r3, r1, r3
 8008688:	431a      	orrs	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	621a      	str	r2, [r3, #32]
}
 800868e:	bf00      	nop
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
	...

0800869c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e06d      	b.n	8008790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a30      	ldr	r2, [pc, #192]	; (800879c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d004      	beq.n	80086e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a2f      	ldr	r2, [pc, #188]	; (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d108      	bne.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4313      	orrs	r3, r2
 80086f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008700:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	4313      	orrs	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a20      	ldr	r2, [pc, #128]	; (800879c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d022      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008726:	d01d      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a1d      	ldr	r2, [pc, #116]	; (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d018      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a1c      	ldr	r2, [pc, #112]	; (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d013      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a1a      	ldr	r2, [pc, #104]	; (80087ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d00e      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a15      	ldr	r2, [pc, #84]	; (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d009      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a16      	ldr	r2, [pc, #88]	; (80087b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d004      	beq.n	8008764 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a15      	ldr	r2, [pc, #84]	; (80087b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d10c      	bne.n	800877e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800876a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	4313      	orrs	r3, r2
 8008774:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2201      	movs	r2, #1
 8008782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800878e:	2300      	movs	r3, #0
}
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	40010000 	.word	0x40010000
 80087a0:	40010400 	.word	0x40010400
 80087a4:	40000400 	.word	0x40000400
 80087a8:	40000800 	.word	0x40000800
 80087ac:	40000c00 	.word	0x40000c00
 80087b0:	40001800 	.word	0x40001800
 80087b4:	40014000 	.word	0x40014000

080087b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	e042      	b.n	8008850 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d106      	bne.n	80087e2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7f8 ff6f 	bl	80016c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2224      	movs	r2, #36	; 0x24
 80087e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 0201 	bic.w	r2, r2, #1
 80087f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f8c2 	bl	8008984 <UART_SetConfig>
 8008800:	4603      	mov	r3, r0
 8008802:	2b01      	cmp	r3, #1
 8008804:	d101      	bne.n	800880a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e022      	b.n	8008850 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fe1e 	bl	8009454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685a      	ldr	r2, [r3, #4]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689a      	ldr	r2, [r3, #8]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f042 0201 	orr.w	r2, r2, #1
 8008846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 fea5 	bl	8009598 <UART_CheckIdleState>
 800884e:	4603      	mov	r3, r0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08a      	sub	sp, #40	; 0x28
 800885c:	af02      	add	r7, sp, #8
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	603b      	str	r3, [r7, #0]
 8008864:	4613      	mov	r3, r2
 8008866:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800886e:	2b20      	cmp	r3, #32
 8008870:	f040 8083 	bne.w	800897a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d002      	beq.n	8008880 <HAL_UART_Transmit+0x28>
 800887a:	88fb      	ldrh	r3, [r7, #6]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e07b      	b.n	800897c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800888a:	2b01      	cmp	r3, #1
 800888c:	d101      	bne.n	8008892 <HAL_UART_Transmit+0x3a>
 800888e:	2302      	movs	r3, #2
 8008890:	e074      	b.n	800897c <HAL_UART_Transmit+0x124>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2221      	movs	r2, #33	; 0x21
 80088a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088aa:	f7f9 f90f 	bl	8001acc <HAL_GetTick>
 80088ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	88fa      	ldrh	r2, [r7, #6]
 80088b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	88fa      	ldrh	r2, [r7, #6]
 80088bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088c8:	d108      	bne.n	80088dc <HAL_UART_Transmit+0x84>
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d104      	bne.n	80088dc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	61bb      	str	r3, [r7, #24]
 80088da:	e003      	b.n	80088e4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80088ec:	e02c      	b.n	8008948 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2200      	movs	r2, #0
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 fe98 	bl	800962e <UART_WaitOnFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d001      	beq.n	8008908 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008904:	2303      	movs	r3, #3
 8008906:	e039      	b.n	800897c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10b      	bne.n	8008926 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800891c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	3302      	adds	r3, #2
 8008922:	61bb      	str	r3, [r7, #24]
 8008924:	e007      	b.n	8008936 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	781a      	ldrb	r2, [r3, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	3301      	adds	r3, #1
 8008934:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800893c:	b29b      	uxth	r3, r3
 800893e:	3b01      	subs	r3, #1
 8008940:	b29a      	uxth	r2, r3
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800894e:	b29b      	uxth	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1cc      	bne.n	80088ee <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2200      	movs	r2, #0
 800895c:	2140      	movs	r1, #64	; 0x40
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f000 fe65 	bl	800962e <UART_WaitOnFlagUntilTimeout>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e006      	b.n	800897c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2220      	movs	r2, #32
 8008972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008976:	2300      	movs	r3, #0
 8008978:	e000      	b.n	800897c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800897a:	2302      	movs	r3, #2
  }
}
 800897c:	4618      	mov	r0, r3
 800897e:	3720      	adds	r7, #32
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008988:	b092      	sub	sp, #72	; 0x48
 800898a:	af00      	add	r7, sp, #0
 800898c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	431a      	orrs	r2, r3
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	431a      	orrs	r2, r3
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	69db      	ldr	r3, [r3, #28]
 80089a8:	4313      	orrs	r3, r2
 80089aa:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	4bbe      	ldr	r3, [pc, #760]	; (8008cac <UART_SetConfig+0x328>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	697a      	ldr	r2, [r7, #20]
 80089b8:	6812      	ldr	r2, [r2, #0]
 80089ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089bc:	430b      	orrs	r3, r1
 80089be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4ab3      	ldr	r2, [pc, #716]	; (8008cb0 <UART_SetConfig+0x32c>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d004      	beq.n	80089f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089ec:	4313      	orrs	r3, r2
 80089ee:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	689a      	ldr	r2, [r3, #8]
 80089f6:	4baf      	ldr	r3, [pc, #700]	; (8008cb4 <UART_SetConfig+0x330>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a00:	430b      	orrs	r3, r1
 8008a02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	f023 010f 	bic.w	r1, r3, #15
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4aa6      	ldr	r2, [pc, #664]	; (8008cb8 <UART_SetConfig+0x334>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d177      	bne.n	8008b14 <UART_SetConfig+0x190>
 8008a24:	4ba5      	ldr	r3, [pc, #660]	; (8008cbc <UART_SetConfig+0x338>)
 8008a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a2c:	2b28      	cmp	r3, #40	; 0x28
 8008a2e:	d86d      	bhi.n	8008b0c <UART_SetConfig+0x188>
 8008a30:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <UART_SetConfig+0xb4>)
 8008a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a36:	bf00      	nop
 8008a38:	08008add 	.word	0x08008add
 8008a3c:	08008b0d 	.word	0x08008b0d
 8008a40:	08008b0d 	.word	0x08008b0d
 8008a44:	08008b0d 	.word	0x08008b0d
 8008a48:	08008b0d 	.word	0x08008b0d
 8008a4c:	08008b0d 	.word	0x08008b0d
 8008a50:	08008b0d 	.word	0x08008b0d
 8008a54:	08008b0d 	.word	0x08008b0d
 8008a58:	08008ae5 	.word	0x08008ae5
 8008a5c:	08008b0d 	.word	0x08008b0d
 8008a60:	08008b0d 	.word	0x08008b0d
 8008a64:	08008b0d 	.word	0x08008b0d
 8008a68:	08008b0d 	.word	0x08008b0d
 8008a6c:	08008b0d 	.word	0x08008b0d
 8008a70:	08008b0d 	.word	0x08008b0d
 8008a74:	08008b0d 	.word	0x08008b0d
 8008a78:	08008aed 	.word	0x08008aed
 8008a7c:	08008b0d 	.word	0x08008b0d
 8008a80:	08008b0d 	.word	0x08008b0d
 8008a84:	08008b0d 	.word	0x08008b0d
 8008a88:	08008b0d 	.word	0x08008b0d
 8008a8c:	08008b0d 	.word	0x08008b0d
 8008a90:	08008b0d 	.word	0x08008b0d
 8008a94:	08008b0d 	.word	0x08008b0d
 8008a98:	08008af5 	.word	0x08008af5
 8008a9c:	08008b0d 	.word	0x08008b0d
 8008aa0:	08008b0d 	.word	0x08008b0d
 8008aa4:	08008b0d 	.word	0x08008b0d
 8008aa8:	08008b0d 	.word	0x08008b0d
 8008aac:	08008b0d 	.word	0x08008b0d
 8008ab0:	08008b0d 	.word	0x08008b0d
 8008ab4:	08008b0d 	.word	0x08008b0d
 8008ab8:	08008afd 	.word	0x08008afd
 8008abc:	08008b0d 	.word	0x08008b0d
 8008ac0:	08008b0d 	.word	0x08008b0d
 8008ac4:	08008b0d 	.word	0x08008b0d
 8008ac8:	08008b0d 	.word	0x08008b0d
 8008acc:	08008b0d 	.word	0x08008b0d
 8008ad0:	08008b0d 	.word	0x08008b0d
 8008ad4:	08008b0d 	.word	0x08008b0d
 8008ad8:	08008b05 	.word	0x08008b05
 8008adc:	2301      	movs	r3, #1
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae2:	e222      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008ae4:	2304      	movs	r3, #4
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e21e      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008aec:	2308      	movs	r3, #8
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e21a      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008af4:	2310      	movs	r3, #16
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afa:	e216      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008afc:	2320      	movs	r3, #32
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e212      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008b04:	2340      	movs	r3, #64	; 0x40
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e20e      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b12:	e20a      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a69      	ldr	r2, [pc, #420]	; (8008cc0 <UART_SetConfig+0x33c>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d130      	bne.n	8008b80 <UART_SetConfig+0x1fc>
 8008b1e:	4b67      	ldr	r3, [pc, #412]	; (8008cbc <UART_SetConfig+0x338>)
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	2b05      	cmp	r3, #5
 8008b28:	d826      	bhi.n	8008b78 <UART_SetConfig+0x1f4>
 8008b2a:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <UART_SetConfig+0x1ac>)
 8008b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b30:	08008b49 	.word	0x08008b49
 8008b34:	08008b51 	.word	0x08008b51
 8008b38:	08008b59 	.word	0x08008b59
 8008b3c:	08008b61 	.word	0x08008b61
 8008b40:	08008b69 	.word	0x08008b69
 8008b44:	08008b71 	.word	0x08008b71
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4e:	e1ec      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008b50:	2304      	movs	r3, #4
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b56:	e1e8      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008b58:	2308      	movs	r3, #8
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5e:	e1e4      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008b60:	2310      	movs	r3, #16
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b66:	e1e0      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008b68:	2320      	movs	r3, #32
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6e:	e1dc      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008b70:	2340      	movs	r3, #64	; 0x40
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b76:	e1d8      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008b78:	2380      	movs	r3, #128	; 0x80
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7e:	e1d4      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a4f      	ldr	r2, [pc, #316]	; (8008cc4 <UART_SetConfig+0x340>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d130      	bne.n	8008bec <UART_SetConfig+0x268>
 8008b8a:	4b4c      	ldr	r3, [pc, #304]	; (8008cbc <UART_SetConfig+0x338>)
 8008b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b8e:	f003 0307 	and.w	r3, r3, #7
 8008b92:	2b05      	cmp	r3, #5
 8008b94:	d826      	bhi.n	8008be4 <UART_SetConfig+0x260>
 8008b96:	a201      	add	r2, pc, #4	; (adr r2, 8008b9c <UART_SetConfig+0x218>)
 8008b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9c:	08008bb5 	.word	0x08008bb5
 8008ba0:	08008bbd 	.word	0x08008bbd
 8008ba4:	08008bc5 	.word	0x08008bc5
 8008ba8:	08008bcd 	.word	0x08008bcd
 8008bac:	08008bd5 	.word	0x08008bd5
 8008bb0:	08008bdd 	.word	0x08008bdd
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bba:	e1b6      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e1b2      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008bc4:	2308      	movs	r3, #8
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e1ae      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008bcc:	2310      	movs	r3, #16
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e1aa      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008bd4:	2320      	movs	r3, #32
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e1a6      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008bdc:	2340      	movs	r3, #64	; 0x40
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e1a2      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008be4:	2380      	movs	r3, #128	; 0x80
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e19e      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4a35      	ldr	r2, [pc, #212]	; (8008cc8 <UART_SetConfig+0x344>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d130      	bne.n	8008c58 <UART_SetConfig+0x2d4>
 8008bf6:	4b31      	ldr	r3, [pc, #196]	; (8008cbc <UART_SetConfig+0x338>)
 8008bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	2b05      	cmp	r3, #5
 8008c00:	d826      	bhi.n	8008c50 <UART_SetConfig+0x2cc>
 8008c02:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <UART_SetConfig+0x284>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c21 	.word	0x08008c21
 8008c0c:	08008c29 	.word	0x08008c29
 8008c10:	08008c31 	.word	0x08008c31
 8008c14:	08008c39 	.word	0x08008c39
 8008c18:	08008c41 	.word	0x08008c41
 8008c1c:	08008c49 	.word	0x08008c49
 8008c20:	2300      	movs	r3, #0
 8008c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c26:	e180      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008c28:	2304      	movs	r3, #4
 8008c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2e:	e17c      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008c30:	2308      	movs	r3, #8
 8008c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c36:	e178      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008c38:	2310      	movs	r3, #16
 8008c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3e:	e174      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008c40:	2320      	movs	r3, #32
 8008c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c46:	e170      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008c48:	2340      	movs	r3, #64	; 0x40
 8008c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4e:	e16c      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008c50:	2380      	movs	r3, #128	; 0x80
 8008c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c56:	e168      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a1b      	ldr	r2, [pc, #108]	; (8008ccc <UART_SetConfig+0x348>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d142      	bne.n	8008ce8 <UART_SetConfig+0x364>
 8008c62:	4b16      	ldr	r3, [pc, #88]	; (8008cbc <UART_SetConfig+0x338>)
 8008c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	d838      	bhi.n	8008ce0 <UART_SetConfig+0x35c>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <UART_SetConfig+0x2f0>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008c8d 	.word	0x08008c8d
 8008c78:	08008c95 	.word	0x08008c95
 8008c7c:	08008c9d 	.word	0x08008c9d
 8008c80:	08008ca5 	.word	0x08008ca5
 8008c84:	08008cd1 	.word	0x08008cd1
 8008c88:	08008cd9 	.word	0x08008cd9
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c92:	e14a      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008c94:	2304      	movs	r3, #4
 8008c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9a:	e146      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e142      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008ca4:	2310      	movs	r3, #16
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e13e      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008cac:	cfff69f3 	.word	0xcfff69f3
 8008cb0:	58000c00 	.word	0x58000c00
 8008cb4:	11fff4ff 	.word	0x11fff4ff
 8008cb8:	40011000 	.word	0x40011000
 8008cbc:	58024400 	.word	0x58024400
 8008cc0:	40004400 	.word	0x40004400
 8008cc4:	40004800 	.word	0x40004800
 8008cc8:	40004c00 	.word	0x40004c00
 8008ccc:	40005000 	.word	0x40005000
 8008cd0:	2320      	movs	r3, #32
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd6:	e128      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008cd8:	2340      	movs	r3, #64	; 0x40
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cde:	e124      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008ce0:	2380      	movs	r3, #128	; 0x80
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce6:	e120      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4acb      	ldr	r2, [pc, #812]	; (800901c <UART_SetConfig+0x698>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d176      	bne.n	8008de0 <UART_SetConfig+0x45c>
 8008cf2:	4bcb      	ldr	r3, [pc, #812]	; (8009020 <UART_SetConfig+0x69c>)
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cfa:	2b28      	cmp	r3, #40	; 0x28
 8008cfc:	d86c      	bhi.n	8008dd8 <UART_SetConfig+0x454>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <UART_SetConfig+0x380>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008da9 	.word	0x08008da9
 8008d08:	08008dd9 	.word	0x08008dd9
 8008d0c:	08008dd9 	.word	0x08008dd9
 8008d10:	08008dd9 	.word	0x08008dd9
 8008d14:	08008dd9 	.word	0x08008dd9
 8008d18:	08008dd9 	.word	0x08008dd9
 8008d1c:	08008dd9 	.word	0x08008dd9
 8008d20:	08008dd9 	.word	0x08008dd9
 8008d24:	08008db1 	.word	0x08008db1
 8008d28:	08008dd9 	.word	0x08008dd9
 8008d2c:	08008dd9 	.word	0x08008dd9
 8008d30:	08008dd9 	.word	0x08008dd9
 8008d34:	08008dd9 	.word	0x08008dd9
 8008d38:	08008dd9 	.word	0x08008dd9
 8008d3c:	08008dd9 	.word	0x08008dd9
 8008d40:	08008dd9 	.word	0x08008dd9
 8008d44:	08008db9 	.word	0x08008db9
 8008d48:	08008dd9 	.word	0x08008dd9
 8008d4c:	08008dd9 	.word	0x08008dd9
 8008d50:	08008dd9 	.word	0x08008dd9
 8008d54:	08008dd9 	.word	0x08008dd9
 8008d58:	08008dd9 	.word	0x08008dd9
 8008d5c:	08008dd9 	.word	0x08008dd9
 8008d60:	08008dd9 	.word	0x08008dd9
 8008d64:	08008dc1 	.word	0x08008dc1
 8008d68:	08008dd9 	.word	0x08008dd9
 8008d6c:	08008dd9 	.word	0x08008dd9
 8008d70:	08008dd9 	.word	0x08008dd9
 8008d74:	08008dd9 	.word	0x08008dd9
 8008d78:	08008dd9 	.word	0x08008dd9
 8008d7c:	08008dd9 	.word	0x08008dd9
 8008d80:	08008dd9 	.word	0x08008dd9
 8008d84:	08008dc9 	.word	0x08008dc9
 8008d88:	08008dd9 	.word	0x08008dd9
 8008d8c:	08008dd9 	.word	0x08008dd9
 8008d90:	08008dd9 	.word	0x08008dd9
 8008d94:	08008dd9 	.word	0x08008dd9
 8008d98:	08008dd9 	.word	0x08008dd9
 8008d9c:	08008dd9 	.word	0x08008dd9
 8008da0:	08008dd9 	.word	0x08008dd9
 8008da4:	08008dd1 	.word	0x08008dd1
 8008da8:	2301      	movs	r3, #1
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dae:	e0bc      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008db0:	2304      	movs	r3, #4
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db6:	e0b8      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008db8:	2308      	movs	r3, #8
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dbe:	e0b4      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008dc0:	2310      	movs	r3, #16
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc6:	e0b0      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008dc8:	2320      	movs	r3, #32
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dce:	e0ac      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008dd0:	2340      	movs	r3, #64	; 0x40
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dd6:	e0a8      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008dd8:	2380      	movs	r3, #128	; 0x80
 8008dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dde:	e0a4      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a8f      	ldr	r2, [pc, #572]	; (8009024 <UART_SetConfig+0x6a0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d130      	bne.n	8008e4c <UART_SetConfig+0x4c8>
 8008dea:	4b8d      	ldr	r3, [pc, #564]	; (8009020 <UART_SetConfig+0x69c>)
 8008dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	2b05      	cmp	r3, #5
 8008df4:	d826      	bhi.n	8008e44 <UART_SetConfig+0x4c0>
 8008df6:	a201      	add	r2, pc, #4	; (adr r2, 8008dfc <UART_SetConfig+0x478>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008e15 	.word	0x08008e15
 8008e00:	08008e1d 	.word	0x08008e1d
 8008e04:	08008e25 	.word	0x08008e25
 8008e08:	08008e2d 	.word	0x08008e2d
 8008e0c:	08008e35 	.word	0x08008e35
 8008e10:	08008e3d 	.word	0x08008e3d
 8008e14:	2300      	movs	r3, #0
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1a:	e086      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008e1c:	2304      	movs	r3, #4
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e22:	e082      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008e24:	2308      	movs	r3, #8
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2a:	e07e      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008e2c:	2310      	movs	r3, #16
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e32:	e07a      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008e34:	2320      	movs	r3, #32
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3a:	e076      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008e3c:	2340      	movs	r3, #64	; 0x40
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e42:	e072      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008e44:	2380      	movs	r3, #128	; 0x80
 8008e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e4a:	e06e      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a75      	ldr	r2, [pc, #468]	; (8009028 <UART_SetConfig+0x6a4>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d130      	bne.n	8008eb8 <UART_SetConfig+0x534>
 8008e56:	4b72      	ldr	r3, [pc, #456]	; (8009020 <UART_SetConfig+0x69c>)
 8008e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	2b05      	cmp	r3, #5
 8008e60:	d826      	bhi.n	8008eb0 <UART_SetConfig+0x52c>
 8008e62:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <UART_SetConfig+0x4e4>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008e81 	.word	0x08008e81
 8008e6c:	08008e89 	.word	0x08008e89
 8008e70:	08008e91 	.word	0x08008e91
 8008e74:	08008e99 	.word	0x08008e99
 8008e78:	08008ea1 	.word	0x08008ea1
 8008e7c:	08008ea9 	.word	0x08008ea9
 8008e80:	2300      	movs	r3, #0
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e86:	e050      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008e88:	2304      	movs	r3, #4
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8e:	e04c      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008e90:	2308      	movs	r3, #8
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e96:	e048      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9e:	e044      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008ea0:	2320      	movs	r3, #32
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea6:	e040      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008ea8:	2340      	movs	r3, #64	; 0x40
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eae:	e03c      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008eb0:	2380      	movs	r3, #128	; 0x80
 8008eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eb6:	e038      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a5b      	ldr	r2, [pc, #364]	; (800902c <UART_SetConfig+0x6a8>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d130      	bne.n	8008f24 <UART_SetConfig+0x5a0>
 8008ec2:	4b57      	ldr	r3, [pc, #348]	; (8009020 <UART_SetConfig+0x69c>)
 8008ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	2b05      	cmp	r3, #5
 8008ecc:	d826      	bhi.n	8008f1c <UART_SetConfig+0x598>
 8008ece:	a201      	add	r2, pc, #4	; (adr r2, 8008ed4 <UART_SetConfig+0x550>)
 8008ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed4:	08008eed 	.word	0x08008eed
 8008ed8:	08008ef5 	.word	0x08008ef5
 8008edc:	08008efd 	.word	0x08008efd
 8008ee0:	08008f05 	.word	0x08008f05
 8008ee4:	08008f0d 	.word	0x08008f0d
 8008ee8:	08008f15 	.word	0x08008f15
 8008eec:	2302      	movs	r3, #2
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef2:	e01a      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008ef4:	2304      	movs	r3, #4
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efa:	e016      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008efc:	2308      	movs	r3, #8
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f02:	e012      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008f04:	2310      	movs	r3, #16
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0a:	e00e      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008f0c:	2320      	movs	r3, #32
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f12:	e00a      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008f14:	2340      	movs	r3, #64	; 0x40
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f1a:	e006      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008f1c:	2380      	movs	r3, #128	; 0x80
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f22:	e002      	b.n	8008f2a <UART_SetConfig+0x5a6>
 8008f24:	2380      	movs	r3, #128	; 0x80
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a3f      	ldr	r2, [pc, #252]	; (800902c <UART_SetConfig+0x6a8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	f040 80f8 	bne.w	8009126 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f3a:	2b20      	cmp	r3, #32
 8008f3c:	dc46      	bgt.n	8008fcc <UART_SetConfig+0x648>
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	f2c0 8082 	blt.w	8009048 <UART_SetConfig+0x6c4>
 8008f44:	3b02      	subs	r3, #2
 8008f46:	2b1e      	cmp	r3, #30
 8008f48:	d87e      	bhi.n	8009048 <UART_SetConfig+0x6c4>
 8008f4a:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <UART_SetConfig+0x5cc>)
 8008f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f50:	08008fd3 	.word	0x08008fd3
 8008f54:	08009049 	.word	0x08009049
 8008f58:	08008fdb 	.word	0x08008fdb
 8008f5c:	08009049 	.word	0x08009049
 8008f60:	08009049 	.word	0x08009049
 8008f64:	08009049 	.word	0x08009049
 8008f68:	08008feb 	.word	0x08008feb
 8008f6c:	08009049 	.word	0x08009049
 8008f70:	08009049 	.word	0x08009049
 8008f74:	08009049 	.word	0x08009049
 8008f78:	08009049 	.word	0x08009049
 8008f7c:	08009049 	.word	0x08009049
 8008f80:	08009049 	.word	0x08009049
 8008f84:	08009049 	.word	0x08009049
 8008f88:	08008ffb 	.word	0x08008ffb
 8008f8c:	08009049 	.word	0x08009049
 8008f90:	08009049 	.word	0x08009049
 8008f94:	08009049 	.word	0x08009049
 8008f98:	08009049 	.word	0x08009049
 8008f9c:	08009049 	.word	0x08009049
 8008fa0:	08009049 	.word	0x08009049
 8008fa4:	08009049 	.word	0x08009049
 8008fa8:	08009049 	.word	0x08009049
 8008fac:	08009049 	.word	0x08009049
 8008fb0:	08009049 	.word	0x08009049
 8008fb4:	08009049 	.word	0x08009049
 8008fb8:	08009049 	.word	0x08009049
 8008fbc:	08009049 	.word	0x08009049
 8008fc0:	08009049 	.word	0x08009049
 8008fc4:	08009049 	.word	0x08009049
 8008fc8:	0800903b 	.word	0x0800903b
 8008fcc:	2b40      	cmp	r3, #64	; 0x40
 8008fce:	d037      	beq.n	8009040 <UART_SetConfig+0x6bc>
 8008fd0:	e03a      	b.n	8009048 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008fd2:	f7fd fde9 	bl	8006ba8 <HAL_RCCEx_GetD3PCLK1Freq>
 8008fd6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fd8:	e03c      	b.n	8009054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fd fdf8 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe8:	e034      	b.n	8009054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fea:	f107 0318 	add.w	r3, r7, #24
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fd ff44 	bl	8006e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff8:	e02c      	b.n	8009054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ffa:	4b09      	ldr	r3, [pc, #36]	; (8009020 <UART_SetConfig+0x69c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0320 	and.w	r3, r3, #32
 8009002:	2b00      	cmp	r3, #0
 8009004:	d016      	beq.n	8009034 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009006:	4b06      	ldr	r3, [pc, #24]	; (8009020 <UART_SetConfig+0x69c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	08db      	lsrs	r3, r3, #3
 800900c:	f003 0303 	and.w	r3, r3, #3
 8009010:	4a07      	ldr	r2, [pc, #28]	; (8009030 <UART_SetConfig+0x6ac>)
 8009012:	fa22 f303 	lsr.w	r3, r2, r3
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009018:	e01c      	b.n	8009054 <UART_SetConfig+0x6d0>
 800901a:	bf00      	nop
 800901c:	40011400 	.word	0x40011400
 8009020:	58024400 	.word	0x58024400
 8009024:	40007800 	.word	0x40007800
 8009028:	40007c00 	.word	0x40007c00
 800902c:	58000c00 	.word	0x58000c00
 8009030:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009034:	4b9d      	ldr	r3, [pc, #628]	; (80092ac <UART_SetConfig+0x928>)
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009038:	e00c      	b.n	8009054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800903a:	4b9d      	ldr	r3, [pc, #628]	; (80092b0 <UART_SetConfig+0x92c>)
 800903c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800903e:	e009      	b.n	8009054 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009046:	e005      	b.n	8009054 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800904c:	2301      	movs	r3, #1
 800904e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009052:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009056:	2b00      	cmp	r3, #0
 8009058:	f000 81de 	beq.w	8009418 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009060:	4a94      	ldr	r2, [pc, #592]	; (80092b4 <UART_SetConfig+0x930>)
 8009062:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009066:	461a      	mov	r2, r3
 8009068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906a:	fbb3 f3f2 	udiv	r3, r3, r2
 800906e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	4613      	mov	r3, r2
 8009076:	005b      	lsls	r3, r3, #1
 8009078:	4413      	add	r3, r2
 800907a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800907c:	429a      	cmp	r2, r3
 800907e:	d305      	bcc.n	800908c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009088:	429a      	cmp	r2, r3
 800908a:	d903      	bls.n	8009094 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009092:	e1c1      	b.n	8009418 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009096:	2200      	movs	r2, #0
 8009098:	60bb      	str	r3, [r7, #8]
 800909a:	60fa      	str	r2, [r7, #12]
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a0:	4a84      	ldr	r2, [pc, #528]	; (80092b4 <UART_SetConfig+0x930>)
 80090a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2200      	movs	r2, #0
 80090aa:	603b      	str	r3, [r7, #0]
 80090ac:	607a      	str	r2, [r7, #4]
 80090ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090b6:	f7f7 f96b 	bl	8000390 <__aeabi_uldivmod>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4610      	mov	r0, r2
 80090c0:	4619      	mov	r1, r3
 80090c2:	f04f 0200 	mov.w	r2, #0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	020b      	lsls	r3, r1, #8
 80090cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090d0:	0202      	lsls	r2, r0, #8
 80090d2:	6979      	ldr	r1, [r7, #20]
 80090d4:	6849      	ldr	r1, [r1, #4]
 80090d6:	0849      	lsrs	r1, r1, #1
 80090d8:	2000      	movs	r0, #0
 80090da:	460c      	mov	r4, r1
 80090dc:	4605      	mov	r5, r0
 80090de:	eb12 0804 	adds.w	r8, r2, r4
 80090e2:	eb43 0905 	adc.w	r9, r3, r5
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	469a      	mov	sl, r3
 80090ee:	4693      	mov	fp, r2
 80090f0:	4652      	mov	r2, sl
 80090f2:	465b      	mov	r3, fp
 80090f4:	4640      	mov	r0, r8
 80090f6:	4649      	mov	r1, r9
 80090f8:	f7f7 f94a 	bl	8000390 <__aeabi_uldivmod>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	4613      	mov	r3, r2
 8009102:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800910a:	d308      	bcc.n	800911e <UART_SetConfig+0x79a>
 800910c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009112:	d204      	bcs.n	800911e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800911a:	60da      	str	r2, [r3, #12]
 800911c:	e17c      	b.n	8009418 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009124:	e178      	b.n	8009418 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	69db      	ldr	r3, [r3, #28]
 800912a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800912e:	f040 80c5 	bne.w	80092bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009132:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009136:	2b20      	cmp	r3, #32
 8009138:	dc48      	bgt.n	80091cc <UART_SetConfig+0x848>
 800913a:	2b00      	cmp	r3, #0
 800913c:	db7b      	blt.n	8009236 <UART_SetConfig+0x8b2>
 800913e:	2b20      	cmp	r3, #32
 8009140:	d879      	bhi.n	8009236 <UART_SetConfig+0x8b2>
 8009142:	a201      	add	r2, pc, #4	; (adr r2, 8009148 <UART_SetConfig+0x7c4>)
 8009144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009148:	080091d3 	.word	0x080091d3
 800914c:	080091db 	.word	0x080091db
 8009150:	08009237 	.word	0x08009237
 8009154:	08009237 	.word	0x08009237
 8009158:	080091e3 	.word	0x080091e3
 800915c:	08009237 	.word	0x08009237
 8009160:	08009237 	.word	0x08009237
 8009164:	08009237 	.word	0x08009237
 8009168:	080091f3 	.word	0x080091f3
 800916c:	08009237 	.word	0x08009237
 8009170:	08009237 	.word	0x08009237
 8009174:	08009237 	.word	0x08009237
 8009178:	08009237 	.word	0x08009237
 800917c:	08009237 	.word	0x08009237
 8009180:	08009237 	.word	0x08009237
 8009184:	08009237 	.word	0x08009237
 8009188:	08009203 	.word	0x08009203
 800918c:	08009237 	.word	0x08009237
 8009190:	08009237 	.word	0x08009237
 8009194:	08009237 	.word	0x08009237
 8009198:	08009237 	.word	0x08009237
 800919c:	08009237 	.word	0x08009237
 80091a0:	08009237 	.word	0x08009237
 80091a4:	08009237 	.word	0x08009237
 80091a8:	08009237 	.word	0x08009237
 80091ac:	08009237 	.word	0x08009237
 80091b0:	08009237 	.word	0x08009237
 80091b4:	08009237 	.word	0x08009237
 80091b8:	08009237 	.word	0x08009237
 80091bc:	08009237 	.word	0x08009237
 80091c0:	08009237 	.word	0x08009237
 80091c4:	08009237 	.word	0x08009237
 80091c8:	08009229 	.word	0x08009229
 80091cc:	2b40      	cmp	r3, #64	; 0x40
 80091ce:	d02e      	beq.n	800922e <UART_SetConfig+0x8aa>
 80091d0:	e031      	b.n	8009236 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091d2:	f7fc f8a5 	bl	8005320 <HAL_RCC_GetPCLK1Freq>
 80091d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091d8:	e033      	b.n	8009242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091da:	f7fc f8b7 	bl	800534c <HAL_RCC_GetPCLK2Freq>
 80091de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091e0:	e02f      	b.n	8009242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fd fcf4 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f0:	e027      	b.n	8009242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091f2:	f107 0318 	add.w	r3, r7, #24
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fd fe40 	bl	8006e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091fc:	69fb      	ldr	r3, [r7, #28]
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009200:	e01f      	b.n	8009242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009202:	4b2d      	ldr	r3, [pc, #180]	; (80092b8 <UART_SetConfig+0x934>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0320 	and.w	r3, r3, #32
 800920a:	2b00      	cmp	r3, #0
 800920c:	d009      	beq.n	8009222 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800920e:	4b2a      	ldr	r3, [pc, #168]	; (80092b8 <UART_SetConfig+0x934>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	08db      	lsrs	r3, r3, #3
 8009214:	f003 0303 	and.w	r3, r3, #3
 8009218:	4a24      	ldr	r2, [pc, #144]	; (80092ac <UART_SetConfig+0x928>)
 800921a:	fa22 f303 	lsr.w	r3, r2, r3
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009220:	e00f      	b.n	8009242 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009222:	4b22      	ldr	r3, [pc, #136]	; (80092ac <UART_SetConfig+0x928>)
 8009224:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009226:	e00c      	b.n	8009242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009228:	4b21      	ldr	r3, [pc, #132]	; (80092b0 <UART_SetConfig+0x92c>)
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800922c:	e009      	b.n	8009242 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800922e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009234:	e005      	b.n	8009242 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 80e7 	beq.w	8009418 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924e:	4a19      	ldr	r2, [pc, #100]	; (80092b4 <UART_SetConfig+0x930>)
 8009250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009254:	461a      	mov	r2, r3
 8009256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009258:	fbb3 f3f2 	udiv	r3, r3, r2
 800925c:	005a      	lsls	r2, r3, #1
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	085b      	lsrs	r3, r3, #1
 8009264:	441a      	add	r2, r3
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	fbb2 f3f3 	udiv	r3, r2, r3
 800926e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009272:	2b0f      	cmp	r3, #15
 8009274:	d916      	bls.n	80092a4 <UART_SetConfig+0x920>
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800927c:	d212      	bcs.n	80092a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800927e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009280:	b29b      	uxth	r3, r3
 8009282:	f023 030f 	bic.w	r3, r3, #15
 8009286:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	085b      	lsrs	r3, r3, #1
 800928c:	b29b      	uxth	r3, r3
 800928e:	f003 0307 	and.w	r3, r3, #7
 8009292:	b29a      	uxth	r2, r3
 8009294:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009296:	4313      	orrs	r3, r2
 8009298:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80092a0:	60da      	str	r2, [r3, #12]
 80092a2:	e0b9      	b.n	8009418 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80092aa:	e0b5      	b.n	8009418 <UART_SetConfig+0xa94>
 80092ac:	03d09000 	.word	0x03d09000
 80092b0:	003d0900 	.word	0x003d0900
 80092b4:	0800c4e8 	.word	0x0800c4e8
 80092b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80092bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092c0:	2b20      	cmp	r3, #32
 80092c2:	dc49      	bgt.n	8009358 <UART_SetConfig+0x9d4>
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	db7c      	blt.n	80093c2 <UART_SetConfig+0xa3e>
 80092c8:	2b20      	cmp	r3, #32
 80092ca:	d87a      	bhi.n	80093c2 <UART_SetConfig+0xa3e>
 80092cc:	a201      	add	r2, pc, #4	; (adr r2, 80092d4 <UART_SetConfig+0x950>)
 80092ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d2:	bf00      	nop
 80092d4:	0800935f 	.word	0x0800935f
 80092d8:	08009367 	.word	0x08009367
 80092dc:	080093c3 	.word	0x080093c3
 80092e0:	080093c3 	.word	0x080093c3
 80092e4:	0800936f 	.word	0x0800936f
 80092e8:	080093c3 	.word	0x080093c3
 80092ec:	080093c3 	.word	0x080093c3
 80092f0:	080093c3 	.word	0x080093c3
 80092f4:	0800937f 	.word	0x0800937f
 80092f8:	080093c3 	.word	0x080093c3
 80092fc:	080093c3 	.word	0x080093c3
 8009300:	080093c3 	.word	0x080093c3
 8009304:	080093c3 	.word	0x080093c3
 8009308:	080093c3 	.word	0x080093c3
 800930c:	080093c3 	.word	0x080093c3
 8009310:	080093c3 	.word	0x080093c3
 8009314:	0800938f 	.word	0x0800938f
 8009318:	080093c3 	.word	0x080093c3
 800931c:	080093c3 	.word	0x080093c3
 8009320:	080093c3 	.word	0x080093c3
 8009324:	080093c3 	.word	0x080093c3
 8009328:	080093c3 	.word	0x080093c3
 800932c:	080093c3 	.word	0x080093c3
 8009330:	080093c3 	.word	0x080093c3
 8009334:	080093c3 	.word	0x080093c3
 8009338:	080093c3 	.word	0x080093c3
 800933c:	080093c3 	.word	0x080093c3
 8009340:	080093c3 	.word	0x080093c3
 8009344:	080093c3 	.word	0x080093c3
 8009348:	080093c3 	.word	0x080093c3
 800934c:	080093c3 	.word	0x080093c3
 8009350:	080093c3 	.word	0x080093c3
 8009354:	080093b5 	.word	0x080093b5
 8009358:	2b40      	cmp	r3, #64	; 0x40
 800935a:	d02e      	beq.n	80093ba <UART_SetConfig+0xa36>
 800935c:	e031      	b.n	80093c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800935e:	f7fb ffdf 	bl	8005320 <HAL_RCC_GetPCLK1Freq>
 8009362:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009364:	e033      	b.n	80093ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009366:	f7fb fff1 	bl	800534c <HAL_RCC_GetPCLK2Freq>
 800936a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800936c:	e02f      	b.n	80093ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800936e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009372:	4618      	mov	r0, r3
 8009374:	f7fd fc2e 	bl	8006bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800937c:	e027      	b.n	80093ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800937e:	f107 0318 	add.w	r3, r7, #24
 8009382:	4618      	mov	r0, r3
 8009384:	f7fd fd7a 	bl	8006e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800938c:	e01f      	b.n	80093ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800938e:	4b2d      	ldr	r3, [pc, #180]	; (8009444 <UART_SetConfig+0xac0>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0320 	and.w	r3, r3, #32
 8009396:	2b00      	cmp	r3, #0
 8009398:	d009      	beq.n	80093ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800939a:	4b2a      	ldr	r3, [pc, #168]	; (8009444 <UART_SetConfig+0xac0>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	08db      	lsrs	r3, r3, #3
 80093a0:	f003 0303 	and.w	r3, r3, #3
 80093a4:	4a28      	ldr	r2, [pc, #160]	; (8009448 <UART_SetConfig+0xac4>)
 80093a6:	fa22 f303 	lsr.w	r3, r2, r3
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093ac:	e00f      	b.n	80093ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80093ae:	4b26      	ldr	r3, [pc, #152]	; (8009448 <UART_SetConfig+0xac4>)
 80093b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b2:	e00c      	b.n	80093ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093b4:	4b25      	ldr	r3, [pc, #148]	; (800944c <UART_SetConfig+0xac8>)
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b8:	e009      	b.n	80093ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093c0:	e005      	b.n	80093ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80093cc:	bf00      	nop
    }

    if (pclk != 0U)
 80093ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d021      	beq.n	8009418 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d8:	4a1d      	ldr	r2, [pc, #116]	; (8009450 <UART_SetConfig+0xacc>)
 80093da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093de:	461a      	mov	r2, r3
 80093e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	085b      	lsrs	r3, r3, #1
 80093ec:	441a      	add	r2, r3
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fa:	2b0f      	cmp	r3, #15
 80093fc:	d909      	bls.n	8009412 <UART_SetConfig+0xa8e>
 80093fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009404:	d205      	bcs.n	8009412 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009408:	b29a      	uxth	r2, r3
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60da      	str	r2, [r3, #12]
 8009410:	e002      	b.n	8009418 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2201      	movs	r2, #1
 800941c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	2201      	movs	r2, #1
 8009424:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	2200      	movs	r2, #0
 800942c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	2200      	movs	r2, #0
 8009432:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009434:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009438:	4618      	mov	r0, r3
 800943a:	3748      	adds	r7, #72	; 0x48
 800943c:	46bd      	mov	sp, r7
 800943e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009442:	bf00      	nop
 8009444:	58024400 	.word	0x58024400
 8009448:	03d09000 	.word	0x03d09000
 800944c:	003d0900 	.word	0x003d0900
 8009450:	0800c4e8 	.word	0x0800c4e8

08009454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009460:	f003 0301 	and.w	r3, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00a      	beq.n	800947e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	430a      	orrs	r2, r1
 800947c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009482:	f003 0302 	and.w	r3, r3, #2
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	430a      	orrs	r2, r1
 800949e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d00a      	beq.n	80094c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c6:	f003 0308 	and.w	r3, r3, #8
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00a      	beq.n	80094e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	430a      	orrs	r2, r1
 80094e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e8:	f003 0310 	and.w	r3, r3, #16
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00a      	beq.n	8009506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	430a      	orrs	r2, r1
 8009504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950a:	f003 0320 	and.w	r3, r3, #32
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00a      	beq.n	8009528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	430a      	orrs	r2, r1
 8009526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009530:	2b00      	cmp	r3, #0
 8009532:	d01a      	beq.n	800956a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009552:	d10a      	bne.n	800956a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800956e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00a      	beq.n	800958c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	430a      	orrs	r2, r1
 800958a:	605a      	str	r2, [r3, #4]
  }
}
 800958c:	bf00      	nop
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af02      	add	r7, sp, #8
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80095a8:	f7f8 fa90 	bl	8001acc <HAL_GetTick>
 80095ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d10e      	bne.n	80095da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f82f 	bl	800962e <UART_WaitOnFlagUntilTimeout>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e025      	b.n	8009626 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0304 	and.w	r3, r3, #4
 80095e4:	2b04      	cmp	r3, #4
 80095e6:	d10e      	bne.n	8009606 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2200      	movs	r2, #0
 80095f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f819 	bl	800962e <UART_WaitOnFlagUntilTimeout>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e00f      	b.n	8009626 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2220      	movs	r2, #32
 800960a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2220      	movs	r2, #32
 8009612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2200      	movs	r2, #0
 800961a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b09c      	sub	sp, #112	; 0x70
 8009632:	af00      	add	r7, sp, #0
 8009634:	60f8      	str	r0, [r7, #12]
 8009636:	60b9      	str	r1, [r7, #8]
 8009638:	603b      	str	r3, [r7, #0]
 800963a:	4613      	mov	r3, r2
 800963c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800963e:	e0a9      	b.n	8009794 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009646:	f000 80a5 	beq.w	8009794 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800964a:	f7f8 fa3f 	bl	8001acc <HAL_GetTick>
 800964e:	4602      	mov	r2, r0
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009656:	429a      	cmp	r2, r3
 8009658:	d302      	bcc.n	8009660 <UART_WaitOnFlagUntilTimeout+0x32>
 800965a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800965c:	2b00      	cmp	r3, #0
 800965e:	d140      	bne.n	80096e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800966e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009670:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009674:	667b      	str	r3, [r7, #100]	; 0x64
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800967e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009680:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009684:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800968c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e6      	bne.n	8009660 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3308      	adds	r3, #8
 8009698:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800969c:	e853 3f00 	ldrex	r3, [r3]
 80096a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a4:	f023 0301 	bic.w	r3, r3, #1
 80096a8:	663b      	str	r3, [r7, #96]	; 0x60
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	3308      	adds	r3, #8
 80096b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80096b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ba:	e841 2300 	strex	r3, r2, [r1]
 80096be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80096c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1e5      	bne.n	8009692 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2220      	movs	r2, #32
 80096d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80096de:	2303      	movs	r3, #3
 80096e0:	e069      	b.n	80097b6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0304 	and.w	r3, r3, #4
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d051      	beq.n	8009794 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096fe:	d149      	bne.n	8009794 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009708:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009712:	e853 3f00 	ldrex	r3, [r3]
 8009716:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800971e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	461a      	mov	r2, r3
 8009726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009728:	637b      	str	r3, [r7, #52]	; 0x34
 800972a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800972e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009730:	e841 2300 	strex	r3, r2, [r1]
 8009734:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1e6      	bne.n	800970a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3308      	adds	r3, #8
 8009742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	613b      	str	r3, [r7, #16]
   return(result);
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	f023 0301 	bic.w	r3, r3, #1
 8009752:	66bb      	str	r3, [r7, #104]	; 0x68
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	3308      	adds	r3, #8
 800975a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800975c:	623a      	str	r2, [r7, #32]
 800975e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	69f9      	ldr	r1, [r7, #28]
 8009762:	6a3a      	ldr	r2, [r7, #32]
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	61bb      	str	r3, [r7, #24]
   return(result);
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e5      	bne.n	800973c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	2220      	movs	r2, #32
 8009774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2220      	movs	r2, #32
 800977c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2220      	movs	r2, #32
 8009784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e010      	b.n	80097b6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	69da      	ldr	r2, [r3, #28]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	4013      	ands	r3, r2
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	bf0c      	ite	eq
 80097a4:	2301      	moveq	r3, #1
 80097a6:	2300      	movne	r3, #0
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	461a      	mov	r2, r3
 80097ac:	79fb      	ldrb	r3, [r7, #7]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	f43f af46 	beq.w	8009640 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3770      	adds	r7, #112	; 0x70
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097be:	b480      	push	{r7}
 80097c0:	b085      	sub	sp, #20
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d101      	bne.n	80097d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e027      	b.n	8009824 <HAL_UARTEx_DisableFifoMode+0x66>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2224      	movs	r2, #36	; 0x24
 80097e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	681a      	ldr	r2, [r3, #0]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f022 0201 	bic.w	r2, r2, #1
 80097fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009802:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2220      	movs	r2, #32
 8009816:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3714      	adds	r7, #20
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009840:	2b01      	cmp	r3, #1
 8009842:	d101      	bne.n	8009848 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009844:	2302      	movs	r3, #2
 8009846:	e02d      	b.n	80098a4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2224      	movs	r2, #36	; 0x24
 8009854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f022 0201 	bic.w	r2, r2, #1
 800986e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	430a      	orrs	r2, r1
 8009882:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f84f 	bl	8009928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2200      	movs	r2, #0
 800989e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d101      	bne.n	80098c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098c0:	2302      	movs	r3, #2
 80098c2:	e02d      	b.n	8009920 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2201      	movs	r2, #1
 80098c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2224      	movs	r2, #36	; 0x24
 80098d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0201 	bic.w	r2, r2, #1
 80098ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f811 	bl	8009928 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2220      	movs	r2, #32
 8009912:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800991e:	2300      	movs	r3, #0
}
 8009920:	4618      	mov	r0, r3
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009934:	2b00      	cmp	r3, #0
 8009936:	d108      	bne.n	800994a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009948:	e031      	b.n	80099ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800994a:	2310      	movs	r3, #16
 800994c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800994e:	2310      	movs	r3, #16
 8009950:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	0e5b      	lsrs	r3, r3, #25
 800995a:	b2db      	uxtb	r3, r3
 800995c:	f003 0307 	and.w	r3, r3, #7
 8009960:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	689b      	ldr	r3, [r3, #8]
 8009968:	0f5b      	lsrs	r3, r3, #29
 800996a:	b2db      	uxtb	r3, r3
 800996c:	f003 0307 	and.w	r3, r3, #7
 8009970:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009972:	7bbb      	ldrb	r3, [r7, #14]
 8009974:	7b3a      	ldrb	r2, [r7, #12]
 8009976:	4911      	ldr	r1, [pc, #68]	; (80099bc <UARTEx_SetNbDataToProcess+0x94>)
 8009978:	5c8a      	ldrb	r2, [r1, r2]
 800997a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800997e:	7b3a      	ldrb	r2, [r7, #12]
 8009980:	490f      	ldr	r1, [pc, #60]	; (80099c0 <UARTEx_SetNbDataToProcess+0x98>)
 8009982:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009984:	fb93 f3f2 	sdiv	r3, r3, r2
 8009988:	b29a      	uxth	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	7b7a      	ldrb	r2, [r7, #13]
 8009994:	4909      	ldr	r1, [pc, #36]	; (80099bc <UARTEx_SetNbDataToProcess+0x94>)
 8009996:	5c8a      	ldrb	r2, [r1, r2]
 8009998:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800999c:	7b7a      	ldrb	r2, [r7, #13]
 800999e:	4908      	ldr	r1, [pc, #32]	; (80099c0 <UARTEx_SetNbDataToProcess+0x98>)
 80099a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80099a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80099ae:	bf00      	nop
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
 80099ba:	bf00      	nop
 80099bc:	0800c500 	.word	0x0800c500
 80099c0:	0800c508 	.word	0x0800c508

080099c4 <__errno>:
 80099c4:	4b01      	ldr	r3, [pc, #4]	; (80099cc <__errno+0x8>)
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	4770      	bx	lr
 80099ca:	bf00      	nop
 80099cc:	24000010 	.word	0x24000010

080099d0 <__libc_init_array>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	4d0d      	ldr	r5, [pc, #52]	; (8009a08 <__libc_init_array+0x38>)
 80099d4:	4c0d      	ldr	r4, [pc, #52]	; (8009a0c <__libc_init_array+0x3c>)
 80099d6:	1b64      	subs	r4, r4, r5
 80099d8:	10a4      	asrs	r4, r4, #2
 80099da:	2600      	movs	r6, #0
 80099dc:	42a6      	cmp	r6, r4
 80099de:	d109      	bne.n	80099f4 <__libc_init_array+0x24>
 80099e0:	4d0b      	ldr	r5, [pc, #44]	; (8009a10 <__libc_init_array+0x40>)
 80099e2:	4c0c      	ldr	r4, [pc, #48]	; (8009a14 <__libc_init_array+0x44>)
 80099e4:	f002 fcaa 	bl	800c33c <_init>
 80099e8:	1b64      	subs	r4, r4, r5
 80099ea:	10a4      	asrs	r4, r4, #2
 80099ec:	2600      	movs	r6, #0
 80099ee:	42a6      	cmp	r6, r4
 80099f0:	d105      	bne.n	80099fe <__libc_init_array+0x2e>
 80099f2:	bd70      	pop	{r4, r5, r6, pc}
 80099f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80099f8:	4798      	blx	r3
 80099fa:	3601      	adds	r6, #1
 80099fc:	e7ee      	b.n	80099dc <__libc_init_array+0xc>
 80099fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a02:	4798      	blx	r3
 8009a04:	3601      	adds	r6, #1
 8009a06:	e7f2      	b.n	80099ee <__libc_init_array+0x1e>
 8009a08:	0800c8f4 	.word	0x0800c8f4
 8009a0c:	0800c8f4 	.word	0x0800c8f4
 8009a10:	0800c8f4 	.word	0x0800c8f4
 8009a14:	0800c8f8 	.word	0x0800c8f8

08009a18 <memcpy>:
 8009a18:	440a      	add	r2, r1
 8009a1a:	4291      	cmp	r1, r2
 8009a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a20:	d100      	bne.n	8009a24 <memcpy+0xc>
 8009a22:	4770      	bx	lr
 8009a24:	b510      	push	{r4, lr}
 8009a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a2e:	4291      	cmp	r1, r2
 8009a30:	d1f9      	bne.n	8009a26 <memcpy+0xe>
 8009a32:	bd10      	pop	{r4, pc}

08009a34 <memset>:
 8009a34:	4402      	add	r2, r0
 8009a36:	4603      	mov	r3, r0
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d100      	bne.n	8009a3e <memset+0xa>
 8009a3c:	4770      	bx	lr
 8009a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a42:	e7f9      	b.n	8009a38 <memset+0x4>

08009a44 <__cvt>:
 8009a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a46:	ed2d 8b02 	vpush	{d8}
 8009a4a:	eeb0 8b40 	vmov.f64	d8, d0
 8009a4e:	b085      	sub	sp, #20
 8009a50:	4617      	mov	r7, r2
 8009a52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009a54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009a56:	ee18 2a90 	vmov	r2, s17
 8009a5a:	f025 0520 	bic.w	r5, r5, #32
 8009a5e:	2a00      	cmp	r2, #0
 8009a60:	bfb6      	itet	lt
 8009a62:	222d      	movlt	r2, #45	; 0x2d
 8009a64:	2200      	movge	r2, #0
 8009a66:	eeb1 8b40 	vneglt.f64	d8, d0
 8009a6a:	2d46      	cmp	r5, #70	; 0x46
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	701a      	strb	r2, [r3, #0]
 8009a70:	d004      	beq.n	8009a7c <__cvt+0x38>
 8009a72:	2d45      	cmp	r5, #69	; 0x45
 8009a74:	d100      	bne.n	8009a78 <__cvt+0x34>
 8009a76:	3401      	adds	r4, #1
 8009a78:	2102      	movs	r1, #2
 8009a7a:	e000      	b.n	8009a7e <__cvt+0x3a>
 8009a7c:	2103      	movs	r1, #3
 8009a7e:	ab03      	add	r3, sp, #12
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	ab02      	add	r3, sp, #8
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	4622      	mov	r2, r4
 8009a88:	4633      	mov	r3, r6
 8009a8a:	eeb0 0b48 	vmov.f64	d0, d8
 8009a8e:	f000 fcc3 	bl	800a418 <_dtoa_r>
 8009a92:	2d47      	cmp	r5, #71	; 0x47
 8009a94:	d101      	bne.n	8009a9a <__cvt+0x56>
 8009a96:	07fb      	lsls	r3, r7, #31
 8009a98:	d51a      	bpl.n	8009ad0 <__cvt+0x8c>
 8009a9a:	2d46      	cmp	r5, #70	; 0x46
 8009a9c:	eb00 0204 	add.w	r2, r0, r4
 8009aa0:	d10c      	bne.n	8009abc <__cvt+0x78>
 8009aa2:	7803      	ldrb	r3, [r0, #0]
 8009aa4:	2b30      	cmp	r3, #48	; 0x30
 8009aa6:	d107      	bne.n	8009ab8 <__cvt+0x74>
 8009aa8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab0:	bf1c      	itt	ne
 8009ab2:	f1c4 0401 	rsbne	r4, r4, #1
 8009ab6:	6034      	strne	r4, [r6, #0]
 8009ab8:	6833      	ldr	r3, [r6, #0]
 8009aba:	441a      	add	r2, r3
 8009abc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac4:	bf08      	it	eq
 8009ac6:	9203      	streq	r2, [sp, #12]
 8009ac8:	2130      	movs	r1, #48	; 0x30
 8009aca:	9b03      	ldr	r3, [sp, #12]
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d307      	bcc.n	8009ae0 <__cvt+0x9c>
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ad4:	1a1b      	subs	r3, r3, r0
 8009ad6:	6013      	str	r3, [r2, #0]
 8009ad8:	b005      	add	sp, #20
 8009ada:	ecbd 8b02 	vpop	{d8}
 8009ade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ae0:	1c5c      	adds	r4, r3, #1
 8009ae2:	9403      	str	r4, [sp, #12]
 8009ae4:	7019      	strb	r1, [r3, #0]
 8009ae6:	e7f0      	b.n	8009aca <__cvt+0x86>

08009ae8 <__exponent>:
 8009ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aea:	4603      	mov	r3, r0
 8009aec:	2900      	cmp	r1, #0
 8009aee:	bfb8      	it	lt
 8009af0:	4249      	neglt	r1, r1
 8009af2:	f803 2b02 	strb.w	r2, [r3], #2
 8009af6:	bfb4      	ite	lt
 8009af8:	222d      	movlt	r2, #45	; 0x2d
 8009afa:	222b      	movge	r2, #43	; 0x2b
 8009afc:	2909      	cmp	r1, #9
 8009afe:	7042      	strb	r2, [r0, #1]
 8009b00:	dd2a      	ble.n	8009b58 <__exponent+0x70>
 8009b02:	f10d 0407 	add.w	r4, sp, #7
 8009b06:	46a4      	mov	ip, r4
 8009b08:	270a      	movs	r7, #10
 8009b0a:	46a6      	mov	lr, r4
 8009b0c:	460a      	mov	r2, r1
 8009b0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b12:	fb07 1516 	mls	r5, r7, r6, r1
 8009b16:	3530      	adds	r5, #48	; 0x30
 8009b18:	2a63      	cmp	r2, #99	; 0x63
 8009b1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b22:	4631      	mov	r1, r6
 8009b24:	dcf1      	bgt.n	8009b0a <__exponent+0x22>
 8009b26:	3130      	adds	r1, #48	; 0x30
 8009b28:	f1ae 0502 	sub.w	r5, lr, #2
 8009b2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b30:	1c44      	adds	r4, r0, #1
 8009b32:	4629      	mov	r1, r5
 8009b34:	4561      	cmp	r1, ip
 8009b36:	d30a      	bcc.n	8009b4e <__exponent+0x66>
 8009b38:	f10d 0209 	add.w	r2, sp, #9
 8009b3c:	eba2 020e 	sub.w	r2, r2, lr
 8009b40:	4565      	cmp	r5, ip
 8009b42:	bf88      	it	hi
 8009b44:	2200      	movhi	r2, #0
 8009b46:	4413      	add	r3, r2
 8009b48:	1a18      	subs	r0, r3, r0
 8009b4a:	b003      	add	sp, #12
 8009b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b56:	e7ed      	b.n	8009b34 <__exponent+0x4c>
 8009b58:	2330      	movs	r3, #48	; 0x30
 8009b5a:	3130      	adds	r1, #48	; 0x30
 8009b5c:	7083      	strb	r3, [r0, #2]
 8009b5e:	70c1      	strb	r1, [r0, #3]
 8009b60:	1d03      	adds	r3, r0, #4
 8009b62:	e7f1      	b.n	8009b48 <__exponent+0x60>
 8009b64:	0000      	movs	r0, r0
	...

08009b68 <_printf_float>:
 8009b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6c:	b08b      	sub	sp, #44	; 0x2c
 8009b6e:	460c      	mov	r4, r1
 8009b70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009b74:	4616      	mov	r6, r2
 8009b76:	461f      	mov	r7, r3
 8009b78:	4605      	mov	r5, r0
 8009b7a:	f001 fab1 	bl	800b0e0 <_localeconv_r>
 8009b7e:	f8d0 b000 	ldr.w	fp, [r0]
 8009b82:	4658      	mov	r0, fp
 8009b84:	f7f6 fbac 	bl	80002e0 <strlen>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	9308      	str	r3, [sp, #32]
 8009b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8009b90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009b94:	6822      	ldr	r2, [r4, #0]
 8009b96:	3307      	adds	r3, #7
 8009b98:	f023 0307 	bic.w	r3, r3, #7
 8009b9c:	f103 0108 	add.w	r1, r3, #8
 8009ba0:	f8c8 1000 	str.w	r1, [r8]
 8009ba4:	4682      	mov	sl, r0
 8009ba6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009baa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009bae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009e10 <_printf_float+0x2a8>
 8009bb2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009bb6:	eeb0 6bc0 	vabs.f64	d6, d0
 8009bba:	eeb4 6b47 	vcmp.f64	d6, d7
 8009bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc2:	dd24      	ble.n	8009c0e <_printf_float+0xa6>
 8009bc4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bcc:	d502      	bpl.n	8009bd4 <_printf_float+0x6c>
 8009bce:	232d      	movs	r3, #45	; 0x2d
 8009bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd4:	4b90      	ldr	r3, [pc, #576]	; (8009e18 <_printf_float+0x2b0>)
 8009bd6:	4891      	ldr	r0, [pc, #580]	; (8009e1c <_printf_float+0x2b4>)
 8009bd8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009bdc:	bf94      	ite	ls
 8009bde:	4698      	movls	r8, r3
 8009be0:	4680      	movhi	r8, r0
 8009be2:	2303      	movs	r3, #3
 8009be4:	6123      	str	r3, [r4, #16]
 8009be6:	f022 0204 	bic.w	r2, r2, #4
 8009bea:	2300      	movs	r3, #0
 8009bec:	6022      	str	r2, [r4, #0]
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	9700      	str	r7, [sp, #0]
 8009bf2:	4633      	mov	r3, r6
 8009bf4:	aa09      	add	r2, sp, #36	; 0x24
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4628      	mov	r0, r5
 8009bfa:	f000 f9d3 	bl	8009fa4 <_printf_common>
 8009bfe:	3001      	adds	r0, #1
 8009c00:	f040 808a 	bne.w	8009d18 <_printf_float+0x1b0>
 8009c04:	f04f 30ff 	mov.w	r0, #4294967295
 8009c08:	b00b      	add	sp, #44	; 0x2c
 8009c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0e:	eeb4 0b40 	vcmp.f64	d0, d0
 8009c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c16:	d709      	bvc.n	8009c2c <_printf_float+0xc4>
 8009c18:	ee10 3a90 	vmov	r3, s1
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	bfbc      	itt	lt
 8009c20:	232d      	movlt	r3, #45	; 0x2d
 8009c22:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c26:	487e      	ldr	r0, [pc, #504]	; (8009e20 <_printf_float+0x2b8>)
 8009c28:	4b7e      	ldr	r3, [pc, #504]	; (8009e24 <_printf_float+0x2bc>)
 8009c2a:	e7d5      	b.n	8009bd8 <_printf_float+0x70>
 8009c2c:	6863      	ldr	r3, [r4, #4]
 8009c2e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009c32:	9104      	str	r1, [sp, #16]
 8009c34:	1c59      	adds	r1, r3, #1
 8009c36:	d13c      	bne.n	8009cb2 <_printf_float+0x14a>
 8009c38:	2306      	movs	r3, #6
 8009c3a:	6063      	str	r3, [r4, #4]
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	9303      	str	r3, [sp, #12]
 8009c40:	ab08      	add	r3, sp, #32
 8009c42:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009c46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c4a:	ab07      	add	r3, sp, #28
 8009c4c:	6861      	ldr	r1, [r4, #4]
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	6022      	str	r2, [r4, #0]
 8009c52:	f10d 031b 	add.w	r3, sp, #27
 8009c56:	4628      	mov	r0, r5
 8009c58:	f7ff fef4 	bl	8009a44 <__cvt>
 8009c5c:	9b04      	ldr	r3, [sp, #16]
 8009c5e:	9907      	ldr	r1, [sp, #28]
 8009c60:	2b47      	cmp	r3, #71	; 0x47
 8009c62:	4680      	mov	r8, r0
 8009c64:	d108      	bne.n	8009c78 <_printf_float+0x110>
 8009c66:	1cc8      	adds	r0, r1, #3
 8009c68:	db02      	blt.n	8009c70 <_printf_float+0x108>
 8009c6a:	6863      	ldr	r3, [r4, #4]
 8009c6c:	4299      	cmp	r1, r3
 8009c6e:	dd41      	ble.n	8009cf4 <_printf_float+0x18c>
 8009c70:	f1a9 0902 	sub.w	r9, r9, #2
 8009c74:	fa5f f989 	uxtb.w	r9, r9
 8009c78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c7c:	d820      	bhi.n	8009cc0 <_printf_float+0x158>
 8009c7e:	3901      	subs	r1, #1
 8009c80:	464a      	mov	r2, r9
 8009c82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c86:	9107      	str	r1, [sp, #28]
 8009c88:	f7ff ff2e 	bl	8009ae8 <__exponent>
 8009c8c:	9a08      	ldr	r2, [sp, #32]
 8009c8e:	9004      	str	r0, [sp, #16]
 8009c90:	1813      	adds	r3, r2, r0
 8009c92:	2a01      	cmp	r2, #1
 8009c94:	6123      	str	r3, [r4, #16]
 8009c96:	dc02      	bgt.n	8009c9e <_printf_float+0x136>
 8009c98:	6822      	ldr	r2, [r4, #0]
 8009c9a:	07d2      	lsls	r2, r2, #31
 8009c9c:	d501      	bpl.n	8009ca2 <_printf_float+0x13a>
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	6123      	str	r3, [r4, #16]
 8009ca2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d0a2      	beq.n	8009bf0 <_printf_float+0x88>
 8009caa:	232d      	movs	r3, #45	; 0x2d
 8009cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cb0:	e79e      	b.n	8009bf0 <_printf_float+0x88>
 8009cb2:	9904      	ldr	r1, [sp, #16]
 8009cb4:	2947      	cmp	r1, #71	; 0x47
 8009cb6:	d1c1      	bne.n	8009c3c <_printf_float+0xd4>
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1bf      	bne.n	8009c3c <_printf_float+0xd4>
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	e7bc      	b.n	8009c3a <_printf_float+0xd2>
 8009cc0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009cc4:	d118      	bne.n	8009cf8 <_printf_float+0x190>
 8009cc6:	2900      	cmp	r1, #0
 8009cc8:	6863      	ldr	r3, [r4, #4]
 8009cca:	dd0b      	ble.n	8009ce4 <_printf_float+0x17c>
 8009ccc:	6121      	str	r1, [r4, #16]
 8009cce:	b913      	cbnz	r3, 8009cd6 <_printf_float+0x16e>
 8009cd0:	6822      	ldr	r2, [r4, #0]
 8009cd2:	07d0      	lsls	r0, r2, #31
 8009cd4:	d502      	bpl.n	8009cdc <_printf_float+0x174>
 8009cd6:	3301      	adds	r3, #1
 8009cd8:	440b      	add	r3, r1
 8009cda:	6123      	str	r3, [r4, #16]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	e7de      	b.n	8009ca2 <_printf_float+0x13a>
 8009ce4:	b913      	cbnz	r3, 8009cec <_printf_float+0x184>
 8009ce6:	6822      	ldr	r2, [r4, #0]
 8009ce8:	07d2      	lsls	r2, r2, #31
 8009cea:	d501      	bpl.n	8009cf0 <_printf_float+0x188>
 8009cec:	3302      	adds	r3, #2
 8009cee:	e7f4      	b.n	8009cda <_printf_float+0x172>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e7f2      	b.n	8009cda <_printf_float+0x172>
 8009cf4:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009cf8:	9b08      	ldr	r3, [sp, #32]
 8009cfa:	4299      	cmp	r1, r3
 8009cfc:	db05      	blt.n	8009d0a <_printf_float+0x1a2>
 8009cfe:	6823      	ldr	r3, [r4, #0]
 8009d00:	6121      	str	r1, [r4, #16]
 8009d02:	07d8      	lsls	r0, r3, #31
 8009d04:	d5ea      	bpl.n	8009cdc <_printf_float+0x174>
 8009d06:	1c4b      	adds	r3, r1, #1
 8009d08:	e7e7      	b.n	8009cda <_printf_float+0x172>
 8009d0a:	2900      	cmp	r1, #0
 8009d0c:	bfd4      	ite	le
 8009d0e:	f1c1 0202 	rsble	r2, r1, #2
 8009d12:	2201      	movgt	r2, #1
 8009d14:	4413      	add	r3, r2
 8009d16:	e7e0      	b.n	8009cda <_printf_float+0x172>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	055a      	lsls	r2, r3, #21
 8009d1c:	d407      	bmi.n	8009d2e <_printf_float+0x1c6>
 8009d1e:	6923      	ldr	r3, [r4, #16]
 8009d20:	4642      	mov	r2, r8
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	d12a      	bne.n	8009d82 <_printf_float+0x21a>
 8009d2c:	e76a      	b.n	8009c04 <_printf_float+0x9c>
 8009d2e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009d32:	f240 80e2 	bls.w	8009efa <_printf_float+0x392>
 8009d36:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009d3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d42:	d133      	bne.n	8009dac <_printf_float+0x244>
 8009d44:	4a38      	ldr	r2, [pc, #224]	; (8009e28 <_printf_float+0x2c0>)
 8009d46:	2301      	movs	r3, #1
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	f43f af58 	beq.w	8009c04 <_printf_float+0x9c>
 8009d54:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	db02      	blt.n	8009d62 <_printf_float+0x1fa>
 8009d5c:	6823      	ldr	r3, [r4, #0]
 8009d5e:	07d8      	lsls	r0, r3, #31
 8009d60:	d50f      	bpl.n	8009d82 <_printf_float+0x21a>
 8009d62:	4653      	mov	r3, sl
 8009d64:	465a      	mov	r2, fp
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f43f af49 	beq.w	8009c04 <_printf_float+0x9c>
 8009d72:	f04f 0800 	mov.w	r8, #0
 8009d76:	f104 091a 	add.w	r9, r4, #26
 8009d7a:	9b08      	ldr	r3, [sp, #32]
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	4543      	cmp	r3, r8
 8009d80:	dc09      	bgt.n	8009d96 <_printf_float+0x22e>
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	079b      	lsls	r3, r3, #30
 8009d86:	f100 8108 	bmi.w	8009f9a <_printf_float+0x432>
 8009d8a:	68e0      	ldr	r0, [r4, #12]
 8009d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d8e:	4298      	cmp	r0, r3
 8009d90:	bfb8      	it	lt
 8009d92:	4618      	movlt	r0, r3
 8009d94:	e738      	b.n	8009c08 <_printf_float+0xa0>
 8009d96:	2301      	movs	r3, #1
 8009d98:	464a      	mov	r2, r9
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b8      	blx	r7
 8009da0:	3001      	adds	r0, #1
 8009da2:	f43f af2f 	beq.w	8009c04 <_printf_float+0x9c>
 8009da6:	f108 0801 	add.w	r8, r8, #1
 8009daa:	e7e6      	b.n	8009d7a <_printf_float+0x212>
 8009dac:	9b07      	ldr	r3, [sp, #28]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	dc3c      	bgt.n	8009e2c <_printf_float+0x2c4>
 8009db2:	4a1d      	ldr	r2, [pc, #116]	; (8009e28 <_printf_float+0x2c0>)
 8009db4:	2301      	movs	r3, #1
 8009db6:	4631      	mov	r1, r6
 8009db8:	4628      	mov	r0, r5
 8009dba:	47b8      	blx	r7
 8009dbc:	3001      	adds	r0, #1
 8009dbe:	f43f af21 	beq.w	8009c04 <_printf_float+0x9c>
 8009dc2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	d102      	bne.n	8009dd0 <_printf_float+0x268>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	07d9      	lsls	r1, r3, #31
 8009dce:	d5d8      	bpl.n	8009d82 <_printf_float+0x21a>
 8009dd0:	4653      	mov	r3, sl
 8009dd2:	465a      	mov	r2, fp
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	47b8      	blx	r7
 8009dda:	3001      	adds	r0, #1
 8009ddc:	f43f af12 	beq.w	8009c04 <_printf_float+0x9c>
 8009de0:	f04f 0900 	mov.w	r9, #0
 8009de4:	f104 0a1a 	add.w	sl, r4, #26
 8009de8:	9b07      	ldr	r3, [sp, #28]
 8009dea:	425b      	negs	r3, r3
 8009dec:	454b      	cmp	r3, r9
 8009dee:	dc01      	bgt.n	8009df4 <_printf_float+0x28c>
 8009df0:	9b08      	ldr	r3, [sp, #32]
 8009df2:	e795      	b.n	8009d20 <_printf_float+0x1b8>
 8009df4:	2301      	movs	r3, #1
 8009df6:	4652      	mov	r2, sl
 8009df8:	4631      	mov	r1, r6
 8009dfa:	4628      	mov	r0, r5
 8009dfc:	47b8      	blx	r7
 8009dfe:	3001      	adds	r0, #1
 8009e00:	f43f af00 	beq.w	8009c04 <_printf_float+0x9c>
 8009e04:	f109 0901 	add.w	r9, r9, #1
 8009e08:	e7ee      	b.n	8009de8 <_printf_float+0x280>
 8009e0a:	bf00      	nop
 8009e0c:	f3af 8000 	nop.w
 8009e10:	ffffffff 	.word	0xffffffff
 8009e14:	7fefffff 	.word	0x7fefffff
 8009e18:	0800c514 	.word	0x0800c514
 8009e1c:	0800c518 	.word	0x0800c518
 8009e20:	0800c520 	.word	0x0800c520
 8009e24:	0800c51c 	.word	0x0800c51c
 8009e28:	0800c524 	.word	0x0800c524
 8009e2c:	9a08      	ldr	r2, [sp, #32]
 8009e2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e30:	429a      	cmp	r2, r3
 8009e32:	bfa8      	it	ge
 8009e34:	461a      	movge	r2, r3
 8009e36:	2a00      	cmp	r2, #0
 8009e38:	4691      	mov	r9, r2
 8009e3a:	dc38      	bgt.n	8009eae <_printf_float+0x346>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	9305      	str	r3, [sp, #20]
 8009e40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e44:	f104 021a 	add.w	r2, r4, #26
 8009e48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e4a:	9905      	ldr	r1, [sp, #20]
 8009e4c:	9304      	str	r3, [sp, #16]
 8009e4e:	eba3 0309 	sub.w	r3, r3, r9
 8009e52:	428b      	cmp	r3, r1
 8009e54:	dc33      	bgt.n	8009ebe <_printf_float+0x356>
 8009e56:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e5a:	429a      	cmp	r2, r3
 8009e5c:	db3c      	blt.n	8009ed8 <_printf_float+0x370>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	07da      	lsls	r2, r3, #31
 8009e62:	d439      	bmi.n	8009ed8 <_printf_float+0x370>
 8009e64:	9b08      	ldr	r3, [sp, #32]
 8009e66:	9a04      	ldr	r2, [sp, #16]
 8009e68:	9907      	ldr	r1, [sp, #28]
 8009e6a:	1a9a      	subs	r2, r3, r2
 8009e6c:	eba3 0901 	sub.w	r9, r3, r1
 8009e70:	4591      	cmp	r9, r2
 8009e72:	bfa8      	it	ge
 8009e74:	4691      	movge	r9, r2
 8009e76:	f1b9 0f00 	cmp.w	r9, #0
 8009e7a:	dc35      	bgt.n	8009ee8 <_printf_float+0x380>
 8009e7c:	f04f 0800 	mov.w	r8, #0
 8009e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e84:	f104 0a1a 	add.w	sl, r4, #26
 8009e88:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e8c:	1a9b      	subs	r3, r3, r2
 8009e8e:	eba3 0309 	sub.w	r3, r3, r9
 8009e92:	4543      	cmp	r3, r8
 8009e94:	f77f af75 	ble.w	8009d82 <_printf_float+0x21a>
 8009e98:	2301      	movs	r3, #1
 8009e9a:	4652      	mov	r2, sl
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	47b8      	blx	r7
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	f43f aeae 	beq.w	8009c04 <_printf_float+0x9c>
 8009ea8:	f108 0801 	add.w	r8, r8, #1
 8009eac:	e7ec      	b.n	8009e88 <_printf_float+0x320>
 8009eae:	4613      	mov	r3, r2
 8009eb0:	4631      	mov	r1, r6
 8009eb2:	4642      	mov	r2, r8
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	47b8      	blx	r7
 8009eb8:	3001      	adds	r0, #1
 8009eba:	d1bf      	bne.n	8009e3c <_printf_float+0x2d4>
 8009ebc:	e6a2      	b.n	8009c04 <_printf_float+0x9c>
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	9204      	str	r2, [sp, #16]
 8009ec6:	47b8      	blx	r7
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f43f ae9b 	beq.w	8009c04 <_printf_float+0x9c>
 8009ece:	9b05      	ldr	r3, [sp, #20]
 8009ed0:	9a04      	ldr	r2, [sp, #16]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	9305      	str	r3, [sp, #20]
 8009ed6:	e7b7      	b.n	8009e48 <_printf_float+0x2e0>
 8009ed8:	4653      	mov	r3, sl
 8009eda:	465a      	mov	r2, fp
 8009edc:	4631      	mov	r1, r6
 8009ede:	4628      	mov	r0, r5
 8009ee0:	47b8      	blx	r7
 8009ee2:	3001      	adds	r0, #1
 8009ee4:	d1be      	bne.n	8009e64 <_printf_float+0x2fc>
 8009ee6:	e68d      	b.n	8009c04 <_printf_float+0x9c>
 8009ee8:	9a04      	ldr	r2, [sp, #16]
 8009eea:	464b      	mov	r3, r9
 8009eec:	4442      	add	r2, r8
 8009eee:	4631      	mov	r1, r6
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	47b8      	blx	r7
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d1c1      	bne.n	8009e7c <_printf_float+0x314>
 8009ef8:	e684      	b.n	8009c04 <_printf_float+0x9c>
 8009efa:	9a08      	ldr	r2, [sp, #32]
 8009efc:	2a01      	cmp	r2, #1
 8009efe:	dc01      	bgt.n	8009f04 <_printf_float+0x39c>
 8009f00:	07db      	lsls	r3, r3, #31
 8009f02:	d537      	bpl.n	8009f74 <_printf_float+0x40c>
 8009f04:	2301      	movs	r3, #1
 8009f06:	4642      	mov	r2, r8
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4628      	mov	r0, r5
 8009f0c:	47b8      	blx	r7
 8009f0e:	3001      	adds	r0, #1
 8009f10:	f43f ae78 	beq.w	8009c04 <_printf_float+0x9c>
 8009f14:	4653      	mov	r3, sl
 8009f16:	465a      	mov	r2, fp
 8009f18:	4631      	mov	r1, r6
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	47b8      	blx	r7
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f43f ae70 	beq.w	8009c04 <_printf_float+0x9c>
 8009f24:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009f28:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f30:	d01b      	beq.n	8009f6a <_printf_float+0x402>
 8009f32:	9b08      	ldr	r3, [sp, #32]
 8009f34:	f108 0201 	add.w	r2, r8, #1
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	4631      	mov	r1, r6
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	47b8      	blx	r7
 8009f40:	3001      	adds	r0, #1
 8009f42:	d10e      	bne.n	8009f62 <_printf_float+0x3fa>
 8009f44:	e65e      	b.n	8009c04 <_printf_float+0x9c>
 8009f46:	2301      	movs	r3, #1
 8009f48:	464a      	mov	r2, r9
 8009f4a:	4631      	mov	r1, r6
 8009f4c:	4628      	mov	r0, r5
 8009f4e:	47b8      	blx	r7
 8009f50:	3001      	adds	r0, #1
 8009f52:	f43f ae57 	beq.w	8009c04 <_printf_float+0x9c>
 8009f56:	f108 0801 	add.w	r8, r8, #1
 8009f5a:	9b08      	ldr	r3, [sp, #32]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	4543      	cmp	r3, r8
 8009f60:	dcf1      	bgt.n	8009f46 <_printf_float+0x3de>
 8009f62:	9b04      	ldr	r3, [sp, #16]
 8009f64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f68:	e6db      	b.n	8009d22 <_printf_float+0x1ba>
 8009f6a:	f04f 0800 	mov.w	r8, #0
 8009f6e:	f104 091a 	add.w	r9, r4, #26
 8009f72:	e7f2      	b.n	8009f5a <_printf_float+0x3f2>
 8009f74:	2301      	movs	r3, #1
 8009f76:	4642      	mov	r2, r8
 8009f78:	e7df      	b.n	8009f3a <_printf_float+0x3d2>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	464a      	mov	r2, r9
 8009f7e:	4631      	mov	r1, r6
 8009f80:	4628      	mov	r0, r5
 8009f82:	47b8      	blx	r7
 8009f84:	3001      	adds	r0, #1
 8009f86:	f43f ae3d 	beq.w	8009c04 <_printf_float+0x9c>
 8009f8a:	f108 0801 	add.w	r8, r8, #1
 8009f8e:	68e3      	ldr	r3, [r4, #12]
 8009f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f92:	1a5b      	subs	r3, r3, r1
 8009f94:	4543      	cmp	r3, r8
 8009f96:	dcf0      	bgt.n	8009f7a <_printf_float+0x412>
 8009f98:	e6f7      	b.n	8009d8a <_printf_float+0x222>
 8009f9a:	f04f 0800 	mov.w	r8, #0
 8009f9e:	f104 0919 	add.w	r9, r4, #25
 8009fa2:	e7f4      	b.n	8009f8e <_printf_float+0x426>

08009fa4 <_printf_common>:
 8009fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa8:	4616      	mov	r6, r2
 8009faa:	4699      	mov	r9, r3
 8009fac:	688a      	ldr	r2, [r1, #8]
 8009fae:	690b      	ldr	r3, [r1, #16]
 8009fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	bfb8      	it	lt
 8009fb8:	4613      	movlt	r3, r2
 8009fba:	6033      	str	r3, [r6, #0]
 8009fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fc0:	4607      	mov	r7, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	b10a      	cbz	r2, 8009fca <_printf_common+0x26>
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	6033      	str	r3, [r6, #0]
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	0699      	lsls	r1, r3, #26
 8009fce:	bf42      	ittt	mi
 8009fd0:	6833      	ldrmi	r3, [r6, #0]
 8009fd2:	3302      	addmi	r3, #2
 8009fd4:	6033      	strmi	r3, [r6, #0]
 8009fd6:	6825      	ldr	r5, [r4, #0]
 8009fd8:	f015 0506 	ands.w	r5, r5, #6
 8009fdc:	d106      	bne.n	8009fec <_printf_common+0x48>
 8009fde:	f104 0a19 	add.w	sl, r4, #25
 8009fe2:	68e3      	ldr	r3, [r4, #12]
 8009fe4:	6832      	ldr	r2, [r6, #0]
 8009fe6:	1a9b      	subs	r3, r3, r2
 8009fe8:	42ab      	cmp	r3, r5
 8009fea:	dc26      	bgt.n	800a03a <_printf_common+0x96>
 8009fec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ff0:	1e13      	subs	r3, r2, #0
 8009ff2:	6822      	ldr	r2, [r4, #0]
 8009ff4:	bf18      	it	ne
 8009ff6:	2301      	movne	r3, #1
 8009ff8:	0692      	lsls	r2, r2, #26
 8009ffa:	d42b      	bmi.n	800a054 <_printf_common+0xb0>
 8009ffc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a000:	4649      	mov	r1, r9
 800a002:	4638      	mov	r0, r7
 800a004:	47c0      	blx	r8
 800a006:	3001      	adds	r0, #1
 800a008:	d01e      	beq.n	800a048 <_printf_common+0xa4>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	68e5      	ldr	r5, [r4, #12]
 800a00e:	6832      	ldr	r2, [r6, #0]
 800a010:	f003 0306 	and.w	r3, r3, #6
 800a014:	2b04      	cmp	r3, #4
 800a016:	bf08      	it	eq
 800a018:	1aad      	subeq	r5, r5, r2
 800a01a:	68a3      	ldr	r3, [r4, #8]
 800a01c:	6922      	ldr	r2, [r4, #16]
 800a01e:	bf0c      	ite	eq
 800a020:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a024:	2500      	movne	r5, #0
 800a026:	4293      	cmp	r3, r2
 800a028:	bfc4      	itt	gt
 800a02a:	1a9b      	subgt	r3, r3, r2
 800a02c:	18ed      	addgt	r5, r5, r3
 800a02e:	2600      	movs	r6, #0
 800a030:	341a      	adds	r4, #26
 800a032:	42b5      	cmp	r5, r6
 800a034:	d11a      	bne.n	800a06c <_printf_common+0xc8>
 800a036:	2000      	movs	r0, #0
 800a038:	e008      	b.n	800a04c <_printf_common+0xa8>
 800a03a:	2301      	movs	r3, #1
 800a03c:	4652      	mov	r2, sl
 800a03e:	4649      	mov	r1, r9
 800a040:	4638      	mov	r0, r7
 800a042:	47c0      	blx	r8
 800a044:	3001      	adds	r0, #1
 800a046:	d103      	bne.n	800a050 <_printf_common+0xac>
 800a048:	f04f 30ff 	mov.w	r0, #4294967295
 800a04c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a050:	3501      	adds	r5, #1
 800a052:	e7c6      	b.n	8009fe2 <_printf_common+0x3e>
 800a054:	18e1      	adds	r1, r4, r3
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	2030      	movs	r0, #48	; 0x30
 800a05a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a05e:	4422      	add	r2, r4
 800a060:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a064:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a068:	3302      	adds	r3, #2
 800a06a:	e7c7      	b.n	8009ffc <_printf_common+0x58>
 800a06c:	2301      	movs	r3, #1
 800a06e:	4622      	mov	r2, r4
 800a070:	4649      	mov	r1, r9
 800a072:	4638      	mov	r0, r7
 800a074:	47c0      	blx	r8
 800a076:	3001      	adds	r0, #1
 800a078:	d0e6      	beq.n	800a048 <_printf_common+0xa4>
 800a07a:	3601      	adds	r6, #1
 800a07c:	e7d9      	b.n	800a032 <_printf_common+0x8e>
	...

0800a080 <_printf_i>:
 800a080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a084:	7e0f      	ldrb	r7, [r1, #24]
 800a086:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a088:	2f78      	cmp	r7, #120	; 0x78
 800a08a:	4691      	mov	r9, r2
 800a08c:	4680      	mov	r8, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	469a      	mov	sl, r3
 800a092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a096:	d807      	bhi.n	800a0a8 <_printf_i+0x28>
 800a098:	2f62      	cmp	r7, #98	; 0x62
 800a09a:	d80a      	bhi.n	800a0b2 <_printf_i+0x32>
 800a09c:	2f00      	cmp	r7, #0
 800a09e:	f000 80d8 	beq.w	800a252 <_printf_i+0x1d2>
 800a0a2:	2f58      	cmp	r7, #88	; 0x58
 800a0a4:	f000 80a3 	beq.w	800a1ee <_printf_i+0x16e>
 800a0a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0b0:	e03a      	b.n	800a128 <_printf_i+0xa8>
 800a0b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0b6:	2b15      	cmp	r3, #21
 800a0b8:	d8f6      	bhi.n	800a0a8 <_printf_i+0x28>
 800a0ba:	a101      	add	r1, pc, #4	; (adr r1, 800a0c0 <_printf_i+0x40>)
 800a0bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0c0:	0800a119 	.word	0x0800a119
 800a0c4:	0800a12d 	.word	0x0800a12d
 800a0c8:	0800a0a9 	.word	0x0800a0a9
 800a0cc:	0800a0a9 	.word	0x0800a0a9
 800a0d0:	0800a0a9 	.word	0x0800a0a9
 800a0d4:	0800a0a9 	.word	0x0800a0a9
 800a0d8:	0800a12d 	.word	0x0800a12d
 800a0dc:	0800a0a9 	.word	0x0800a0a9
 800a0e0:	0800a0a9 	.word	0x0800a0a9
 800a0e4:	0800a0a9 	.word	0x0800a0a9
 800a0e8:	0800a0a9 	.word	0x0800a0a9
 800a0ec:	0800a239 	.word	0x0800a239
 800a0f0:	0800a15d 	.word	0x0800a15d
 800a0f4:	0800a21b 	.word	0x0800a21b
 800a0f8:	0800a0a9 	.word	0x0800a0a9
 800a0fc:	0800a0a9 	.word	0x0800a0a9
 800a100:	0800a25b 	.word	0x0800a25b
 800a104:	0800a0a9 	.word	0x0800a0a9
 800a108:	0800a15d 	.word	0x0800a15d
 800a10c:	0800a0a9 	.word	0x0800a0a9
 800a110:	0800a0a9 	.word	0x0800a0a9
 800a114:	0800a223 	.word	0x0800a223
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	1d1a      	adds	r2, r3, #4
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	602a      	str	r2, [r5, #0]
 800a120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a128:	2301      	movs	r3, #1
 800a12a:	e0a3      	b.n	800a274 <_printf_i+0x1f4>
 800a12c:	6820      	ldr	r0, [r4, #0]
 800a12e:	6829      	ldr	r1, [r5, #0]
 800a130:	0606      	lsls	r6, r0, #24
 800a132:	f101 0304 	add.w	r3, r1, #4
 800a136:	d50a      	bpl.n	800a14e <_printf_i+0xce>
 800a138:	680e      	ldr	r6, [r1, #0]
 800a13a:	602b      	str	r3, [r5, #0]
 800a13c:	2e00      	cmp	r6, #0
 800a13e:	da03      	bge.n	800a148 <_printf_i+0xc8>
 800a140:	232d      	movs	r3, #45	; 0x2d
 800a142:	4276      	negs	r6, r6
 800a144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a148:	485e      	ldr	r0, [pc, #376]	; (800a2c4 <_printf_i+0x244>)
 800a14a:	230a      	movs	r3, #10
 800a14c:	e019      	b.n	800a182 <_printf_i+0x102>
 800a14e:	680e      	ldr	r6, [r1, #0]
 800a150:	602b      	str	r3, [r5, #0]
 800a152:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a156:	bf18      	it	ne
 800a158:	b236      	sxthne	r6, r6
 800a15a:	e7ef      	b.n	800a13c <_printf_i+0xbc>
 800a15c:	682b      	ldr	r3, [r5, #0]
 800a15e:	6820      	ldr	r0, [r4, #0]
 800a160:	1d19      	adds	r1, r3, #4
 800a162:	6029      	str	r1, [r5, #0]
 800a164:	0601      	lsls	r1, r0, #24
 800a166:	d501      	bpl.n	800a16c <_printf_i+0xec>
 800a168:	681e      	ldr	r6, [r3, #0]
 800a16a:	e002      	b.n	800a172 <_printf_i+0xf2>
 800a16c:	0646      	lsls	r6, r0, #25
 800a16e:	d5fb      	bpl.n	800a168 <_printf_i+0xe8>
 800a170:	881e      	ldrh	r6, [r3, #0]
 800a172:	4854      	ldr	r0, [pc, #336]	; (800a2c4 <_printf_i+0x244>)
 800a174:	2f6f      	cmp	r7, #111	; 0x6f
 800a176:	bf0c      	ite	eq
 800a178:	2308      	moveq	r3, #8
 800a17a:	230a      	movne	r3, #10
 800a17c:	2100      	movs	r1, #0
 800a17e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a182:	6865      	ldr	r5, [r4, #4]
 800a184:	60a5      	str	r5, [r4, #8]
 800a186:	2d00      	cmp	r5, #0
 800a188:	bfa2      	ittt	ge
 800a18a:	6821      	ldrge	r1, [r4, #0]
 800a18c:	f021 0104 	bicge.w	r1, r1, #4
 800a190:	6021      	strge	r1, [r4, #0]
 800a192:	b90e      	cbnz	r6, 800a198 <_printf_i+0x118>
 800a194:	2d00      	cmp	r5, #0
 800a196:	d04d      	beq.n	800a234 <_printf_i+0x1b4>
 800a198:	4615      	mov	r5, r2
 800a19a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a19e:	fb03 6711 	mls	r7, r3, r1, r6
 800a1a2:	5dc7      	ldrb	r7, [r0, r7]
 800a1a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1a8:	4637      	mov	r7, r6
 800a1aa:	42bb      	cmp	r3, r7
 800a1ac:	460e      	mov	r6, r1
 800a1ae:	d9f4      	bls.n	800a19a <_printf_i+0x11a>
 800a1b0:	2b08      	cmp	r3, #8
 800a1b2:	d10b      	bne.n	800a1cc <_printf_i+0x14c>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	07de      	lsls	r6, r3, #31
 800a1b8:	d508      	bpl.n	800a1cc <_printf_i+0x14c>
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	6861      	ldr	r1, [r4, #4]
 800a1be:	4299      	cmp	r1, r3
 800a1c0:	bfde      	ittt	le
 800a1c2:	2330      	movle	r3, #48	; 0x30
 800a1c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1cc:	1b52      	subs	r2, r2, r5
 800a1ce:	6122      	str	r2, [r4, #16]
 800a1d0:	f8cd a000 	str.w	sl, [sp]
 800a1d4:	464b      	mov	r3, r9
 800a1d6:	aa03      	add	r2, sp, #12
 800a1d8:	4621      	mov	r1, r4
 800a1da:	4640      	mov	r0, r8
 800a1dc:	f7ff fee2 	bl	8009fa4 <_printf_common>
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d14c      	bne.n	800a27e <_printf_i+0x1fe>
 800a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e8:	b004      	add	sp, #16
 800a1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ee:	4835      	ldr	r0, [pc, #212]	; (800a2c4 <_printf_i+0x244>)
 800a1f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a1f4:	6829      	ldr	r1, [r5, #0]
 800a1f6:	6823      	ldr	r3, [r4, #0]
 800a1f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1fc:	6029      	str	r1, [r5, #0]
 800a1fe:	061d      	lsls	r5, r3, #24
 800a200:	d514      	bpl.n	800a22c <_printf_i+0x1ac>
 800a202:	07df      	lsls	r7, r3, #31
 800a204:	bf44      	itt	mi
 800a206:	f043 0320 	orrmi.w	r3, r3, #32
 800a20a:	6023      	strmi	r3, [r4, #0]
 800a20c:	b91e      	cbnz	r6, 800a216 <_printf_i+0x196>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	f023 0320 	bic.w	r3, r3, #32
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	2310      	movs	r3, #16
 800a218:	e7b0      	b.n	800a17c <_printf_i+0xfc>
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	f043 0320 	orr.w	r3, r3, #32
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	2378      	movs	r3, #120	; 0x78
 800a224:	4828      	ldr	r0, [pc, #160]	; (800a2c8 <_printf_i+0x248>)
 800a226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a22a:	e7e3      	b.n	800a1f4 <_printf_i+0x174>
 800a22c:	0659      	lsls	r1, r3, #25
 800a22e:	bf48      	it	mi
 800a230:	b2b6      	uxthmi	r6, r6
 800a232:	e7e6      	b.n	800a202 <_printf_i+0x182>
 800a234:	4615      	mov	r5, r2
 800a236:	e7bb      	b.n	800a1b0 <_printf_i+0x130>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	6826      	ldr	r6, [r4, #0]
 800a23c:	6961      	ldr	r1, [r4, #20]
 800a23e:	1d18      	adds	r0, r3, #4
 800a240:	6028      	str	r0, [r5, #0]
 800a242:	0635      	lsls	r5, r6, #24
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	d501      	bpl.n	800a24c <_printf_i+0x1cc>
 800a248:	6019      	str	r1, [r3, #0]
 800a24a:	e002      	b.n	800a252 <_printf_i+0x1d2>
 800a24c:	0670      	lsls	r0, r6, #25
 800a24e:	d5fb      	bpl.n	800a248 <_printf_i+0x1c8>
 800a250:	8019      	strh	r1, [r3, #0]
 800a252:	2300      	movs	r3, #0
 800a254:	6123      	str	r3, [r4, #16]
 800a256:	4615      	mov	r5, r2
 800a258:	e7ba      	b.n	800a1d0 <_printf_i+0x150>
 800a25a:	682b      	ldr	r3, [r5, #0]
 800a25c:	1d1a      	adds	r2, r3, #4
 800a25e:	602a      	str	r2, [r5, #0]
 800a260:	681d      	ldr	r5, [r3, #0]
 800a262:	6862      	ldr	r2, [r4, #4]
 800a264:	2100      	movs	r1, #0
 800a266:	4628      	mov	r0, r5
 800a268:	f7f6 f842 	bl	80002f0 <memchr>
 800a26c:	b108      	cbz	r0, 800a272 <_printf_i+0x1f2>
 800a26e:	1b40      	subs	r0, r0, r5
 800a270:	6060      	str	r0, [r4, #4]
 800a272:	6863      	ldr	r3, [r4, #4]
 800a274:	6123      	str	r3, [r4, #16]
 800a276:	2300      	movs	r3, #0
 800a278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a27c:	e7a8      	b.n	800a1d0 <_printf_i+0x150>
 800a27e:	6923      	ldr	r3, [r4, #16]
 800a280:	462a      	mov	r2, r5
 800a282:	4649      	mov	r1, r9
 800a284:	4640      	mov	r0, r8
 800a286:	47d0      	blx	sl
 800a288:	3001      	adds	r0, #1
 800a28a:	d0ab      	beq.n	800a1e4 <_printf_i+0x164>
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	079b      	lsls	r3, r3, #30
 800a290:	d413      	bmi.n	800a2ba <_printf_i+0x23a>
 800a292:	68e0      	ldr	r0, [r4, #12]
 800a294:	9b03      	ldr	r3, [sp, #12]
 800a296:	4298      	cmp	r0, r3
 800a298:	bfb8      	it	lt
 800a29a:	4618      	movlt	r0, r3
 800a29c:	e7a4      	b.n	800a1e8 <_printf_i+0x168>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	4632      	mov	r2, r6
 800a2a2:	4649      	mov	r1, r9
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	47d0      	blx	sl
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d09b      	beq.n	800a1e4 <_printf_i+0x164>
 800a2ac:	3501      	adds	r5, #1
 800a2ae:	68e3      	ldr	r3, [r4, #12]
 800a2b0:	9903      	ldr	r1, [sp, #12]
 800a2b2:	1a5b      	subs	r3, r3, r1
 800a2b4:	42ab      	cmp	r3, r5
 800a2b6:	dcf2      	bgt.n	800a29e <_printf_i+0x21e>
 800a2b8:	e7eb      	b.n	800a292 <_printf_i+0x212>
 800a2ba:	2500      	movs	r5, #0
 800a2bc:	f104 0619 	add.w	r6, r4, #25
 800a2c0:	e7f5      	b.n	800a2ae <_printf_i+0x22e>
 800a2c2:	bf00      	nop
 800a2c4:	0800c526 	.word	0x0800c526
 800a2c8:	0800c537 	.word	0x0800c537

0800a2cc <iprintf>:
 800a2cc:	b40f      	push	{r0, r1, r2, r3}
 800a2ce:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <iprintf+0x2c>)
 800a2d0:	b513      	push	{r0, r1, r4, lr}
 800a2d2:	681c      	ldr	r4, [r3, #0]
 800a2d4:	b124      	cbz	r4, 800a2e0 <iprintf+0x14>
 800a2d6:	69a3      	ldr	r3, [r4, #24]
 800a2d8:	b913      	cbnz	r3, 800a2e0 <iprintf+0x14>
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f000 fe62 	bl	800afa4 <__sinit>
 800a2e0:	ab05      	add	r3, sp, #20
 800a2e2:	9a04      	ldr	r2, [sp, #16]
 800a2e4:	68a1      	ldr	r1, [r4, #8]
 800a2e6:	9301      	str	r3, [sp, #4]
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f001 fbad 	bl	800ba48 <_vfiprintf_r>
 800a2ee:	b002      	add	sp, #8
 800a2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2f4:	b004      	add	sp, #16
 800a2f6:	4770      	bx	lr
 800a2f8:	24000010 	.word	0x24000010

0800a2fc <quorem>:
 800a2fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	6903      	ldr	r3, [r0, #16]
 800a302:	690c      	ldr	r4, [r1, #16]
 800a304:	42a3      	cmp	r3, r4
 800a306:	4607      	mov	r7, r0
 800a308:	f2c0 8081 	blt.w	800a40e <quorem+0x112>
 800a30c:	3c01      	subs	r4, #1
 800a30e:	f101 0814 	add.w	r8, r1, #20
 800a312:	f100 0514 	add.w	r5, r0, #20
 800a316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a31a:	9301      	str	r3, [sp, #4]
 800a31c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a320:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a324:	3301      	adds	r3, #1
 800a326:	429a      	cmp	r2, r3
 800a328:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a32c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a330:	fbb2 f6f3 	udiv	r6, r2, r3
 800a334:	d331      	bcc.n	800a39a <quorem+0x9e>
 800a336:	f04f 0e00 	mov.w	lr, #0
 800a33a:	4640      	mov	r0, r8
 800a33c:	46ac      	mov	ip, r5
 800a33e:	46f2      	mov	sl, lr
 800a340:	f850 2b04 	ldr.w	r2, [r0], #4
 800a344:	b293      	uxth	r3, r2
 800a346:	fb06 e303 	mla	r3, r6, r3, lr
 800a34a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a34e:	b29b      	uxth	r3, r3
 800a350:	ebaa 0303 	sub.w	r3, sl, r3
 800a354:	f8dc a000 	ldr.w	sl, [ip]
 800a358:	0c12      	lsrs	r2, r2, #16
 800a35a:	fa13 f38a 	uxtah	r3, r3, sl
 800a35e:	fb06 e202 	mla	r2, r6, r2, lr
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	9b00      	ldr	r3, [sp, #0]
 800a366:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a36a:	b292      	uxth	r2, r2
 800a36c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a370:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a374:	f8bd 3000 	ldrh.w	r3, [sp]
 800a378:	4581      	cmp	r9, r0
 800a37a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a37e:	f84c 3b04 	str.w	r3, [ip], #4
 800a382:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a386:	d2db      	bcs.n	800a340 <quorem+0x44>
 800a388:	f855 300b 	ldr.w	r3, [r5, fp]
 800a38c:	b92b      	cbnz	r3, 800a39a <quorem+0x9e>
 800a38e:	9b01      	ldr	r3, [sp, #4]
 800a390:	3b04      	subs	r3, #4
 800a392:	429d      	cmp	r5, r3
 800a394:	461a      	mov	r2, r3
 800a396:	d32e      	bcc.n	800a3f6 <quorem+0xfa>
 800a398:	613c      	str	r4, [r7, #16]
 800a39a:	4638      	mov	r0, r7
 800a39c:	f001 f932 	bl	800b604 <__mcmp>
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	db24      	blt.n	800a3ee <quorem+0xf2>
 800a3a4:	3601      	adds	r6, #1
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f04f 0c00 	mov.w	ip, #0
 800a3ac:	f858 2b04 	ldr.w	r2, [r8], #4
 800a3b0:	f8d0 e000 	ldr.w	lr, [r0]
 800a3b4:	b293      	uxth	r3, r2
 800a3b6:	ebac 0303 	sub.w	r3, ip, r3
 800a3ba:	0c12      	lsrs	r2, r2, #16
 800a3bc:	fa13 f38e 	uxtah	r3, r3, lr
 800a3c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a3c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a3ce:	45c1      	cmp	r9, r8
 800a3d0:	f840 3b04 	str.w	r3, [r0], #4
 800a3d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3d8:	d2e8      	bcs.n	800a3ac <quorem+0xb0>
 800a3da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3e2:	b922      	cbnz	r2, 800a3ee <quorem+0xf2>
 800a3e4:	3b04      	subs	r3, #4
 800a3e6:	429d      	cmp	r5, r3
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	d30a      	bcc.n	800a402 <quorem+0x106>
 800a3ec:	613c      	str	r4, [r7, #16]
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	b003      	add	sp, #12
 800a3f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f6:	6812      	ldr	r2, [r2, #0]
 800a3f8:	3b04      	subs	r3, #4
 800a3fa:	2a00      	cmp	r2, #0
 800a3fc:	d1cc      	bne.n	800a398 <quorem+0x9c>
 800a3fe:	3c01      	subs	r4, #1
 800a400:	e7c7      	b.n	800a392 <quorem+0x96>
 800a402:	6812      	ldr	r2, [r2, #0]
 800a404:	3b04      	subs	r3, #4
 800a406:	2a00      	cmp	r2, #0
 800a408:	d1f0      	bne.n	800a3ec <quorem+0xf0>
 800a40a:	3c01      	subs	r4, #1
 800a40c:	e7eb      	b.n	800a3e6 <quorem+0xea>
 800a40e:	2000      	movs	r0, #0
 800a410:	e7ee      	b.n	800a3f0 <quorem+0xf4>
 800a412:	0000      	movs	r0, r0
 800a414:	0000      	movs	r0, r0
	...

0800a418 <_dtoa_r>:
 800a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	ed2d 8b02 	vpush	{d8}
 800a420:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a422:	b091      	sub	sp, #68	; 0x44
 800a424:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a428:	ec59 8b10 	vmov	r8, r9, d0
 800a42c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a42e:	9106      	str	r1, [sp, #24]
 800a430:	4606      	mov	r6, r0
 800a432:	9208      	str	r2, [sp, #32]
 800a434:	930c      	str	r3, [sp, #48]	; 0x30
 800a436:	b975      	cbnz	r5, 800a456 <_dtoa_r+0x3e>
 800a438:	2010      	movs	r0, #16
 800a43a:	f000 fe59 	bl	800b0f0 <malloc>
 800a43e:	4602      	mov	r2, r0
 800a440:	6270      	str	r0, [r6, #36]	; 0x24
 800a442:	b920      	cbnz	r0, 800a44e <_dtoa_r+0x36>
 800a444:	4baa      	ldr	r3, [pc, #680]	; (800a6f0 <_dtoa_r+0x2d8>)
 800a446:	21ea      	movs	r1, #234	; 0xea
 800a448:	48aa      	ldr	r0, [pc, #680]	; (800a6f4 <_dtoa_r+0x2dc>)
 800a44a:	f001 fd53 	bl	800bef4 <__assert_func>
 800a44e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a452:	6005      	str	r5, [r0, #0]
 800a454:	60c5      	str	r5, [r0, #12]
 800a456:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a458:	6819      	ldr	r1, [r3, #0]
 800a45a:	b151      	cbz	r1, 800a472 <_dtoa_r+0x5a>
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	604a      	str	r2, [r1, #4]
 800a460:	2301      	movs	r3, #1
 800a462:	4093      	lsls	r3, r2
 800a464:	608b      	str	r3, [r1, #8]
 800a466:	4630      	mov	r0, r6
 800a468:	f000 fe8a 	bl	800b180 <_Bfree>
 800a46c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a46e:	2200      	movs	r2, #0
 800a470:	601a      	str	r2, [r3, #0]
 800a472:	f1b9 0300 	subs.w	r3, r9, #0
 800a476:	bfbb      	ittet	lt
 800a478:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a47c:	9303      	strlt	r3, [sp, #12]
 800a47e:	2300      	movge	r3, #0
 800a480:	2201      	movlt	r2, #1
 800a482:	bfac      	ite	ge
 800a484:	6023      	strge	r3, [r4, #0]
 800a486:	6022      	strlt	r2, [r4, #0]
 800a488:	4b9b      	ldr	r3, [pc, #620]	; (800a6f8 <_dtoa_r+0x2e0>)
 800a48a:	9c03      	ldr	r4, [sp, #12]
 800a48c:	43a3      	bics	r3, r4
 800a48e:	d11c      	bne.n	800a4ca <_dtoa_r+0xb2>
 800a490:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a492:	f242 730f 	movw	r3, #9999	; 0x270f
 800a496:	6013      	str	r3, [r2, #0]
 800a498:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a49c:	ea53 0308 	orrs.w	r3, r3, r8
 800a4a0:	f000 84fd 	beq.w	800ae9e <_dtoa_r+0xa86>
 800a4a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4a6:	b963      	cbnz	r3, 800a4c2 <_dtoa_r+0xaa>
 800a4a8:	4b94      	ldr	r3, [pc, #592]	; (800a6fc <_dtoa_r+0x2e4>)
 800a4aa:	e01f      	b.n	800a4ec <_dtoa_r+0xd4>
 800a4ac:	4b94      	ldr	r3, [pc, #592]	; (800a700 <_dtoa_r+0x2e8>)
 800a4ae:	9301      	str	r3, [sp, #4]
 800a4b0:	3308      	adds	r3, #8
 800a4b2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	9801      	ldr	r0, [sp, #4]
 800a4b8:	b011      	add	sp, #68	; 0x44
 800a4ba:	ecbd 8b02 	vpop	{d8}
 800a4be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c2:	4b8e      	ldr	r3, [pc, #568]	; (800a6fc <_dtoa_r+0x2e4>)
 800a4c4:	9301      	str	r3, [sp, #4]
 800a4c6:	3303      	adds	r3, #3
 800a4c8:	e7f3      	b.n	800a4b2 <_dtoa_r+0x9a>
 800a4ca:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a4ce:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4d6:	d10b      	bne.n	800a4f0 <_dtoa_r+0xd8>
 800a4d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4da:	2301      	movs	r3, #1
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 84d9 	beq.w	800ae98 <_dtoa_r+0xa80>
 800a4e6:	4887      	ldr	r0, [pc, #540]	; (800a704 <_dtoa_r+0x2ec>)
 800a4e8:	6018      	str	r0, [r3, #0]
 800a4ea:	1e43      	subs	r3, r0, #1
 800a4ec:	9301      	str	r3, [sp, #4]
 800a4ee:	e7e2      	b.n	800a4b6 <_dtoa_r+0x9e>
 800a4f0:	a90f      	add	r1, sp, #60	; 0x3c
 800a4f2:	aa0e      	add	r2, sp, #56	; 0x38
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	eeb0 0b48 	vmov.f64	d0, d8
 800a4fa:	f001 f929 	bl	800b750 <__d2b>
 800a4fe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a502:	4605      	mov	r5, r0
 800a504:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a506:	2900      	cmp	r1, #0
 800a508:	d046      	beq.n	800a598 <_dtoa_r+0x180>
 800a50a:	ee18 4a90 	vmov	r4, s17
 800a50e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a512:	ec53 2b18 	vmov	r2, r3, d8
 800a516:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a51a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a51e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a522:	2400      	movs	r4, #0
 800a524:	ec43 2b16 	vmov	d6, r2, r3
 800a528:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a52c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a6d8 <_dtoa_r+0x2c0>
 800a530:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a534:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a6e0 <_dtoa_r+0x2c8>
 800a538:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a53c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a6e8 <_dtoa_r+0x2d0>
 800a540:	ee07 1a90 	vmov	s15, r1
 800a544:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a548:	eeb0 7b46 	vmov.f64	d7, d6
 800a54c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a550:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a554:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55c:	ee16 ba90 	vmov	fp, s13
 800a560:	940a      	str	r4, [sp, #40]	; 0x28
 800a562:	d508      	bpl.n	800a576 <_dtoa_r+0x15e>
 800a564:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a568:	eeb4 6b47 	vcmp.f64	d6, d7
 800a56c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a570:	bf18      	it	ne
 800a572:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a576:	f1bb 0f16 	cmp.w	fp, #22
 800a57a:	d82f      	bhi.n	800a5dc <_dtoa_r+0x1c4>
 800a57c:	4b62      	ldr	r3, [pc, #392]	; (800a708 <_dtoa_r+0x2f0>)
 800a57e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a582:	ed93 7b00 	vldr	d7, [r3]
 800a586:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a58e:	d501      	bpl.n	800a594 <_dtoa_r+0x17c>
 800a590:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a594:	2300      	movs	r3, #0
 800a596:	e022      	b.n	800a5de <_dtoa_r+0x1c6>
 800a598:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a59a:	4401      	add	r1, r0
 800a59c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a5a0:	2b20      	cmp	r3, #32
 800a5a2:	bfc1      	itttt	gt
 800a5a4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5a8:	fa04 f303 	lslgt.w	r3, r4, r3
 800a5ac:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a5b0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a5b4:	bfd6      	itet	le
 800a5b6:	f1c3 0320 	rsble	r3, r3, #32
 800a5ba:	ea43 0808 	orrgt.w	r8, r3, r8
 800a5be:	fa08 f803 	lslle.w	r8, r8, r3
 800a5c2:	ee07 8a90 	vmov	s15, r8
 800a5c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a5ca:	3901      	subs	r1, #1
 800a5cc:	ee17 4a90 	vmov	r4, s15
 800a5d0:	ec53 2b17 	vmov	r2, r3, d7
 800a5d4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a5d8:	2401      	movs	r4, #1
 800a5da:	e7a3      	b.n	800a524 <_dtoa_r+0x10c>
 800a5dc:	2301      	movs	r3, #1
 800a5de:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5e0:	1a43      	subs	r3, r0, r1
 800a5e2:	1e5a      	subs	r2, r3, #1
 800a5e4:	bf45      	ittet	mi
 800a5e6:	f1c3 0301 	rsbmi	r3, r3, #1
 800a5ea:	9304      	strmi	r3, [sp, #16]
 800a5ec:	2300      	movpl	r3, #0
 800a5ee:	2300      	movmi	r3, #0
 800a5f0:	9205      	str	r2, [sp, #20]
 800a5f2:	bf54      	ite	pl
 800a5f4:	9304      	strpl	r3, [sp, #16]
 800a5f6:	9305      	strmi	r3, [sp, #20]
 800a5f8:	f1bb 0f00 	cmp.w	fp, #0
 800a5fc:	db18      	blt.n	800a630 <_dtoa_r+0x218>
 800a5fe:	9b05      	ldr	r3, [sp, #20]
 800a600:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a604:	445b      	add	r3, fp
 800a606:	9305      	str	r3, [sp, #20]
 800a608:	2300      	movs	r3, #0
 800a60a:	9a06      	ldr	r2, [sp, #24]
 800a60c:	2a09      	cmp	r2, #9
 800a60e:	d849      	bhi.n	800a6a4 <_dtoa_r+0x28c>
 800a610:	2a05      	cmp	r2, #5
 800a612:	bfc4      	itt	gt
 800a614:	3a04      	subgt	r2, #4
 800a616:	9206      	strgt	r2, [sp, #24]
 800a618:	9a06      	ldr	r2, [sp, #24]
 800a61a:	f1a2 0202 	sub.w	r2, r2, #2
 800a61e:	bfcc      	ite	gt
 800a620:	2400      	movgt	r4, #0
 800a622:	2401      	movle	r4, #1
 800a624:	2a03      	cmp	r2, #3
 800a626:	d848      	bhi.n	800a6ba <_dtoa_r+0x2a2>
 800a628:	e8df f002 	tbb	[pc, r2]
 800a62c:	3a2c2e0b 	.word	0x3a2c2e0b
 800a630:	9b04      	ldr	r3, [sp, #16]
 800a632:	2200      	movs	r2, #0
 800a634:	eba3 030b 	sub.w	r3, r3, fp
 800a638:	9304      	str	r3, [sp, #16]
 800a63a:	9209      	str	r2, [sp, #36]	; 0x24
 800a63c:	f1cb 0300 	rsb	r3, fp, #0
 800a640:	e7e3      	b.n	800a60a <_dtoa_r+0x1f2>
 800a642:	2200      	movs	r2, #0
 800a644:	9207      	str	r2, [sp, #28]
 800a646:	9a08      	ldr	r2, [sp, #32]
 800a648:	2a00      	cmp	r2, #0
 800a64a:	dc39      	bgt.n	800a6c0 <_dtoa_r+0x2a8>
 800a64c:	f04f 0a01 	mov.w	sl, #1
 800a650:	46d1      	mov	r9, sl
 800a652:	4652      	mov	r2, sl
 800a654:	f8cd a020 	str.w	sl, [sp, #32]
 800a658:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a65a:	2100      	movs	r1, #0
 800a65c:	6079      	str	r1, [r7, #4]
 800a65e:	2004      	movs	r0, #4
 800a660:	f100 0c14 	add.w	ip, r0, #20
 800a664:	4594      	cmp	ip, r2
 800a666:	6879      	ldr	r1, [r7, #4]
 800a668:	d92f      	bls.n	800a6ca <_dtoa_r+0x2b2>
 800a66a:	4630      	mov	r0, r6
 800a66c:	930d      	str	r3, [sp, #52]	; 0x34
 800a66e:	f000 fd47 	bl	800b100 <_Balloc>
 800a672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a674:	9001      	str	r0, [sp, #4]
 800a676:	4602      	mov	r2, r0
 800a678:	2800      	cmp	r0, #0
 800a67a:	d149      	bne.n	800a710 <_dtoa_r+0x2f8>
 800a67c:	4b23      	ldr	r3, [pc, #140]	; (800a70c <_dtoa_r+0x2f4>)
 800a67e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a682:	e6e1      	b.n	800a448 <_dtoa_r+0x30>
 800a684:	2201      	movs	r2, #1
 800a686:	e7dd      	b.n	800a644 <_dtoa_r+0x22c>
 800a688:	2200      	movs	r2, #0
 800a68a:	9207      	str	r2, [sp, #28]
 800a68c:	9a08      	ldr	r2, [sp, #32]
 800a68e:	eb0b 0a02 	add.w	sl, fp, r2
 800a692:	f10a 0901 	add.w	r9, sl, #1
 800a696:	464a      	mov	r2, r9
 800a698:	2a01      	cmp	r2, #1
 800a69a:	bfb8      	it	lt
 800a69c:	2201      	movlt	r2, #1
 800a69e:	e7db      	b.n	800a658 <_dtoa_r+0x240>
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	e7f2      	b.n	800a68a <_dtoa_r+0x272>
 800a6a4:	2401      	movs	r4, #1
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a6ac:	f04f 3aff 	mov.w	sl, #4294967295
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	46d1      	mov	r9, sl
 800a6b4:	2212      	movs	r2, #18
 800a6b6:	9108      	str	r1, [sp, #32]
 800a6b8:	e7ce      	b.n	800a658 <_dtoa_r+0x240>
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	9207      	str	r2, [sp, #28]
 800a6be:	e7f5      	b.n	800a6ac <_dtoa_r+0x294>
 800a6c0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a6c4:	46d1      	mov	r9, sl
 800a6c6:	4652      	mov	r2, sl
 800a6c8:	e7c6      	b.n	800a658 <_dtoa_r+0x240>
 800a6ca:	3101      	adds	r1, #1
 800a6cc:	6079      	str	r1, [r7, #4]
 800a6ce:	0040      	lsls	r0, r0, #1
 800a6d0:	e7c6      	b.n	800a660 <_dtoa_r+0x248>
 800a6d2:	bf00      	nop
 800a6d4:	f3af 8000 	nop.w
 800a6d8:	636f4361 	.word	0x636f4361
 800a6dc:	3fd287a7 	.word	0x3fd287a7
 800a6e0:	8b60c8b3 	.word	0x8b60c8b3
 800a6e4:	3fc68a28 	.word	0x3fc68a28
 800a6e8:	509f79fb 	.word	0x509f79fb
 800a6ec:	3fd34413 	.word	0x3fd34413
 800a6f0:	0800c555 	.word	0x0800c555
 800a6f4:	0800c56c 	.word	0x0800c56c
 800a6f8:	7ff00000 	.word	0x7ff00000
 800a6fc:	0800c551 	.word	0x0800c551
 800a700:	0800c548 	.word	0x0800c548
 800a704:	0800c525 	.word	0x0800c525
 800a708:	0800c6c0 	.word	0x0800c6c0
 800a70c:	0800c5c7 	.word	0x0800c5c7
 800a710:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a712:	9901      	ldr	r1, [sp, #4]
 800a714:	6011      	str	r1, [r2, #0]
 800a716:	f1b9 0f0e 	cmp.w	r9, #14
 800a71a:	d86c      	bhi.n	800a7f6 <_dtoa_r+0x3de>
 800a71c:	2c00      	cmp	r4, #0
 800a71e:	d06a      	beq.n	800a7f6 <_dtoa_r+0x3de>
 800a720:	f1bb 0f00 	cmp.w	fp, #0
 800a724:	f340 80a0 	ble.w	800a868 <_dtoa_r+0x450>
 800a728:	49c1      	ldr	r1, [pc, #772]	; (800aa30 <_dtoa_r+0x618>)
 800a72a:	f00b 020f 	and.w	r2, fp, #15
 800a72e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a732:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a736:	ed92 7b00 	vldr	d7, [r2]
 800a73a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a73e:	f000 8087 	beq.w	800a850 <_dtoa_r+0x438>
 800a742:	4abc      	ldr	r2, [pc, #752]	; (800aa34 <_dtoa_r+0x61c>)
 800a744:	ed92 6b08 	vldr	d6, [r2, #32]
 800a748:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a74c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a750:	f001 010f 	and.w	r1, r1, #15
 800a754:	2203      	movs	r2, #3
 800a756:	48b7      	ldr	r0, [pc, #732]	; (800aa34 <_dtoa_r+0x61c>)
 800a758:	2900      	cmp	r1, #0
 800a75a:	d17b      	bne.n	800a854 <_dtoa_r+0x43c>
 800a75c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a760:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a764:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a768:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a76a:	2900      	cmp	r1, #0
 800a76c:	f000 80a2 	beq.w	800a8b4 <_dtoa_r+0x49c>
 800a770:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a774:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a778:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a780:	f140 8098 	bpl.w	800a8b4 <_dtoa_r+0x49c>
 800a784:	f1b9 0f00 	cmp.w	r9, #0
 800a788:	f000 8094 	beq.w	800a8b4 <_dtoa_r+0x49c>
 800a78c:	f1ba 0f00 	cmp.w	sl, #0
 800a790:	dd2f      	ble.n	800a7f2 <_dtoa_r+0x3da>
 800a792:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a796:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a79a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a79e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a7a2:	3201      	adds	r2, #1
 800a7a4:	4650      	mov	r0, sl
 800a7a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a7aa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a7ae:	ee07 2a90 	vmov	s15, r2
 800a7b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a7b6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a7ba:	ee15 4a90 	vmov	r4, s11
 800a7be:	ec52 1b15 	vmov	r1, r2, d5
 800a7c2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d177      	bne.n	800a8ba <_dtoa_r+0x4a2>
 800a7ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a7ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a7d2:	ec42 1b17 	vmov	d7, r1, r2
 800a7d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7de:	f300 8263 	bgt.w	800aca8 <_dtoa_r+0x890>
 800a7e2:	eeb1 7b47 	vneg.f64	d7, d7
 800a7e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ee:	f100 8258 	bmi.w	800aca2 <_dtoa_r+0x88a>
 800a7f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a7f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7f8:	2a00      	cmp	r2, #0
 800a7fa:	f2c0 811d 	blt.w	800aa38 <_dtoa_r+0x620>
 800a7fe:	f1bb 0f0e 	cmp.w	fp, #14
 800a802:	f300 8119 	bgt.w	800aa38 <_dtoa_r+0x620>
 800a806:	4b8a      	ldr	r3, [pc, #552]	; (800aa30 <_dtoa_r+0x618>)
 800a808:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a80c:	ed93 6b00 	vldr	d6, [r3]
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	2b00      	cmp	r3, #0
 800a814:	f280 80b7 	bge.w	800a986 <_dtoa_r+0x56e>
 800a818:	f1b9 0f00 	cmp.w	r9, #0
 800a81c:	f300 80b3 	bgt.w	800a986 <_dtoa_r+0x56e>
 800a820:	f040 823f 	bne.w	800aca2 <_dtoa_r+0x88a>
 800a824:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a828:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a82c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a830:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a838:	464c      	mov	r4, r9
 800a83a:	464f      	mov	r7, r9
 800a83c:	f280 8215 	bge.w	800ac6a <_dtoa_r+0x852>
 800a840:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a844:	2331      	movs	r3, #49	; 0x31
 800a846:	f808 3b01 	strb.w	r3, [r8], #1
 800a84a:	f10b 0b01 	add.w	fp, fp, #1
 800a84e:	e211      	b.n	800ac74 <_dtoa_r+0x85c>
 800a850:	2202      	movs	r2, #2
 800a852:	e780      	b.n	800a756 <_dtoa_r+0x33e>
 800a854:	07cc      	lsls	r4, r1, #31
 800a856:	d504      	bpl.n	800a862 <_dtoa_r+0x44a>
 800a858:	ed90 6b00 	vldr	d6, [r0]
 800a85c:	3201      	adds	r2, #1
 800a85e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a862:	1049      	asrs	r1, r1, #1
 800a864:	3008      	adds	r0, #8
 800a866:	e777      	b.n	800a758 <_dtoa_r+0x340>
 800a868:	d022      	beq.n	800a8b0 <_dtoa_r+0x498>
 800a86a:	f1cb 0100 	rsb	r1, fp, #0
 800a86e:	4a70      	ldr	r2, [pc, #448]	; (800aa30 <_dtoa_r+0x618>)
 800a870:	f001 000f 	and.w	r0, r1, #15
 800a874:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a878:	ed92 7b00 	vldr	d7, [r2]
 800a87c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a880:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a884:	486b      	ldr	r0, [pc, #428]	; (800aa34 <_dtoa_r+0x61c>)
 800a886:	1109      	asrs	r1, r1, #4
 800a888:	2400      	movs	r4, #0
 800a88a:	2202      	movs	r2, #2
 800a88c:	b929      	cbnz	r1, 800a89a <_dtoa_r+0x482>
 800a88e:	2c00      	cmp	r4, #0
 800a890:	f43f af6a 	beq.w	800a768 <_dtoa_r+0x350>
 800a894:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a898:	e766      	b.n	800a768 <_dtoa_r+0x350>
 800a89a:	07cf      	lsls	r7, r1, #31
 800a89c:	d505      	bpl.n	800a8aa <_dtoa_r+0x492>
 800a89e:	ed90 6b00 	vldr	d6, [r0]
 800a8a2:	3201      	adds	r2, #1
 800a8a4:	2401      	movs	r4, #1
 800a8a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a8aa:	1049      	asrs	r1, r1, #1
 800a8ac:	3008      	adds	r0, #8
 800a8ae:	e7ed      	b.n	800a88c <_dtoa_r+0x474>
 800a8b0:	2202      	movs	r2, #2
 800a8b2:	e759      	b.n	800a768 <_dtoa_r+0x350>
 800a8b4:	465f      	mov	r7, fp
 800a8b6:	4648      	mov	r0, r9
 800a8b8:	e775      	b.n	800a7a6 <_dtoa_r+0x38e>
 800a8ba:	ec42 1b17 	vmov	d7, r1, r2
 800a8be:	4a5c      	ldr	r2, [pc, #368]	; (800aa30 <_dtoa_r+0x618>)
 800a8c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a8c4:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a8c8:	9a01      	ldr	r2, [sp, #4]
 800a8ca:	1814      	adds	r4, r2, r0
 800a8cc:	9a07      	ldr	r2, [sp, #28]
 800a8ce:	b352      	cbz	r2, 800a926 <_dtoa_r+0x50e>
 800a8d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a8d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a8d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8dc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a8e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a8e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a8e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a8ec:	ee14 2a90 	vmov	r2, s9
 800a8f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a8f4:	3230      	adds	r2, #48	; 0x30
 800a8f6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a8fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a902:	f808 2b01 	strb.w	r2, [r8], #1
 800a906:	d439      	bmi.n	800a97c <_dtoa_r+0x564>
 800a908:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a90c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a914:	d472      	bmi.n	800a9fc <_dtoa_r+0x5e4>
 800a916:	45a0      	cmp	r8, r4
 800a918:	f43f af6b 	beq.w	800a7f2 <_dtoa_r+0x3da>
 800a91c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a920:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a924:	e7e0      	b.n	800a8e8 <_dtoa_r+0x4d0>
 800a926:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a92a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a92e:	4621      	mov	r1, r4
 800a930:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a934:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a938:	ee14 2a90 	vmov	r2, s9
 800a93c:	3230      	adds	r2, #48	; 0x30
 800a93e:	f808 2b01 	strb.w	r2, [r8], #1
 800a942:	45a0      	cmp	r8, r4
 800a944:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a948:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a94c:	d118      	bne.n	800a980 <_dtoa_r+0x568>
 800a94e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a952:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a956:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a95e:	dc4d      	bgt.n	800a9fc <_dtoa_r+0x5e4>
 800a960:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a964:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a96c:	f57f af41 	bpl.w	800a7f2 <_dtoa_r+0x3da>
 800a970:	4688      	mov	r8, r1
 800a972:	3901      	subs	r1, #1
 800a974:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a978:	2b30      	cmp	r3, #48	; 0x30
 800a97a:	d0f9      	beq.n	800a970 <_dtoa_r+0x558>
 800a97c:	46bb      	mov	fp, r7
 800a97e:	e02a      	b.n	800a9d6 <_dtoa_r+0x5be>
 800a980:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a984:	e7d6      	b.n	800a934 <_dtoa_r+0x51c>
 800a986:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a98a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a98e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a992:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a996:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a99a:	ee15 3a10 	vmov	r3, s10
 800a99e:	3330      	adds	r3, #48	; 0x30
 800a9a0:	f808 3b01 	strb.w	r3, [r8], #1
 800a9a4:	9b01      	ldr	r3, [sp, #4]
 800a9a6:	eba8 0303 	sub.w	r3, r8, r3
 800a9aa:	4599      	cmp	r9, r3
 800a9ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a9b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a9b4:	d133      	bne.n	800aa1e <_dtoa_r+0x606>
 800a9b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a9ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c2:	dc1a      	bgt.n	800a9fa <_dtoa_r+0x5e2>
 800a9c4:	eeb4 7b46 	vcmp.f64	d7, d6
 800a9c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9cc:	d103      	bne.n	800a9d6 <_dtoa_r+0x5be>
 800a9ce:	ee15 3a10 	vmov	r3, s10
 800a9d2:	07d9      	lsls	r1, r3, #31
 800a9d4:	d411      	bmi.n	800a9fa <_dtoa_r+0x5e2>
 800a9d6:	4629      	mov	r1, r5
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f000 fbd1 	bl	800b180 <_Bfree>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9e2:	f888 3000 	strb.w	r3, [r8]
 800a9e6:	f10b 0301 	add.w	r3, fp, #1
 800a9ea:	6013      	str	r3, [r2, #0]
 800a9ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f43f ad61 	beq.w	800a4b6 <_dtoa_r+0x9e>
 800a9f4:	f8c3 8000 	str.w	r8, [r3]
 800a9f8:	e55d      	b.n	800a4b6 <_dtoa_r+0x9e>
 800a9fa:	465f      	mov	r7, fp
 800a9fc:	4643      	mov	r3, r8
 800a9fe:	4698      	mov	r8, r3
 800aa00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa04:	2a39      	cmp	r2, #57	; 0x39
 800aa06:	d106      	bne.n	800aa16 <_dtoa_r+0x5fe>
 800aa08:	9a01      	ldr	r2, [sp, #4]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d1f7      	bne.n	800a9fe <_dtoa_r+0x5e6>
 800aa0e:	9901      	ldr	r1, [sp, #4]
 800aa10:	2230      	movs	r2, #48	; 0x30
 800aa12:	3701      	adds	r7, #1
 800aa14:	700a      	strb	r2, [r1, #0]
 800aa16:	781a      	ldrb	r2, [r3, #0]
 800aa18:	3201      	adds	r2, #1
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	e7ae      	b.n	800a97c <_dtoa_r+0x564>
 800aa1e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aa22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa2a:	d1b2      	bne.n	800a992 <_dtoa_r+0x57a>
 800aa2c:	e7d3      	b.n	800a9d6 <_dtoa_r+0x5be>
 800aa2e:	bf00      	nop
 800aa30:	0800c6c0 	.word	0x0800c6c0
 800aa34:	0800c698 	.word	0x0800c698
 800aa38:	9907      	ldr	r1, [sp, #28]
 800aa3a:	2900      	cmp	r1, #0
 800aa3c:	f000 80d0 	beq.w	800abe0 <_dtoa_r+0x7c8>
 800aa40:	9906      	ldr	r1, [sp, #24]
 800aa42:	2901      	cmp	r1, #1
 800aa44:	f300 80b4 	bgt.w	800abb0 <_dtoa_r+0x798>
 800aa48:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa4a:	2900      	cmp	r1, #0
 800aa4c:	f000 80ac 	beq.w	800aba8 <_dtoa_r+0x790>
 800aa50:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa54:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa58:	461c      	mov	r4, r3
 800aa5a:	930a      	str	r3, [sp, #40]	; 0x28
 800aa5c:	9b04      	ldr	r3, [sp, #16]
 800aa5e:	4413      	add	r3, r2
 800aa60:	9304      	str	r3, [sp, #16]
 800aa62:	9b05      	ldr	r3, [sp, #20]
 800aa64:	2101      	movs	r1, #1
 800aa66:	4413      	add	r3, r2
 800aa68:	4630      	mov	r0, r6
 800aa6a:	9305      	str	r3, [sp, #20]
 800aa6c:	f000 fc40 	bl	800b2f0 <__i2b>
 800aa70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa72:	4607      	mov	r7, r0
 800aa74:	f1b8 0f00 	cmp.w	r8, #0
 800aa78:	dd0d      	ble.n	800aa96 <_dtoa_r+0x67e>
 800aa7a:	9a05      	ldr	r2, [sp, #20]
 800aa7c:	2a00      	cmp	r2, #0
 800aa7e:	dd0a      	ble.n	800aa96 <_dtoa_r+0x67e>
 800aa80:	4542      	cmp	r2, r8
 800aa82:	9904      	ldr	r1, [sp, #16]
 800aa84:	bfa8      	it	ge
 800aa86:	4642      	movge	r2, r8
 800aa88:	1a89      	subs	r1, r1, r2
 800aa8a:	9104      	str	r1, [sp, #16]
 800aa8c:	9905      	ldr	r1, [sp, #20]
 800aa8e:	eba8 0802 	sub.w	r8, r8, r2
 800aa92:	1a8a      	subs	r2, r1, r2
 800aa94:	9205      	str	r2, [sp, #20]
 800aa96:	b303      	cbz	r3, 800aada <_dtoa_r+0x6c2>
 800aa98:	9a07      	ldr	r2, [sp, #28]
 800aa9a:	2a00      	cmp	r2, #0
 800aa9c:	f000 80a5 	beq.w	800abea <_dtoa_r+0x7d2>
 800aaa0:	2c00      	cmp	r4, #0
 800aaa2:	dd13      	ble.n	800aacc <_dtoa_r+0x6b4>
 800aaa4:	4639      	mov	r1, r7
 800aaa6:	4622      	mov	r2, r4
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	930d      	str	r3, [sp, #52]	; 0x34
 800aaac:	f000 fce0 	bl	800b470 <__pow5mult>
 800aab0:	462a      	mov	r2, r5
 800aab2:	4601      	mov	r1, r0
 800aab4:	4607      	mov	r7, r0
 800aab6:	4630      	mov	r0, r6
 800aab8:	f000 fc30 	bl	800b31c <__multiply>
 800aabc:	4629      	mov	r1, r5
 800aabe:	900a      	str	r0, [sp, #40]	; 0x28
 800aac0:	4630      	mov	r0, r6
 800aac2:	f000 fb5d 	bl	800b180 <_Bfree>
 800aac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aaca:	4615      	mov	r5, r2
 800aacc:	1b1a      	subs	r2, r3, r4
 800aace:	d004      	beq.n	800aada <_dtoa_r+0x6c2>
 800aad0:	4629      	mov	r1, r5
 800aad2:	4630      	mov	r0, r6
 800aad4:	f000 fccc 	bl	800b470 <__pow5mult>
 800aad8:	4605      	mov	r5, r0
 800aada:	2101      	movs	r1, #1
 800aadc:	4630      	mov	r0, r6
 800aade:	f000 fc07 	bl	800b2f0 <__i2b>
 800aae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	4604      	mov	r4, r0
 800aae8:	f340 8081 	ble.w	800abee <_dtoa_r+0x7d6>
 800aaec:	461a      	mov	r2, r3
 800aaee:	4601      	mov	r1, r0
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	f000 fcbd 	bl	800b470 <__pow5mult>
 800aaf6:	9b06      	ldr	r3, [sp, #24]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	4604      	mov	r4, r0
 800aafc:	dd7a      	ble.n	800abf4 <_dtoa_r+0x7dc>
 800aafe:	2300      	movs	r3, #0
 800ab00:	930a      	str	r3, [sp, #40]	; 0x28
 800ab02:	6922      	ldr	r2, [r4, #16]
 800ab04:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ab08:	6910      	ldr	r0, [r2, #16]
 800ab0a:	f000 fba1 	bl	800b250 <__hi0bits>
 800ab0e:	f1c0 0020 	rsb	r0, r0, #32
 800ab12:	9b05      	ldr	r3, [sp, #20]
 800ab14:	4418      	add	r0, r3
 800ab16:	f010 001f 	ands.w	r0, r0, #31
 800ab1a:	f000 808c 	beq.w	800ac36 <_dtoa_r+0x81e>
 800ab1e:	f1c0 0220 	rsb	r2, r0, #32
 800ab22:	2a04      	cmp	r2, #4
 800ab24:	f340 8085 	ble.w	800ac32 <_dtoa_r+0x81a>
 800ab28:	f1c0 001c 	rsb	r0, r0, #28
 800ab2c:	9b04      	ldr	r3, [sp, #16]
 800ab2e:	4403      	add	r3, r0
 800ab30:	9304      	str	r3, [sp, #16]
 800ab32:	9b05      	ldr	r3, [sp, #20]
 800ab34:	4403      	add	r3, r0
 800ab36:	4480      	add	r8, r0
 800ab38:	9305      	str	r3, [sp, #20]
 800ab3a:	9b04      	ldr	r3, [sp, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dd05      	ble.n	800ab4c <_dtoa_r+0x734>
 800ab40:	4629      	mov	r1, r5
 800ab42:	461a      	mov	r2, r3
 800ab44:	4630      	mov	r0, r6
 800ab46:	f000 fced 	bl	800b524 <__lshift>
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	9b05      	ldr	r3, [sp, #20]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	dd05      	ble.n	800ab5e <_dtoa_r+0x746>
 800ab52:	4621      	mov	r1, r4
 800ab54:	461a      	mov	r2, r3
 800ab56:	4630      	mov	r0, r6
 800ab58:	f000 fce4 	bl	800b524 <__lshift>
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d06a      	beq.n	800ac3a <_dtoa_r+0x822>
 800ab64:	4621      	mov	r1, r4
 800ab66:	4628      	mov	r0, r5
 800ab68:	f000 fd4c 	bl	800b604 <__mcmp>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	da64      	bge.n	800ac3a <_dtoa_r+0x822>
 800ab70:	2300      	movs	r3, #0
 800ab72:	4629      	mov	r1, r5
 800ab74:	220a      	movs	r2, #10
 800ab76:	4630      	mov	r0, r6
 800ab78:	f000 fb24 	bl	800b1c4 <__multadd>
 800ab7c:	9b07      	ldr	r3, [sp, #28]
 800ab7e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab82:	4605      	mov	r5, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	f000 8191 	beq.w	800aeac <_dtoa_r+0xa94>
 800ab8a:	4639      	mov	r1, r7
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	220a      	movs	r2, #10
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 fb17 	bl	800b1c4 <__multadd>
 800ab96:	f1ba 0f00 	cmp.w	sl, #0
 800ab9a:	4607      	mov	r7, r0
 800ab9c:	f300 808d 	bgt.w	800acba <_dtoa_r+0x8a2>
 800aba0:	9b06      	ldr	r3, [sp, #24]
 800aba2:	2b02      	cmp	r3, #2
 800aba4:	dc50      	bgt.n	800ac48 <_dtoa_r+0x830>
 800aba6:	e088      	b.n	800acba <_dtoa_r+0x8a2>
 800aba8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800abaa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800abae:	e751      	b.n	800aa54 <_dtoa_r+0x63c>
 800abb0:	f109 34ff 	add.w	r4, r9, #4294967295
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	bfbf      	itttt	lt
 800abb8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800abba:	1ae3      	sublt	r3, r4, r3
 800abbc:	18d2      	addlt	r2, r2, r3
 800abbe:	9209      	strlt	r2, [sp, #36]	; 0x24
 800abc0:	bfb6      	itet	lt
 800abc2:	4623      	movlt	r3, r4
 800abc4:	1b1c      	subge	r4, r3, r4
 800abc6:	2400      	movlt	r4, #0
 800abc8:	f1b9 0f00 	cmp.w	r9, #0
 800abcc:	bfb5      	itete	lt
 800abce:	9a04      	ldrlt	r2, [sp, #16]
 800abd0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800abd4:	eba2 0809 	sublt.w	r8, r2, r9
 800abd8:	464a      	movge	r2, r9
 800abda:	bfb8      	it	lt
 800abdc:	2200      	movlt	r2, #0
 800abde:	e73c      	b.n	800aa5a <_dtoa_r+0x642>
 800abe0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800abe4:	9f07      	ldr	r7, [sp, #28]
 800abe6:	461c      	mov	r4, r3
 800abe8:	e744      	b.n	800aa74 <_dtoa_r+0x65c>
 800abea:	461a      	mov	r2, r3
 800abec:	e770      	b.n	800aad0 <_dtoa_r+0x6b8>
 800abee:	9b06      	ldr	r3, [sp, #24]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	dc18      	bgt.n	800ac26 <_dtoa_r+0x80e>
 800abf4:	9b02      	ldr	r3, [sp, #8]
 800abf6:	b9b3      	cbnz	r3, 800ac26 <_dtoa_r+0x80e>
 800abf8:	9b03      	ldr	r3, [sp, #12]
 800abfa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800abfe:	b9a2      	cbnz	r2, 800ac2a <_dtoa_r+0x812>
 800ac00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ac04:	0d12      	lsrs	r2, r2, #20
 800ac06:	0512      	lsls	r2, r2, #20
 800ac08:	b18a      	cbz	r2, 800ac2e <_dtoa_r+0x816>
 800ac0a:	9b04      	ldr	r3, [sp, #16]
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	9304      	str	r3, [sp, #16]
 800ac10:	9b05      	ldr	r3, [sp, #20]
 800ac12:	3301      	adds	r3, #1
 800ac14:	9305      	str	r3, [sp, #20]
 800ac16:	2301      	movs	r3, #1
 800ac18:	930a      	str	r3, [sp, #40]	; 0x28
 800ac1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	f47f af70 	bne.w	800ab02 <_dtoa_r+0x6ea>
 800ac22:	2001      	movs	r0, #1
 800ac24:	e775      	b.n	800ab12 <_dtoa_r+0x6fa>
 800ac26:	2300      	movs	r3, #0
 800ac28:	e7f6      	b.n	800ac18 <_dtoa_r+0x800>
 800ac2a:	9b02      	ldr	r3, [sp, #8]
 800ac2c:	e7f4      	b.n	800ac18 <_dtoa_r+0x800>
 800ac2e:	920a      	str	r2, [sp, #40]	; 0x28
 800ac30:	e7f3      	b.n	800ac1a <_dtoa_r+0x802>
 800ac32:	d082      	beq.n	800ab3a <_dtoa_r+0x722>
 800ac34:	4610      	mov	r0, r2
 800ac36:	301c      	adds	r0, #28
 800ac38:	e778      	b.n	800ab2c <_dtoa_r+0x714>
 800ac3a:	f1b9 0f00 	cmp.w	r9, #0
 800ac3e:	dc37      	bgt.n	800acb0 <_dtoa_r+0x898>
 800ac40:	9b06      	ldr	r3, [sp, #24]
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	dd34      	ble.n	800acb0 <_dtoa_r+0x898>
 800ac46:	46ca      	mov	sl, r9
 800ac48:	f1ba 0f00 	cmp.w	sl, #0
 800ac4c:	d10d      	bne.n	800ac6a <_dtoa_r+0x852>
 800ac4e:	4621      	mov	r1, r4
 800ac50:	4653      	mov	r3, sl
 800ac52:	2205      	movs	r2, #5
 800ac54:	4630      	mov	r0, r6
 800ac56:	f000 fab5 	bl	800b1c4 <__multadd>
 800ac5a:	4601      	mov	r1, r0
 800ac5c:	4604      	mov	r4, r0
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f000 fcd0 	bl	800b604 <__mcmp>
 800ac64:	2800      	cmp	r0, #0
 800ac66:	f73f adeb 	bgt.w	800a840 <_dtoa_r+0x428>
 800ac6a:	9b08      	ldr	r3, [sp, #32]
 800ac6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac70:	ea6f 0b03 	mvn.w	fp, r3
 800ac74:	f04f 0900 	mov.w	r9, #0
 800ac78:	4621      	mov	r1, r4
 800ac7a:	4630      	mov	r0, r6
 800ac7c:	f000 fa80 	bl	800b180 <_Bfree>
 800ac80:	2f00      	cmp	r7, #0
 800ac82:	f43f aea8 	beq.w	800a9d6 <_dtoa_r+0x5be>
 800ac86:	f1b9 0f00 	cmp.w	r9, #0
 800ac8a:	d005      	beq.n	800ac98 <_dtoa_r+0x880>
 800ac8c:	45b9      	cmp	r9, r7
 800ac8e:	d003      	beq.n	800ac98 <_dtoa_r+0x880>
 800ac90:	4649      	mov	r1, r9
 800ac92:	4630      	mov	r0, r6
 800ac94:	f000 fa74 	bl	800b180 <_Bfree>
 800ac98:	4639      	mov	r1, r7
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	f000 fa70 	bl	800b180 <_Bfree>
 800aca0:	e699      	b.n	800a9d6 <_dtoa_r+0x5be>
 800aca2:	2400      	movs	r4, #0
 800aca4:	4627      	mov	r7, r4
 800aca6:	e7e0      	b.n	800ac6a <_dtoa_r+0x852>
 800aca8:	46bb      	mov	fp, r7
 800acaa:	4604      	mov	r4, r0
 800acac:	4607      	mov	r7, r0
 800acae:	e5c7      	b.n	800a840 <_dtoa_r+0x428>
 800acb0:	9b07      	ldr	r3, [sp, #28]
 800acb2:	46ca      	mov	sl, r9
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f000 8100 	beq.w	800aeba <_dtoa_r+0xaa2>
 800acba:	f1b8 0f00 	cmp.w	r8, #0
 800acbe:	dd05      	ble.n	800accc <_dtoa_r+0x8b4>
 800acc0:	4639      	mov	r1, r7
 800acc2:	4642      	mov	r2, r8
 800acc4:	4630      	mov	r0, r6
 800acc6:	f000 fc2d 	bl	800b524 <__lshift>
 800acca:	4607      	mov	r7, r0
 800accc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d05d      	beq.n	800ad8e <_dtoa_r+0x976>
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4630      	mov	r0, r6
 800acd6:	f000 fa13 	bl	800b100 <_Balloc>
 800acda:	4680      	mov	r8, r0
 800acdc:	b928      	cbnz	r0, 800acea <_dtoa_r+0x8d2>
 800acde:	4b82      	ldr	r3, [pc, #520]	; (800aee8 <_dtoa_r+0xad0>)
 800ace0:	4602      	mov	r2, r0
 800ace2:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ace6:	f7ff bbaf 	b.w	800a448 <_dtoa_r+0x30>
 800acea:	693a      	ldr	r2, [r7, #16]
 800acec:	3202      	adds	r2, #2
 800acee:	0092      	lsls	r2, r2, #2
 800acf0:	f107 010c 	add.w	r1, r7, #12
 800acf4:	300c      	adds	r0, #12
 800acf6:	f7fe fe8f 	bl	8009a18 <memcpy>
 800acfa:	2201      	movs	r2, #1
 800acfc:	4641      	mov	r1, r8
 800acfe:	4630      	mov	r0, r6
 800ad00:	f000 fc10 	bl	800b524 <__lshift>
 800ad04:	9b01      	ldr	r3, [sp, #4]
 800ad06:	3301      	adds	r3, #1
 800ad08:	9304      	str	r3, [sp, #16]
 800ad0a:	9b01      	ldr	r3, [sp, #4]
 800ad0c:	4453      	add	r3, sl
 800ad0e:	9308      	str	r3, [sp, #32]
 800ad10:	9b02      	ldr	r3, [sp, #8]
 800ad12:	f003 0301 	and.w	r3, r3, #1
 800ad16:	46b9      	mov	r9, r7
 800ad18:	9307      	str	r3, [sp, #28]
 800ad1a:	4607      	mov	r7, r0
 800ad1c:	9b04      	ldr	r3, [sp, #16]
 800ad1e:	4621      	mov	r1, r4
 800ad20:	3b01      	subs	r3, #1
 800ad22:	4628      	mov	r0, r5
 800ad24:	9302      	str	r3, [sp, #8]
 800ad26:	f7ff fae9 	bl	800a2fc <quorem>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	3330      	adds	r3, #48	; 0x30
 800ad2e:	9005      	str	r0, [sp, #20]
 800ad30:	4649      	mov	r1, r9
 800ad32:	4628      	mov	r0, r5
 800ad34:	9309      	str	r3, [sp, #36]	; 0x24
 800ad36:	f000 fc65 	bl	800b604 <__mcmp>
 800ad3a:	463a      	mov	r2, r7
 800ad3c:	4682      	mov	sl, r0
 800ad3e:	4621      	mov	r1, r4
 800ad40:	4630      	mov	r0, r6
 800ad42:	f000 fc7b 	bl	800b63c <__mdiff>
 800ad46:	68c2      	ldr	r2, [r0, #12]
 800ad48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad4a:	4680      	mov	r8, r0
 800ad4c:	bb0a      	cbnz	r2, 800ad92 <_dtoa_r+0x97a>
 800ad4e:	4601      	mov	r1, r0
 800ad50:	4628      	mov	r0, r5
 800ad52:	f000 fc57 	bl	800b604 <__mcmp>
 800ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad58:	4602      	mov	r2, r0
 800ad5a:	4641      	mov	r1, r8
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ad62:	f000 fa0d 	bl	800b180 <_Bfree>
 800ad66:	9b06      	ldr	r3, [sp, #24]
 800ad68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad6a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ad6e:	ea43 0102 	orr.w	r1, r3, r2
 800ad72:	9b07      	ldr	r3, [sp, #28]
 800ad74:	430b      	orrs	r3, r1
 800ad76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad78:	d10d      	bne.n	800ad96 <_dtoa_r+0x97e>
 800ad7a:	2b39      	cmp	r3, #57	; 0x39
 800ad7c:	d029      	beq.n	800add2 <_dtoa_r+0x9ba>
 800ad7e:	f1ba 0f00 	cmp.w	sl, #0
 800ad82:	dd01      	ble.n	800ad88 <_dtoa_r+0x970>
 800ad84:	9b05      	ldr	r3, [sp, #20]
 800ad86:	3331      	adds	r3, #49	; 0x31
 800ad88:	9a02      	ldr	r2, [sp, #8]
 800ad8a:	7013      	strb	r3, [r2, #0]
 800ad8c:	e774      	b.n	800ac78 <_dtoa_r+0x860>
 800ad8e:	4638      	mov	r0, r7
 800ad90:	e7b8      	b.n	800ad04 <_dtoa_r+0x8ec>
 800ad92:	2201      	movs	r2, #1
 800ad94:	e7e1      	b.n	800ad5a <_dtoa_r+0x942>
 800ad96:	f1ba 0f00 	cmp.w	sl, #0
 800ad9a:	db06      	blt.n	800adaa <_dtoa_r+0x992>
 800ad9c:	9906      	ldr	r1, [sp, #24]
 800ad9e:	ea41 0a0a 	orr.w	sl, r1, sl
 800ada2:	9907      	ldr	r1, [sp, #28]
 800ada4:	ea5a 0101 	orrs.w	r1, sl, r1
 800ada8:	d120      	bne.n	800adec <_dtoa_r+0x9d4>
 800adaa:	2a00      	cmp	r2, #0
 800adac:	ddec      	ble.n	800ad88 <_dtoa_r+0x970>
 800adae:	4629      	mov	r1, r5
 800adb0:	2201      	movs	r2, #1
 800adb2:	4630      	mov	r0, r6
 800adb4:	9304      	str	r3, [sp, #16]
 800adb6:	f000 fbb5 	bl	800b524 <__lshift>
 800adba:	4621      	mov	r1, r4
 800adbc:	4605      	mov	r5, r0
 800adbe:	f000 fc21 	bl	800b604 <__mcmp>
 800adc2:	2800      	cmp	r0, #0
 800adc4:	9b04      	ldr	r3, [sp, #16]
 800adc6:	dc02      	bgt.n	800adce <_dtoa_r+0x9b6>
 800adc8:	d1de      	bne.n	800ad88 <_dtoa_r+0x970>
 800adca:	07da      	lsls	r2, r3, #31
 800adcc:	d5dc      	bpl.n	800ad88 <_dtoa_r+0x970>
 800adce:	2b39      	cmp	r3, #57	; 0x39
 800add0:	d1d8      	bne.n	800ad84 <_dtoa_r+0x96c>
 800add2:	9a02      	ldr	r2, [sp, #8]
 800add4:	2339      	movs	r3, #57	; 0x39
 800add6:	7013      	strb	r3, [r2, #0]
 800add8:	4643      	mov	r3, r8
 800adda:	4698      	mov	r8, r3
 800addc:	3b01      	subs	r3, #1
 800adde:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800ade2:	2a39      	cmp	r2, #57	; 0x39
 800ade4:	d051      	beq.n	800ae8a <_dtoa_r+0xa72>
 800ade6:	3201      	adds	r2, #1
 800ade8:	701a      	strb	r2, [r3, #0]
 800adea:	e745      	b.n	800ac78 <_dtoa_r+0x860>
 800adec:	2a00      	cmp	r2, #0
 800adee:	dd03      	ble.n	800adf8 <_dtoa_r+0x9e0>
 800adf0:	2b39      	cmp	r3, #57	; 0x39
 800adf2:	d0ee      	beq.n	800add2 <_dtoa_r+0x9ba>
 800adf4:	3301      	adds	r3, #1
 800adf6:	e7c7      	b.n	800ad88 <_dtoa_r+0x970>
 800adf8:	9a04      	ldr	r2, [sp, #16]
 800adfa:	9908      	ldr	r1, [sp, #32]
 800adfc:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ae00:	428a      	cmp	r2, r1
 800ae02:	d02b      	beq.n	800ae5c <_dtoa_r+0xa44>
 800ae04:	4629      	mov	r1, r5
 800ae06:	2300      	movs	r3, #0
 800ae08:	220a      	movs	r2, #10
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f000 f9da 	bl	800b1c4 <__multadd>
 800ae10:	45b9      	cmp	r9, r7
 800ae12:	4605      	mov	r5, r0
 800ae14:	f04f 0300 	mov.w	r3, #0
 800ae18:	f04f 020a 	mov.w	r2, #10
 800ae1c:	4649      	mov	r1, r9
 800ae1e:	4630      	mov	r0, r6
 800ae20:	d107      	bne.n	800ae32 <_dtoa_r+0xa1a>
 800ae22:	f000 f9cf 	bl	800b1c4 <__multadd>
 800ae26:	4681      	mov	r9, r0
 800ae28:	4607      	mov	r7, r0
 800ae2a:	9b04      	ldr	r3, [sp, #16]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	9304      	str	r3, [sp, #16]
 800ae30:	e774      	b.n	800ad1c <_dtoa_r+0x904>
 800ae32:	f000 f9c7 	bl	800b1c4 <__multadd>
 800ae36:	4639      	mov	r1, r7
 800ae38:	4681      	mov	r9, r0
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	220a      	movs	r2, #10
 800ae3e:	4630      	mov	r0, r6
 800ae40:	f000 f9c0 	bl	800b1c4 <__multadd>
 800ae44:	4607      	mov	r7, r0
 800ae46:	e7f0      	b.n	800ae2a <_dtoa_r+0xa12>
 800ae48:	f1ba 0f00 	cmp.w	sl, #0
 800ae4c:	9a01      	ldr	r2, [sp, #4]
 800ae4e:	bfcc      	ite	gt
 800ae50:	46d0      	movgt	r8, sl
 800ae52:	f04f 0801 	movle.w	r8, #1
 800ae56:	4490      	add	r8, r2
 800ae58:	f04f 0900 	mov.w	r9, #0
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	2201      	movs	r2, #1
 800ae60:	4630      	mov	r0, r6
 800ae62:	9302      	str	r3, [sp, #8]
 800ae64:	f000 fb5e 	bl	800b524 <__lshift>
 800ae68:	4621      	mov	r1, r4
 800ae6a:	4605      	mov	r5, r0
 800ae6c:	f000 fbca 	bl	800b604 <__mcmp>
 800ae70:	2800      	cmp	r0, #0
 800ae72:	dcb1      	bgt.n	800add8 <_dtoa_r+0x9c0>
 800ae74:	d102      	bne.n	800ae7c <_dtoa_r+0xa64>
 800ae76:	9b02      	ldr	r3, [sp, #8]
 800ae78:	07db      	lsls	r3, r3, #31
 800ae7a:	d4ad      	bmi.n	800add8 <_dtoa_r+0x9c0>
 800ae7c:	4643      	mov	r3, r8
 800ae7e:	4698      	mov	r8, r3
 800ae80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae84:	2a30      	cmp	r2, #48	; 0x30
 800ae86:	d0fa      	beq.n	800ae7e <_dtoa_r+0xa66>
 800ae88:	e6f6      	b.n	800ac78 <_dtoa_r+0x860>
 800ae8a:	9a01      	ldr	r2, [sp, #4]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d1a4      	bne.n	800adda <_dtoa_r+0x9c2>
 800ae90:	f10b 0b01 	add.w	fp, fp, #1
 800ae94:	2331      	movs	r3, #49	; 0x31
 800ae96:	e778      	b.n	800ad8a <_dtoa_r+0x972>
 800ae98:	4b14      	ldr	r3, [pc, #80]	; (800aeec <_dtoa_r+0xad4>)
 800ae9a:	f7ff bb27 	b.w	800a4ec <_dtoa_r+0xd4>
 800ae9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f47f ab03 	bne.w	800a4ac <_dtoa_r+0x94>
 800aea6:	4b12      	ldr	r3, [pc, #72]	; (800aef0 <_dtoa_r+0xad8>)
 800aea8:	f7ff bb20 	b.w	800a4ec <_dtoa_r+0xd4>
 800aeac:	f1ba 0f00 	cmp.w	sl, #0
 800aeb0:	dc03      	bgt.n	800aeba <_dtoa_r+0xaa2>
 800aeb2:	9b06      	ldr	r3, [sp, #24]
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	f73f aec7 	bgt.w	800ac48 <_dtoa_r+0x830>
 800aeba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aebe:	4621      	mov	r1, r4
 800aec0:	4628      	mov	r0, r5
 800aec2:	f7ff fa1b 	bl	800a2fc <quorem>
 800aec6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aeca:	f808 3b01 	strb.w	r3, [r8], #1
 800aece:	9a01      	ldr	r2, [sp, #4]
 800aed0:	eba8 0202 	sub.w	r2, r8, r2
 800aed4:	4592      	cmp	sl, r2
 800aed6:	ddb7      	ble.n	800ae48 <_dtoa_r+0xa30>
 800aed8:	4629      	mov	r1, r5
 800aeda:	2300      	movs	r3, #0
 800aedc:	220a      	movs	r2, #10
 800aede:	4630      	mov	r0, r6
 800aee0:	f000 f970 	bl	800b1c4 <__multadd>
 800aee4:	4605      	mov	r5, r0
 800aee6:	e7ea      	b.n	800aebe <_dtoa_r+0xaa6>
 800aee8:	0800c5c7 	.word	0x0800c5c7
 800aeec:	0800c524 	.word	0x0800c524
 800aef0:	0800c548 	.word	0x0800c548

0800aef4 <std>:
 800aef4:	2300      	movs	r3, #0
 800aef6:	b510      	push	{r4, lr}
 800aef8:	4604      	mov	r4, r0
 800aefa:	e9c0 3300 	strd	r3, r3, [r0]
 800aefe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af02:	6083      	str	r3, [r0, #8]
 800af04:	8181      	strh	r1, [r0, #12]
 800af06:	6643      	str	r3, [r0, #100]	; 0x64
 800af08:	81c2      	strh	r2, [r0, #14]
 800af0a:	6183      	str	r3, [r0, #24]
 800af0c:	4619      	mov	r1, r3
 800af0e:	2208      	movs	r2, #8
 800af10:	305c      	adds	r0, #92	; 0x5c
 800af12:	f7fe fd8f 	bl	8009a34 <memset>
 800af16:	4b05      	ldr	r3, [pc, #20]	; (800af2c <std+0x38>)
 800af18:	6263      	str	r3, [r4, #36]	; 0x24
 800af1a:	4b05      	ldr	r3, [pc, #20]	; (800af30 <std+0x3c>)
 800af1c:	62a3      	str	r3, [r4, #40]	; 0x28
 800af1e:	4b05      	ldr	r3, [pc, #20]	; (800af34 <std+0x40>)
 800af20:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af22:	4b05      	ldr	r3, [pc, #20]	; (800af38 <std+0x44>)
 800af24:	6224      	str	r4, [r4, #32]
 800af26:	6323      	str	r3, [r4, #48]	; 0x30
 800af28:	bd10      	pop	{r4, pc}
 800af2a:	bf00      	nop
 800af2c:	0800bcc9 	.word	0x0800bcc9
 800af30:	0800bceb 	.word	0x0800bceb
 800af34:	0800bd23 	.word	0x0800bd23
 800af38:	0800bd47 	.word	0x0800bd47

0800af3c <_cleanup_r>:
 800af3c:	4901      	ldr	r1, [pc, #4]	; (800af44 <_cleanup_r+0x8>)
 800af3e:	f000 b8af 	b.w	800b0a0 <_fwalk_reent>
 800af42:	bf00      	nop
 800af44:	0800c05d 	.word	0x0800c05d

0800af48 <__sfmoreglue>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	2268      	movs	r2, #104	; 0x68
 800af4c:	1e4d      	subs	r5, r1, #1
 800af4e:	4355      	muls	r5, r2
 800af50:	460e      	mov	r6, r1
 800af52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af56:	f000 fcd9 	bl	800b90c <_malloc_r>
 800af5a:	4604      	mov	r4, r0
 800af5c:	b140      	cbz	r0, 800af70 <__sfmoreglue+0x28>
 800af5e:	2100      	movs	r1, #0
 800af60:	e9c0 1600 	strd	r1, r6, [r0]
 800af64:	300c      	adds	r0, #12
 800af66:	60a0      	str	r0, [r4, #8]
 800af68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af6c:	f7fe fd62 	bl	8009a34 <memset>
 800af70:	4620      	mov	r0, r4
 800af72:	bd70      	pop	{r4, r5, r6, pc}

0800af74 <__sfp_lock_acquire>:
 800af74:	4801      	ldr	r0, [pc, #4]	; (800af7c <__sfp_lock_acquire+0x8>)
 800af76:	f000 b8b8 	b.w	800b0ea <__retarget_lock_acquire_recursive>
 800af7a:	bf00      	nop
 800af7c:	24000451 	.word	0x24000451

0800af80 <__sfp_lock_release>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__sfp_lock_release+0x8>)
 800af82:	f000 b8b3 	b.w	800b0ec <__retarget_lock_release_recursive>
 800af86:	bf00      	nop
 800af88:	24000451 	.word	0x24000451

0800af8c <__sinit_lock_acquire>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__sinit_lock_acquire+0x8>)
 800af8e:	f000 b8ac 	b.w	800b0ea <__retarget_lock_acquire_recursive>
 800af92:	bf00      	nop
 800af94:	24000452 	.word	0x24000452

0800af98 <__sinit_lock_release>:
 800af98:	4801      	ldr	r0, [pc, #4]	; (800afa0 <__sinit_lock_release+0x8>)
 800af9a:	f000 b8a7 	b.w	800b0ec <__retarget_lock_release_recursive>
 800af9e:	bf00      	nop
 800afa0:	24000452 	.word	0x24000452

0800afa4 <__sinit>:
 800afa4:	b510      	push	{r4, lr}
 800afa6:	4604      	mov	r4, r0
 800afa8:	f7ff fff0 	bl	800af8c <__sinit_lock_acquire>
 800afac:	69a3      	ldr	r3, [r4, #24]
 800afae:	b11b      	cbz	r3, 800afb8 <__sinit+0x14>
 800afb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afb4:	f7ff bff0 	b.w	800af98 <__sinit_lock_release>
 800afb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800afbc:	6523      	str	r3, [r4, #80]	; 0x50
 800afbe:	4b13      	ldr	r3, [pc, #76]	; (800b00c <__sinit+0x68>)
 800afc0:	4a13      	ldr	r2, [pc, #76]	; (800b010 <__sinit+0x6c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	62a2      	str	r2, [r4, #40]	; 0x28
 800afc6:	42a3      	cmp	r3, r4
 800afc8:	bf04      	itt	eq
 800afca:	2301      	moveq	r3, #1
 800afcc:	61a3      	streq	r3, [r4, #24]
 800afce:	4620      	mov	r0, r4
 800afd0:	f000 f820 	bl	800b014 <__sfp>
 800afd4:	6060      	str	r0, [r4, #4]
 800afd6:	4620      	mov	r0, r4
 800afd8:	f000 f81c 	bl	800b014 <__sfp>
 800afdc:	60a0      	str	r0, [r4, #8]
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 f818 	bl	800b014 <__sfp>
 800afe4:	2200      	movs	r2, #0
 800afe6:	60e0      	str	r0, [r4, #12]
 800afe8:	2104      	movs	r1, #4
 800afea:	6860      	ldr	r0, [r4, #4]
 800afec:	f7ff ff82 	bl	800aef4 <std>
 800aff0:	68a0      	ldr	r0, [r4, #8]
 800aff2:	2201      	movs	r2, #1
 800aff4:	2109      	movs	r1, #9
 800aff6:	f7ff ff7d 	bl	800aef4 <std>
 800affa:	68e0      	ldr	r0, [r4, #12]
 800affc:	2202      	movs	r2, #2
 800affe:	2112      	movs	r1, #18
 800b000:	f7ff ff78 	bl	800aef4 <std>
 800b004:	2301      	movs	r3, #1
 800b006:	61a3      	str	r3, [r4, #24]
 800b008:	e7d2      	b.n	800afb0 <__sinit+0xc>
 800b00a:	bf00      	nop
 800b00c:	0800c510 	.word	0x0800c510
 800b010:	0800af3d 	.word	0x0800af3d

0800b014 <__sfp>:
 800b014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b016:	4607      	mov	r7, r0
 800b018:	f7ff ffac 	bl	800af74 <__sfp_lock_acquire>
 800b01c:	4b1e      	ldr	r3, [pc, #120]	; (800b098 <__sfp+0x84>)
 800b01e:	681e      	ldr	r6, [r3, #0]
 800b020:	69b3      	ldr	r3, [r6, #24]
 800b022:	b913      	cbnz	r3, 800b02a <__sfp+0x16>
 800b024:	4630      	mov	r0, r6
 800b026:	f7ff ffbd 	bl	800afa4 <__sinit>
 800b02a:	3648      	adds	r6, #72	; 0x48
 800b02c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b030:	3b01      	subs	r3, #1
 800b032:	d503      	bpl.n	800b03c <__sfp+0x28>
 800b034:	6833      	ldr	r3, [r6, #0]
 800b036:	b30b      	cbz	r3, 800b07c <__sfp+0x68>
 800b038:	6836      	ldr	r6, [r6, #0]
 800b03a:	e7f7      	b.n	800b02c <__sfp+0x18>
 800b03c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b040:	b9d5      	cbnz	r5, 800b078 <__sfp+0x64>
 800b042:	4b16      	ldr	r3, [pc, #88]	; (800b09c <__sfp+0x88>)
 800b044:	60e3      	str	r3, [r4, #12]
 800b046:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b04a:	6665      	str	r5, [r4, #100]	; 0x64
 800b04c:	f000 f84c 	bl	800b0e8 <__retarget_lock_init_recursive>
 800b050:	f7ff ff96 	bl	800af80 <__sfp_lock_release>
 800b054:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b058:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b05c:	6025      	str	r5, [r4, #0]
 800b05e:	61a5      	str	r5, [r4, #24]
 800b060:	2208      	movs	r2, #8
 800b062:	4629      	mov	r1, r5
 800b064:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b068:	f7fe fce4 	bl	8009a34 <memset>
 800b06c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b070:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b074:	4620      	mov	r0, r4
 800b076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b078:	3468      	adds	r4, #104	; 0x68
 800b07a:	e7d9      	b.n	800b030 <__sfp+0x1c>
 800b07c:	2104      	movs	r1, #4
 800b07e:	4638      	mov	r0, r7
 800b080:	f7ff ff62 	bl	800af48 <__sfmoreglue>
 800b084:	4604      	mov	r4, r0
 800b086:	6030      	str	r0, [r6, #0]
 800b088:	2800      	cmp	r0, #0
 800b08a:	d1d5      	bne.n	800b038 <__sfp+0x24>
 800b08c:	f7ff ff78 	bl	800af80 <__sfp_lock_release>
 800b090:	230c      	movs	r3, #12
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	e7ee      	b.n	800b074 <__sfp+0x60>
 800b096:	bf00      	nop
 800b098:	0800c510 	.word	0x0800c510
 800b09c:	ffff0001 	.word	0xffff0001

0800b0a0 <_fwalk_reent>:
 800b0a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0a4:	4606      	mov	r6, r0
 800b0a6:	4688      	mov	r8, r1
 800b0a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b0ac:	2700      	movs	r7, #0
 800b0ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b0b2:	f1b9 0901 	subs.w	r9, r9, #1
 800b0b6:	d505      	bpl.n	800b0c4 <_fwalk_reent+0x24>
 800b0b8:	6824      	ldr	r4, [r4, #0]
 800b0ba:	2c00      	cmp	r4, #0
 800b0bc:	d1f7      	bne.n	800b0ae <_fwalk_reent+0xe>
 800b0be:	4638      	mov	r0, r7
 800b0c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0c4:	89ab      	ldrh	r3, [r5, #12]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d907      	bls.n	800b0da <_fwalk_reent+0x3a>
 800b0ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	d003      	beq.n	800b0da <_fwalk_reent+0x3a>
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	47c0      	blx	r8
 800b0d8:	4307      	orrs	r7, r0
 800b0da:	3568      	adds	r5, #104	; 0x68
 800b0dc:	e7e9      	b.n	800b0b2 <_fwalk_reent+0x12>
	...

0800b0e0 <_localeconv_r>:
 800b0e0:	4800      	ldr	r0, [pc, #0]	; (800b0e4 <_localeconv_r+0x4>)
 800b0e2:	4770      	bx	lr
 800b0e4:	24000164 	.word	0x24000164

0800b0e8 <__retarget_lock_init_recursive>:
 800b0e8:	4770      	bx	lr

0800b0ea <__retarget_lock_acquire_recursive>:
 800b0ea:	4770      	bx	lr

0800b0ec <__retarget_lock_release_recursive>:
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <malloc>:
 800b0f0:	4b02      	ldr	r3, [pc, #8]	; (800b0fc <malloc+0xc>)
 800b0f2:	4601      	mov	r1, r0
 800b0f4:	6818      	ldr	r0, [r3, #0]
 800b0f6:	f000 bc09 	b.w	800b90c <_malloc_r>
 800b0fa:	bf00      	nop
 800b0fc:	24000010 	.word	0x24000010

0800b100 <_Balloc>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b104:	4604      	mov	r4, r0
 800b106:	460d      	mov	r5, r1
 800b108:	b976      	cbnz	r6, 800b128 <_Balloc+0x28>
 800b10a:	2010      	movs	r0, #16
 800b10c:	f7ff fff0 	bl	800b0f0 <malloc>
 800b110:	4602      	mov	r2, r0
 800b112:	6260      	str	r0, [r4, #36]	; 0x24
 800b114:	b920      	cbnz	r0, 800b120 <_Balloc+0x20>
 800b116:	4b18      	ldr	r3, [pc, #96]	; (800b178 <_Balloc+0x78>)
 800b118:	4818      	ldr	r0, [pc, #96]	; (800b17c <_Balloc+0x7c>)
 800b11a:	2166      	movs	r1, #102	; 0x66
 800b11c:	f000 feea 	bl	800bef4 <__assert_func>
 800b120:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b124:	6006      	str	r6, [r0, #0]
 800b126:	60c6      	str	r6, [r0, #12]
 800b128:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b12a:	68f3      	ldr	r3, [r6, #12]
 800b12c:	b183      	cbz	r3, 800b150 <_Balloc+0x50>
 800b12e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b136:	b9b8      	cbnz	r0, 800b168 <_Balloc+0x68>
 800b138:	2101      	movs	r1, #1
 800b13a:	fa01 f605 	lsl.w	r6, r1, r5
 800b13e:	1d72      	adds	r2, r6, #5
 800b140:	0092      	lsls	r2, r2, #2
 800b142:	4620      	mov	r0, r4
 800b144:	f000 fb60 	bl	800b808 <_calloc_r>
 800b148:	b160      	cbz	r0, 800b164 <_Balloc+0x64>
 800b14a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b14e:	e00e      	b.n	800b16e <_Balloc+0x6e>
 800b150:	2221      	movs	r2, #33	; 0x21
 800b152:	2104      	movs	r1, #4
 800b154:	4620      	mov	r0, r4
 800b156:	f000 fb57 	bl	800b808 <_calloc_r>
 800b15a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b15c:	60f0      	str	r0, [r6, #12]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e4      	bne.n	800b12e <_Balloc+0x2e>
 800b164:	2000      	movs	r0, #0
 800b166:	bd70      	pop	{r4, r5, r6, pc}
 800b168:	6802      	ldr	r2, [r0, #0]
 800b16a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b16e:	2300      	movs	r3, #0
 800b170:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b174:	e7f7      	b.n	800b166 <_Balloc+0x66>
 800b176:	bf00      	nop
 800b178:	0800c555 	.word	0x0800c555
 800b17c:	0800c638 	.word	0x0800c638

0800b180 <_Bfree>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b184:	4605      	mov	r5, r0
 800b186:	460c      	mov	r4, r1
 800b188:	b976      	cbnz	r6, 800b1a8 <_Bfree+0x28>
 800b18a:	2010      	movs	r0, #16
 800b18c:	f7ff ffb0 	bl	800b0f0 <malloc>
 800b190:	4602      	mov	r2, r0
 800b192:	6268      	str	r0, [r5, #36]	; 0x24
 800b194:	b920      	cbnz	r0, 800b1a0 <_Bfree+0x20>
 800b196:	4b09      	ldr	r3, [pc, #36]	; (800b1bc <_Bfree+0x3c>)
 800b198:	4809      	ldr	r0, [pc, #36]	; (800b1c0 <_Bfree+0x40>)
 800b19a:	218a      	movs	r1, #138	; 0x8a
 800b19c:	f000 feaa 	bl	800bef4 <__assert_func>
 800b1a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1a4:	6006      	str	r6, [r0, #0]
 800b1a6:	60c6      	str	r6, [r0, #12]
 800b1a8:	b13c      	cbz	r4, 800b1ba <_Bfree+0x3a>
 800b1aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1ac:	6862      	ldr	r2, [r4, #4]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1b4:	6021      	str	r1, [r4, #0]
 800b1b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1ba:	bd70      	pop	{r4, r5, r6, pc}
 800b1bc:	0800c555 	.word	0x0800c555
 800b1c0:	0800c638 	.word	0x0800c638

0800b1c4 <__multadd>:
 800b1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c8:	690d      	ldr	r5, [r1, #16]
 800b1ca:	4607      	mov	r7, r0
 800b1cc:	460c      	mov	r4, r1
 800b1ce:	461e      	mov	r6, r3
 800b1d0:	f101 0c14 	add.w	ip, r1, #20
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b1da:	b299      	uxth	r1, r3
 800b1dc:	fb02 6101 	mla	r1, r2, r1, r6
 800b1e0:	0c1e      	lsrs	r6, r3, #16
 800b1e2:	0c0b      	lsrs	r3, r1, #16
 800b1e4:	fb02 3306 	mla	r3, r2, r6, r3
 800b1e8:	b289      	uxth	r1, r1
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1f0:	4285      	cmp	r5, r0
 800b1f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b1f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1fa:	dcec      	bgt.n	800b1d6 <__multadd+0x12>
 800b1fc:	b30e      	cbz	r6, 800b242 <__multadd+0x7e>
 800b1fe:	68a3      	ldr	r3, [r4, #8]
 800b200:	42ab      	cmp	r3, r5
 800b202:	dc19      	bgt.n	800b238 <__multadd+0x74>
 800b204:	6861      	ldr	r1, [r4, #4]
 800b206:	4638      	mov	r0, r7
 800b208:	3101      	adds	r1, #1
 800b20a:	f7ff ff79 	bl	800b100 <_Balloc>
 800b20e:	4680      	mov	r8, r0
 800b210:	b928      	cbnz	r0, 800b21e <__multadd+0x5a>
 800b212:	4602      	mov	r2, r0
 800b214:	4b0c      	ldr	r3, [pc, #48]	; (800b248 <__multadd+0x84>)
 800b216:	480d      	ldr	r0, [pc, #52]	; (800b24c <__multadd+0x88>)
 800b218:	21b5      	movs	r1, #181	; 0xb5
 800b21a:	f000 fe6b 	bl	800bef4 <__assert_func>
 800b21e:	6922      	ldr	r2, [r4, #16]
 800b220:	3202      	adds	r2, #2
 800b222:	f104 010c 	add.w	r1, r4, #12
 800b226:	0092      	lsls	r2, r2, #2
 800b228:	300c      	adds	r0, #12
 800b22a:	f7fe fbf5 	bl	8009a18 <memcpy>
 800b22e:	4621      	mov	r1, r4
 800b230:	4638      	mov	r0, r7
 800b232:	f7ff ffa5 	bl	800b180 <_Bfree>
 800b236:	4644      	mov	r4, r8
 800b238:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b23c:	3501      	adds	r5, #1
 800b23e:	615e      	str	r6, [r3, #20]
 800b240:	6125      	str	r5, [r4, #16]
 800b242:	4620      	mov	r0, r4
 800b244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b248:	0800c5c7 	.word	0x0800c5c7
 800b24c:	0800c638 	.word	0x0800c638

0800b250 <__hi0bits>:
 800b250:	0c03      	lsrs	r3, r0, #16
 800b252:	041b      	lsls	r3, r3, #16
 800b254:	b9d3      	cbnz	r3, 800b28c <__hi0bits+0x3c>
 800b256:	0400      	lsls	r0, r0, #16
 800b258:	2310      	movs	r3, #16
 800b25a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b25e:	bf04      	itt	eq
 800b260:	0200      	lsleq	r0, r0, #8
 800b262:	3308      	addeq	r3, #8
 800b264:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b268:	bf04      	itt	eq
 800b26a:	0100      	lsleq	r0, r0, #4
 800b26c:	3304      	addeq	r3, #4
 800b26e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b272:	bf04      	itt	eq
 800b274:	0080      	lsleq	r0, r0, #2
 800b276:	3302      	addeq	r3, #2
 800b278:	2800      	cmp	r0, #0
 800b27a:	db05      	blt.n	800b288 <__hi0bits+0x38>
 800b27c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b280:	f103 0301 	add.w	r3, r3, #1
 800b284:	bf08      	it	eq
 800b286:	2320      	moveq	r3, #32
 800b288:	4618      	mov	r0, r3
 800b28a:	4770      	bx	lr
 800b28c:	2300      	movs	r3, #0
 800b28e:	e7e4      	b.n	800b25a <__hi0bits+0xa>

0800b290 <__lo0bits>:
 800b290:	6803      	ldr	r3, [r0, #0]
 800b292:	f013 0207 	ands.w	r2, r3, #7
 800b296:	4601      	mov	r1, r0
 800b298:	d00b      	beq.n	800b2b2 <__lo0bits+0x22>
 800b29a:	07da      	lsls	r2, r3, #31
 800b29c:	d423      	bmi.n	800b2e6 <__lo0bits+0x56>
 800b29e:	0798      	lsls	r0, r3, #30
 800b2a0:	bf49      	itett	mi
 800b2a2:	085b      	lsrmi	r3, r3, #1
 800b2a4:	089b      	lsrpl	r3, r3, #2
 800b2a6:	2001      	movmi	r0, #1
 800b2a8:	600b      	strmi	r3, [r1, #0]
 800b2aa:	bf5c      	itt	pl
 800b2ac:	600b      	strpl	r3, [r1, #0]
 800b2ae:	2002      	movpl	r0, #2
 800b2b0:	4770      	bx	lr
 800b2b2:	b298      	uxth	r0, r3
 800b2b4:	b9a8      	cbnz	r0, 800b2e2 <__lo0bits+0x52>
 800b2b6:	0c1b      	lsrs	r3, r3, #16
 800b2b8:	2010      	movs	r0, #16
 800b2ba:	b2da      	uxtb	r2, r3
 800b2bc:	b90a      	cbnz	r2, 800b2c2 <__lo0bits+0x32>
 800b2be:	3008      	adds	r0, #8
 800b2c0:	0a1b      	lsrs	r3, r3, #8
 800b2c2:	071a      	lsls	r2, r3, #28
 800b2c4:	bf04      	itt	eq
 800b2c6:	091b      	lsreq	r3, r3, #4
 800b2c8:	3004      	addeq	r0, #4
 800b2ca:	079a      	lsls	r2, r3, #30
 800b2cc:	bf04      	itt	eq
 800b2ce:	089b      	lsreq	r3, r3, #2
 800b2d0:	3002      	addeq	r0, #2
 800b2d2:	07da      	lsls	r2, r3, #31
 800b2d4:	d403      	bmi.n	800b2de <__lo0bits+0x4e>
 800b2d6:	085b      	lsrs	r3, r3, #1
 800b2d8:	f100 0001 	add.w	r0, r0, #1
 800b2dc:	d005      	beq.n	800b2ea <__lo0bits+0x5a>
 800b2de:	600b      	str	r3, [r1, #0]
 800b2e0:	4770      	bx	lr
 800b2e2:	4610      	mov	r0, r2
 800b2e4:	e7e9      	b.n	800b2ba <__lo0bits+0x2a>
 800b2e6:	2000      	movs	r0, #0
 800b2e8:	4770      	bx	lr
 800b2ea:	2020      	movs	r0, #32
 800b2ec:	4770      	bx	lr
	...

0800b2f0 <__i2b>:
 800b2f0:	b510      	push	{r4, lr}
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	2101      	movs	r1, #1
 800b2f6:	f7ff ff03 	bl	800b100 <_Balloc>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	b928      	cbnz	r0, 800b30a <__i2b+0x1a>
 800b2fe:	4b05      	ldr	r3, [pc, #20]	; (800b314 <__i2b+0x24>)
 800b300:	4805      	ldr	r0, [pc, #20]	; (800b318 <__i2b+0x28>)
 800b302:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b306:	f000 fdf5 	bl	800bef4 <__assert_func>
 800b30a:	2301      	movs	r3, #1
 800b30c:	6144      	str	r4, [r0, #20]
 800b30e:	6103      	str	r3, [r0, #16]
 800b310:	bd10      	pop	{r4, pc}
 800b312:	bf00      	nop
 800b314:	0800c5c7 	.word	0x0800c5c7
 800b318:	0800c638 	.word	0x0800c638

0800b31c <__multiply>:
 800b31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b320:	4691      	mov	r9, r2
 800b322:	690a      	ldr	r2, [r1, #16]
 800b324:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b328:	429a      	cmp	r2, r3
 800b32a:	bfb8      	it	lt
 800b32c:	460b      	movlt	r3, r1
 800b32e:	460c      	mov	r4, r1
 800b330:	bfbc      	itt	lt
 800b332:	464c      	movlt	r4, r9
 800b334:	4699      	movlt	r9, r3
 800b336:	6927      	ldr	r7, [r4, #16]
 800b338:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b33c:	68a3      	ldr	r3, [r4, #8]
 800b33e:	6861      	ldr	r1, [r4, #4]
 800b340:	eb07 060a 	add.w	r6, r7, sl
 800b344:	42b3      	cmp	r3, r6
 800b346:	b085      	sub	sp, #20
 800b348:	bfb8      	it	lt
 800b34a:	3101      	addlt	r1, #1
 800b34c:	f7ff fed8 	bl	800b100 <_Balloc>
 800b350:	b930      	cbnz	r0, 800b360 <__multiply+0x44>
 800b352:	4602      	mov	r2, r0
 800b354:	4b44      	ldr	r3, [pc, #272]	; (800b468 <__multiply+0x14c>)
 800b356:	4845      	ldr	r0, [pc, #276]	; (800b46c <__multiply+0x150>)
 800b358:	f240 115d 	movw	r1, #349	; 0x15d
 800b35c:	f000 fdca 	bl	800bef4 <__assert_func>
 800b360:	f100 0514 	add.w	r5, r0, #20
 800b364:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b368:	462b      	mov	r3, r5
 800b36a:	2200      	movs	r2, #0
 800b36c:	4543      	cmp	r3, r8
 800b36e:	d321      	bcc.n	800b3b4 <__multiply+0x98>
 800b370:	f104 0314 	add.w	r3, r4, #20
 800b374:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b378:	f109 0314 	add.w	r3, r9, #20
 800b37c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b380:	9202      	str	r2, [sp, #8]
 800b382:	1b3a      	subs	r2, r7, r4
 800b384:	3a15      	subs	r2, #21
 800b386:	f022 0203 	bic.w	r2, r2, #3
 800b38a:	3204      	adds	r2, #4
 800b38c:	f104 0115 	add.w	r1, r4, #21
 800b390:	428f      	cmp	r7, r1
 800b392:	bf38      	it	cc
 800b394:	2204      	movcc	r2, #4
 800b396:	9201      	str	r2, [sp, #4]
 800b398:	9a02      	ldr	r2, [sp, #8]
 800b39a:	9303      	str	r3, [sp, #12]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d80c      	bhi.n	800b3ba <__multiply+0x9e>
 800b3a0:	2e00      	cmp	r6, #0
 800b3a2:	dd03      	ble.n	800b3ac <__multiply+0x90>
 800b3a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d05a      	beq.n	800b462 <__multiply+0x146>
 800b3ac:	6106      	str	r6, [r0, #16]
 800b3ae:	b005      	add	sp, #20
 800b3b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b4:	f843 2b04 	str.w	r2, [r3], #4
 800b3b8:	e7d8      	b.n	800b36c <__multiply+0x50>
 800b3ba:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3be:	f1ba 0f00 	cmp.w	sl, #0
 800b3c2:	d024      	beq.n	800b40e <__multiply+0xf2>
 800b3c4:	f104 0e14 	add.w	lr, r4, #20
 800b3c8:	46a9      	mov	r9, r5
 800b3ca:	f04f 0c00 	mov.w	ip, #0
 800b3ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b3d2:	f8d9 1000 	ldr.w	r1, [r9]
 800b3d6:	fa1f fb82 	uxth.w	fp, r2
 800b3da:	b289      	uxth	r1, r1
 800b3dc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b3e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b3e4:	f8d9 2000 	ldr.w	r2, [r9]
 800b3e8:	4461      	add	r1, ip
 800b3ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b3ee:	fb0a c20b 	mla	r2, sl, fp, ip
 800b3f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b3f6:	b289      	uxth	r1, r1
 800b3f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b3fc:	4577      	cmp	r7, lr
 800b3fe:	f849 1b04 	str.w	r1, [r9], #4
 800b402:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b406:	d8e2      	bhi.n	800b3ce <__multiply+0xb2>
 800b408:	9a01      	ldr	r2, [sp, #4]
 800b40a:	f845 c002 	str.w	ip, [r5, r2]
 800b40e:	9a03      	ldr	r2, [sp, #12]
 800b410:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b414:	3304      	adds	r3, #4
 800b416:	f1b9 0f00 	cmp.w	r9, #0
 800b41a:	d020      	beq.n	800b45e <__multiply+0x142>
 800b41c:	6829      	ldr	r1, [r5, #0]
 800b41e:	f104 0c14 	add.w	ip, r4, #20
 800b422:	46ae      	mov	lr, r5
 800b424:	f04f 0a00 	mov.w	sl, #0
 800b428:	f8bc b000 	ldrh.w	fp, [ip]
 800b42c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b430:	fb09 220b 	mla	r2, r9, fp, r2
 800b434:	4492      	add	sl, r2
 800b436:	b289      	uxth	r1, r1
 800b438:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b43c:	f84e 1b04 	str.w	r1, [lr], #4
 800b440:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b444:	f8be 1000 	ldrh.w	r1, [lr]
 800b448:	0c12      	lsrs	r2, r2, #16
 800b44a:	fb09 1102 	mla	r1, r9, r2, r1
 800b44e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b452:	4567      	cmp	r7, ip
 800b454:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b458:	d8e6      	bhi.n	800b428 <__multiply+0x10c>
 800b45a:	9a01      	ldr	r2, [sp, #4]
 800b45c:	50a9      	str	r1, [r5, r2]
 800b45e:	3504      	adds	r5, #4
 800b460:	e79a      	b.n	800b398 <__multiply+0x7c>
 800b462:	3e01      	subs	r6, #1
 800b464:	e79c      	b.n	800b3a0 <__multiply+0x84>
 800b466:	bf00      	nop
 800b468:	0800c5c7 	.word	0x0800c5c7
 800b46c:	0800c638 	.word	0x0800c638

0800b470 <__pow5mult>:
 800b470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b474:	4615      	mov	r5, r2
 800b476:	f012 0203 	ands.w	r2, r2, #3
 800b47a:	4606      	mov	r6, r0
 800b47c:	460f      	mov	r7, r1
 800b47e:	d007      	beq.n	800b490 <__pow5mult+0x20>
 800b480:	4c25      	ldr	r4, [pc, #148]	; (800b518 <__pow5mult+0xa8>)
 800b482:	3a01      	subs	r2, #1
 800b484:	2300      	movs	r3, #0
 800b486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b48a:	f7ff fe9b 	bl	800b1c4 <__multadd>
 800b48e:	4607      	mov	r7, r0
 800b490:	10ad      	asrs	r5, r5, #2
 800b492:	d03d      	beq.n	800b510 <__pow5mult+0xa0>
 800b494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b496:	b97c      	cbnz	r4, 800b4b8 <__pow5mult+0x48>
 800b498:	2010      	movs	r0, #16
 800b49a:	f7ff fe29 	bl	800b0f0 <malloc>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	6270      	str	r0, [r6, #36]	; 0x24
 800b4a2:	b928      	cbnz	r0, 800b4b0 <__pow5mult+0x40>
 800b4a4:	4b1d      	ldr	r3, [pc, #116]	; (800b51c <__pow5mult+0xac>)
 800b4a6:	481e      	ldr	r0, [pc, #120]	; (800b520 <__pow5mult+0xb0>)
 800b4a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b4ac:	f000 fd22 	bl	800bef4 <__assert_func>
 800b4b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4b4:	6004      	str	r4, [r0, #0]
 800b4b6:	60c4      	str	r4, [r0, #12]
 800b4b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b4bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4c0:	b94c      	cbnz	r4, 800b4d6 <__pow5mult+0x66>
 800b4c2:	f240 2171 	movw	r1, #625	; 0x271
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7ff ff12 	bl	800b2f0 <__i2b>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4d2:	4604      	mov	r4, r0
 800b4d4:	6003      	str	r3, [r0, #0]
 800b4d6:	f04f 0900 	mov.w	r9, #0
 800b4da:	07eb      	lsls	r3, r5, #31
 800b4dc:	d50a      	bpl.n	800b4f4 <__pow5mult+0x84>
 800b4de:	4639      	mov	r1, r7
 800b4e0:	4622      	mov	r2, r4
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7ff ff1a 	bl	800b31c <__multiply>
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	4680      	mov	r8, r0
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f7ff fe47 	bl	800b180 <_Bfree>
 800b4f2:	4647      	mov	r7, r8
 800b4f4:	106d      	asrs	r5, r5, #1
 800b4f6:	d00b      	beq.n	800b510 <__pow5mult+0xa0>
 800b4f8:	6820      	ldr	r0, [r4, #0]
 800b4fa:	b938      	cbnz	r0, 800b50c <__pow5mult+0x9c>
 800b4fc:	4622      	mov	r2, r4
 800b4fe:	4621      	mov	r1, r4
 800b500:	4630      	mov	r0, r6
 800b502:	f7ff ff0b 	bl	800b31c <__multiply>
 800b506:	6020      	str	r0, [r4, #0]
 800b508:	f8c0 9000 	str.w	r9, [r0]
 800b50c:	4604      	mov	r4, r0
 800b50e:	e7e4      	b.n	800b4da <__pow5mult+0x6a>
 800b510:	4638      	mov	r0, r7
 800b512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b516:	bf00      	nop
 800b518:	0800c788 	.word	0x0800c788
 800b51c:	0800c555 	.word	0x0800c555
 800b520:	0800c638 	.word	0x0800c638

0800b524 <__lshift>:
 800b524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b528:	460c      	mov	r4, r1
 800b52a:	6849      	ldr	r1, [r1, #4]
 800b52c:	6923      	ldr	r3, [r4, #16]
 800b52e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b532:	68a3      	ldr	r3, [r4, #8]
 800b534:	4607      	mov	r7, r0
 800b536:	4691      	mov	r9, r2
 800b538:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b53c:	f108 0601 	add.w	r6, r8, #1
 800b540:	42b3      	cmp	r3, r6
 800b542:	db0b      	blt.n	800b55c <__lshift+0x38>
 800b544:	4638      	mov	r0, r7
 800b546:	f7ff fddb 	bl	800b100 <_Balloc>
 800b54a:	4605      	mov	r5, r0
 800b54c:	b948      	cbnz	r0, 800b562 <__lshift+0x3e>
 800b54e:	4602      	mov	r2, r0
 800b550:	4b2a      	ldr	r3, [pc, #168]	; (800b5fc <__lshift+0xd8>)
 800b552:	482b      	ldr	r0, [pc, #172]	; (800b600 <__lshift+0xdc>)
 800b554:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b558:	f000 fccc 	bl	800bef4 <__assert_func>
 800b55c:	3101      	adds	r1, #1
 800b55e:	005b      	lsls	r3, r3, #1
 800b560:	e7ee      	b.n	800b540 <__lshift+0x1c>
 800b562:	2300      	movs	r3, #0
 800b564:	f100 0114 	add.w	r1, r0, #20
 800b568:	f100 0210 	add.w	r2, r0, #16
 800b56c:	4618      	mov	r0, r3
 800b56e:	4553      	cmp	r3, sl
 800b570:	db37      	blt.n	800b5e2 <__lshift+0xbe>
 800b572:	6920      	ldr	r0, [r4, #16]
 800b574:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b578:	f104 0314 	add.w	r3, r4, #20
 800b57c:	f019 091f 	ands.w	r9, r9, #31
 800b580:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b584:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b588:	d02f      	beq.n	800b5ea <__lshift+0xc6>
 800b58a:	f1c9 0e20 	rsb	lr, r9, #32
 800b58e:	468a      	mov	sl, r1
 800b590:	f04f 0c00 	mov.w	ip, #0
 800b594:	681a      	ldr	r2, [r3, #0]
 800b596:	fa02 f209 	lsl.w	r2, r2, r9
 800b59a:	ea42 020c 	orr.w	r2, r2, ip
 800b59e:	f84a 2b04 	str.w	r2, [sl], #4
 800b5a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5a6:	4298      	cmp	r0, r3
 800b5a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b5ac:	d8f2      	bhi.n	800b594 <__lshift+0x70>
 800b5ae:	1b03      	subs	r3, r0, r4
 800b5b0:	3b15      	subs	r3, #21
 800b5b2:	f023 0303 	bic.w	r3, r3, #3
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	f104 0215 	add.w	r2, r4, #21
 800b5bc:	4290      	cmp	r0, r2
 800b5be:	bf38      	it	cc
 800b5c0:	2304      	movcc	r3, #4
 800b5c2:	f841 c003 	str.w	ip, [r1, r3]
 800b5c6:	f1bc 0f00 	cmp.w	ip, #0
 800b5ca:	d001      	beq.n	800b5d0 <__lshift+0xac>
 800b5cc:	f108 0602 	add.w	r6, r8, #2
 800b5d0:	3e01      	subs	r6, #1
 800b5d2:	4638      	mov	r0, r7
 800b5d4:	612e      	str	r6, [r5, #16]
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	f7ff fdd2 	bl	800b180 <_Bfree>
 800b5dc:	4628      	mov	r0, r5
 800b5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5e6:	3301      	adds	r3, #1
 800b5e8:	e7c1      	b.n	800b56e <__lshift+0x4a>
 800b5ea:	3904      	subs	r1, #4
 800b5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5f4:	4298      	cmp	r0, r3
 800b5f6:	d8f9      	bhi.n	800b5ec <__lshift+0xc8>
 800b5f8:	e7ea      	b.n	800b5d0 <__lshift+0xac>
 800b5fa:	bf00      	nop
 800b5fc:	0800c5c7 	.word	0x0800c5c7
 800b600:	0800c638 	.word	0x0800c638

0800b604 <__mcmp>:
 800b604:	b530      	push	{r4, r5, lr}
 800b606:	6902      	ldr	r2, [r0, #16]
 800b608:	690c      	ldr	r4, [r1, #16]
 800b60a:	1b12      	subs	r2, r2, r4
 800b60c:	d10e      	bne.n	800b62c <__mcmp+0x28>
 800b60e:	f100 0314 	add.w	r3, r0, #20
 800b612:	3114      	adds	r1, #20
 800b614:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b618:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b61c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b620:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b624:	42a5      	cmp	r5, r4
 800b626:	d003      	beq.n	800b630 <__mcmp+0x2c>
 800b628:	d305      	bcc.n	800b636 <__mcmp+0x32>
 800b62a:	2201      	movs	r2, #1
 800b62c:	4610      	mov	r0, r2
 800b62e:	bd30      	pop	{r4, r5, pc}
 800b630:	4283      	cmp	r3, r0
 800b632:	d3f3      	bcc.n	800b61c <__mcmp+0x18>
 800b634:	e7fa      	b.n	800b62c <__mcmp+0x28>
 800b636:	f04f 32ff 	mov.w	r2, #4294967295
 800b63a:	e7f7      	b.n	800b62c <__mcmp+0x28>

0800b63c <__mdiff>:
 800b63c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b640:	460c      	mov	r4, r1
 800b642:	4606      	mov	r6, r0
 800b644:	4611      	mov	r1, r2
 800b646:	4620      	mov	r0, r4
 800b648:	4690      	mov	r8, r2
 800b64a:	f7ff ffdb 	bl	800b604 <__mcmp>
 800b64e:	1e05      	subs	r5, r0, #0
 800b650:	d110      	bne.n	800b674 <__mdiff+0x38>
 800b652:	4629      	mov	r1, r5
 800b654:	4630      	mov	r0, r6
 800b656:	f7ff fd53 	bl	800b100 <_Balloc>
 800b65a:	b930      	cbnz	r0, 800b66a <__mdiff+0x2e>
 800b65c:	4b3a      	ldr	r3, [pc, #232]	; (800b748 <__mdiff+0x10c>)
 800b65e:	4602      	mov	r2, r0
 800b660:	f240 2132 	movw	r1, #562	; 0x232
 800b664:	4839      	ldr	r0, [pc, #228]	; (800b74c <__mdiff+0x110>)
 800b666:	f000 fc45 	bl	800bef4 <__assert_func>
 800b66a:	2301      	movs	r3, #1
 800b66c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b670:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b674:	bfa4      	itt	ge
 800b676:	4643      	movge	r3, r8
 800b678:	46a0      	movge	r8, r4
 800b67a:	4630      	mov	r0, r6
 800b67c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b680:	bfa6      	itte	ge
 800b682:	461c      	movge	r4, r3
 800b684:	2500      	movge	r5, #0
 800b686:	2501      	movlt	r5, #1
 800b688:	f7ff fd3a 	bl	800b100 <_Balloc>
 800b68c:	b920      	cbnz	r0, 800b698 <__mdiff+0x5c>
 800b68e:	4b2e      	ldr	r3, [pc, #184]	; (800b748 <__mdiff+0x10c>)
 800b690:	4602      	mov	r2, r0
 800b692:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b696:	e7e5      	b.n	800b664 <__mdiff+0x28>
 800b698:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b69c:	6926      	ldr	r6, [r4, #16]
 800b69e:	60c5      	str	r5, [r0, #12]
 800b6a0:	f104 0914 	add.w	r9, r4, #20
 800b6a4:	f108 0514 	add.w	r5, r8, #20
 800b6a8:	f100 0e14 	add.w	lr, r0, #20
 800b6ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b6b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b6b4:	f108 0210 	add.w	r2, r8, #16
 800b6b8:	46f2      	mov	sl, lr
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b6c4:	fa1f f883 	uxth.w	r8, r3
 800b6c8:	fa11 f18b 	uxtah	r1, r1, fp
 800b6cc:	0c1b      	lsrs	r3, r3, #16
 800b6ce:	eba1 0808 	sub.w	r8, r1, r8
 800b6d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6da:	fa1f f888 	uxth.w	r8, r8
 800b6de:	1419      	asrs	r1, r3, #16
 800b6e0:	454e      	cmp	r6, r9
 800b6e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6e6:	f84a 3b04 	str.w	r3, [sl], #4
 800b6ea:	d8e7      	bhi.n	800b6bc <__mdiff+0x80>
 800b6ec:	1b33      	subs	r3, r6, r4
 800b6ee:	3b15      	subs	r3, #21
 800b6f0:	f023 0303 	bic.w	r3, r3, #3
 800b6f4:	3304      	adds	r3, #4
 800b6f6:	3415      	adds	r4, #21
 800b6f8:	42a6      	cmp	r6, r4
 800b6fa:	bf38      	it	cc
 800b6fc:	2304      	movcc	r3, #4
 800b6fe:	441d      	add	r5, r3
 800b700:	4473      	add	r3, lr
 800b702:	469e      	mov	lr, r3
 800b704:	462e      	mov	r6, r5
 800b706:	4566      	cmp	r6, ip
 800b708:	d30e      	bcc.n	800b728 <__mdiff+0xec>
 800b70a:	f10c 0203 	add.w	r2, ip, #3
 800b70e:	1b52      	subs	r2, r2, r5
 800b710:	f022 0203 	bic.w	r2, r2, #3
 800b714:	3d03      	subs	r5, #3
 800b716:	45ac      	cmp	ip, r5
 800b718:	bf38      	it	cc
 800b71a:	2200      	movcc	r2, #0
 800b71c:	441a      	add	r2, r3
 800b71e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b722:	b17b      	cbz	r3, 800b744 <__mdiff+0x108>
 800b724:	6107      	str	r7, [r0, #16]
 800b726:	e7a3      	b.n	800b670 <__mdiff+0x34>
 800b728:	f856 8b04 	ldr.w	r8, [r6], #4
 800b72c:	fa11 f288 	uxtah	r2, r1, r8
 800b730:	1414      	asrs	r4, r2, #16
 800b732:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b736:	b292      	uxth	r2, r2
 800b738:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b73c:	f84e 2b04 	str.w	r2, [lr], #4
 800b740:	1421      	asrs	r1, r4, #16
 800b742:	e7e0      	b.n	800b706 <__mdiff+0xca>
 800b744:	3f01      	subs	r7, #1
 800b746:	e7ea      	b.n	800b71e <__mdiff+0xe2>
 800b748:	0800c5c7 	.word	0x0800c5c7
 800b74c:	0800c638 	.word	0x0800c638

0800b750 <__d2b>:
 800b750:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b754:	4689      	mov	r9, r1
 800b756:	2101      	movs	r1, #1
 800b758:	ec57 6b10 	vmov	r6, r7, d0
 800b75c:	4690      	mov	r8, r2
 800b75e:	f7ff fccf 	bl	800b100 <_Balloc>
 800b762:	4604      	mov	r4, r0
 800b764:	b930      	cbnz	r0, 800b774 <__d2b+0x24>
 800b766:	4602      	mov	r2, r0
 800b768:	4b25      	ldr	r3, [pc, #148]	; (800b800 <__d2b+0xb0>)
 800b76a:	4826      	ldr	r0, [pc, #152]	; (800b804 <__d2b+0xb4>)
 800b76c:	f240 310a 	movw	r1, #778	; 0x30a
 800b770:	f000 fbc0 	bl	800bef4 <__assert_func>
 800b774:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b77c:	bb35      	cbnz	r5, 800b7cc <__d2b+0x7c>
 800b77e:	2e00      	cmp	r6, #0
 800b780:	9301      	str	r3, [sp, #4]
 800b782:	d028      	beq.n	800b7d6 <__d2b+0x86>
 800b784:	4668      	mov	r0, sp
 800b786:	9600      	str	r6, [sp, #0]
 800b788:	f7ff fd82 	bl	800b290 <__lo0bits>
 800b78c:	9900      	ldr	r1, [sp, #0]
 800b78e:	b300      	cbz	r0, 800b7d2 <__d2b+0x82>
 800b790:	9a01      	ldr	r2, [sp, #4]
 800b792:	f1c0 0320 	rsb	r3, r0, #32
 800b796:	fa02 f303 	lsl.w	r3, r2, r3
 800b79a:	430b      	orrs	r3, r1
 800b79c:	40c2      	lsrs	r2, r0
 800b79e:	6163      	str	r3, [r4, #20]
 800b7a0:	9201      	str	r2, [sp, #4]
 800b7a2:	9b01      	ldr	r3, [sp, #4]
 800b7a4:	61a3      	str	r3, [r4, #24]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	bf14      	ite	ne
 800b7aa:	2202      	movne	r2, #2
 800b7ac:	2201      	moveq	r2, #1
 800b7ae:	6122      	str	r2, [r4, #16]
 800b7b0:	b1d5      	cbz	r5, 800b7e8 <__d2b+0x98>
 800b7b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7b6:	4405      	add	r5, r0
 800b7b8:	f8c9 5000 	str.w	r5, [r9]
 800b7bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7c0:	f8c8 0000 	str.w	r0, [r8]
 800b7c4:	4620      	mov	r0, r4
 800b7c6:	b003      	add	sp, #12
 800b7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7d0:	e7d5      	b.n	800b77e <__d2b+0x2e>
 800b7d2:	6161      	str	r1, [r4, #20]
 800b7d4:	e7e5      	b.n	800b7a2 <__d2b+0x52>
 800b7d6:	a801      	add	r0, sp, #4
 800b7d8:	f7ff fd5a 	bl	800b290 <__lo0bits>
 800b7dc:	9b01      	ldr	r3, [sp, #4]
 800b7de:	6163      	str	r3, [r4, #20]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	6122      	str	r2, [r4, #16]
 800b7e4:	3020      	adds	r0, #32
 800b7e6:	e7e3      	b.n	800b7b0 <__d2b+0x60>
 800b7e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7f0:	f8c9 0000 	str.w	r0, [r9]
 800b7f4:	6918      	ldr	r0, [r3, #16]
 800b7f6:	f7ff fd2b 	bl	800b250 <__hi0bits>
 800b7fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7fe:	e7df      	b.n	800b7c0 <__d2b+0x70>
 800b800:	0800c5c7 	.word	0x0800c5c7
 800b804:	0800c638 	.word	0x0800c638

0800b808 <_calloc_r>:
 800b808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b80a:	fba1 2402 	umull	r2, r4, r1, r2
 800b80e:	b94c      	cbnz	r4, 800b824 <_calloc_r+0x1c>
 800b810:	4611      	mov	r1, r2
 800b812:	9201      	str	r2, [sp, #4]
 800b814:	f000 f87a 	bl	800b90c <_malloc_r>
 800b818:	9a01      	ldr	r2, [sp, #4]
 800b81a:	4605      	mov	r5, r0
 800b81c:	b930      	cbnz	r0, 800b82c <_calloc_r+0x24>
 800b81e:	4628      	mov	r0, r5
 800b820:	b003      	add	sp, #12
 800b822:	bd30      	pop	{r4, r5, pc}
 800b824:	220c      	movs	r2, #12
 800b826:	6002      	str	r2, [r0, #0]
 800b828:	2500      	movs	r5, #0
 800b82a:	e7f8      	b.n	800b81e <_calloc_r+0x16>
 800b82c:	4621      	mov	r1, r4
 800b82e:	f7fe f901 	bl	8009a34 <memset>
 800b832:	e7f4      	b.n	800b81e <_calloc_r+0x16>

0800b834 <_free_r>:
 800b834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b836:	2900      	cmp	r1, #0
 800b838:	d044      	beq.n	800b8c4 <_free_r+0x90>
 800b83a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b83e:	9001      	str	r0, [sp, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f1a1 0404 	sub.w	r4, r1, #4
 800b846:	bfb8      	it	lt
 800b848:	18e4      	addlt	r4, r4, r3
 800b84a:	f000 fcdf 	bl	800c20c <__malloc_lock>
 800b84e:	4a1e      	ldr	r2, [pc, #120]	; (800b8c8 <_free_r+0x94>)
 800b850:	9801      	ldr	r0, [sp, #4]
 800b852:	6813      	ldr	r3, [r2, #0]
 800b854:	b933      	cbnz	r3, 800b864 <_free_r+0x30>
 800b856:	6063      	str	r3, [r4, #4]
 800b858:	6014      	str	r4, [r2, #0]
 800b85a:	b003      	add	sp, #12
 800b85c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b860:	f000 bcda 	b.w	800c218 <__malloc_unlock>
 800b864:	42a3      	cmp	r3, r4
 800b866:	d908      	bls.n	800b87a <_free_r+0x46>
 800b868:	6825      	ldr	r5, [r4, #0]
 800b86a:	1961      	adds	r1, r4, r5
 800b86c:	428b      	cmp	r3, r1
 800b86e:	bf01      	itttt	eq
 800b870:	6819      	ldreq	r1, [r3, #0]
 800b872:	685b      	ldreq	r3, [r3, #4]
 800b874:	1949      	addeq	r1, r1, r5
 800b876:	6021      	streq	r1, [r4, #0]
 800b878:	e7ed      	b.n	800b856 <_free_r+0x22>
 800b87a:	461a      	mov	r2, r3
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	b10b      	cbz	r3, 800b884 <_free_r+0x50>
 800b880:	42a3      	cmp	r3, r4
 800b882:	d9fa      	bls.n	800b87a <_free_r+0x46>
 800b884:	6811      	ldr	r1, [r2, #0]
 800b886:	1855      	adds	r5, r2, r1
 800b888:	42a5      	cmp	r5, r4
 800b88a:	d10b      	bne.n	800b8a4 <_free_r+0x70>
 800b88c:	6824      	ldr	r4, [r4, #0]
 800b88e:	4421      	add	r1, r4
 800b890:	1854      	adds	r4, r2, r1
 800b892:	42a3      	cmp	r3, r4
 800b894:	6011      	str	r1, [r2, #0]
 800b896:	d1e0      	bne.n	800b85a <_free_r+0x26>
 800b898:	681c      	ldr	r4, [r3, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	6053      	str	r3, [r2, #4]
 800b89e:	4421      	add	r1, r4
 800b8a0:	6011      	str	r1, [r2, #0]
 800b8a2:	e7da      	b.n	800b85a <_free_r+0x26>
 800b8a4:	d902      	bls.n	800b8ac <_free_r+0x78>
 800b8a6:	230c      	movs	r3, #12
 800b8a8:	6003      	str	r3, [r0, #0]
 800b8aa:	e7d6      	b.n	800b85a <_free_r+0x26>
 800b8ac:	6825      	ldr	r5, [r4, #0]
 800b8ae:	1961      	adds	r1, r4, r5
 800b8b0:	428b      	cmp	r3, r1
 800b8b2:	bf04      	itt	eq
 800b8b4:	6819      	ldreq	r1, [r3, #0]
 800b8b6:	685b      	ldreq	r3, [r3, #4]
 800b8b8:	6063      	str	r3, [r4, #4]
 800b8ba:	bf04      	itt	eq
 800b8bc:	1949      	addeq	r1, r1, r5
 800b8be:	6021      	streq	r1, [r4, #0]
 800b8c0:	6054      	str	r4, [r2, #4]
 800b8c2:	e7ca      	b.n	800b85a <_free_r+0x26>
 800b8c4:	b003      	add	sp, #12
 800b8c6:	bd30      	pop	{r4, r5, pc}
 800b8c8:	24000454 	.word	0x24000454

0800b8cc <sbrk_aligned>:
 800b8cc:	b570      	push	{r4, r5, r6, lr}
 800b8ce:	4e0e      	ldr	r6, [pc, #56]	; (800b908 <sbrk_aligned+0x3c>)
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	6831      	ldr	r1, [r6, #0]
 800b8d4:	4605      	mov	r5, r0
 800b8d6:	b911      	cbnz	r1, 800b8de <sbrk_aligned+0x12>
 800b8d8:	f000 f9e6 	bl	800bca8 <_sbrk_r>
 800b8dc:	6030      	str	r0, [r6, #0]
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	f000 f9e1 	bl	800bca8 <_sbrk_r>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	d00a      	beq.n	800b900 <sbrk_aligned+0x34>
 800b8ea:	1cc4      	adds	r4, r0, #3
 800b8ec:	f024 0403 	bic.w	r4, r4, #3
 800b8f0:	42a0      	cmp	r0, r4
 800b8f2:	d007      	beq.n	800b904 <sbrk_aligned+0x38>
 800b8f4:	1a21      	subs	r1, r4, r0
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	f000 f9d6 	bl	800bca8 <_sbrk_r>
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	d101      	bne.n	800b904 <sbrk_aligned+0x38>
 800b900:	f04f 34ff 	mov.w	r4, #4294967295
 800b904:	4620      	mov	r0, r4
 800b906:	bd70      	pop	{r4, r5, r6, pc}
 800b908:	24000458 	.word	0x24000458

0800b90c <_malloc_r>:
 800b90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b910:	1ccd      	adds	r5, r1, #3
 800b912:	f025 0503 	bic.w	r5, r5, #3
 800b916:	3508      	adds	r5, #8
 800b918:	2d0c      	cmp	r5, #12
 800b91a:	bf38      	it	cc
 800b91c:	250c      	movcc	r5, #12
 800b91e:	2d00      	cmp	r5, #0
 800b920:	4607      	mov	r7, r0
 800b922:	db01      	blt.n	800b928 <_malloc_r+0x1c>
 800b924:	42a9      	cmp	r1, r5
 800b926:	d905      	bls.n	800b934 <_malloc_r+0x28>
 800b928:	230c      	movs	r3, #12
 800b92a:	603b      	str	r3, [r7, #0]
 800b92c:	2600      	movs	r6, #0
 800b92e:	4630      	mov	r0, r6
 800b930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b934:	4e2e      	ldr	r6, [pc, #184]	; (800b9f0 <_malloc_r+0xe4>)
 800b936:	f000 fc69 	bl	800c20c <__malloc_lock>
 800b93a:	6833      	ldr	r3, [r6, #0]
 800b93c:	461c      	mov	r4, r3
 800b93e:	bb34      	cbnz	r4, 800b98e <_malloc_r+0x82>
 800b940:	4629      	mov	r1, r5
 800b942:	4638      	mov	r0, r7
 800b944:	f7ff ffc2 	bl	800b8cc <sbrk_aligned>
 800b948:	1c43      	adds	r3, r0, #1
 800b94a:	4604      	mov	r4, r0
 800b94c:	d14d      	bne.n	800b9ea <_malloc_r+0xde>
 800b94e:	6834      	ldr	r4, [r6, #0]
 800b950:	4626      	mov	r6, r4
 800b952:	2e00      	cmp	r6, #0
 800b954:	d140      	bne.n	800b9d8 <_malloc_r+0xcc>
 800b956:	6823      	ldr	r3, [r4, #0]
 800b958:	4631      	mov	r1, r6
 800b95a:	4638      	mov	r0, r7
 800b95c:	eb04 0803 	add.w	r8, r4, r3
 800b960:	f000 f9a2 	bl	800bca8 <_sbrk_r>
 800b964:	4580      	cmp	r8, r0
 800b966:	d13a      	bne.n	800b9de <_malloc_r+0xd2>
 800b968:	6821      	ldr	r1, [r4, #0]
 800b96a:	3503      	adds	r5, #3
 800b96c:	1a6d      	subs	r5, r5, r1
 800b96e:	f025 0503 	bic.w	r5, r5, #3
 800b972:	3508      	adds	r5, #8
 800b974:	2d0c      	cmp	r5, #12
 800b976:	bf38      	it	cc
 800b978:	250c      	movcc	r5, #12
 800b97a:	4629      	mov	r1, r5
 800b97c:	4638      	mov	r0, r7
 800b97e:	f7ff ffa5 	bl	800b8cc <sbrk_aligned>
 800b982:	3001      	adds	r0, #1
 800b984:	d02b      	beq.n	800b9de <_malloc_r+0xd2>
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	442b      	add	r3, r5
 800b98a:	6023      	str	r3, [r4, #0]
 800b98c:	e00e      	b.n	800b9ac <_malloc_r+0xa0>
 800b98e:	6822      	ldr	r2, [r4, #0]
 800b990:	1b52      	subs	r2, r2, r5
 800b992:	d41e      	bmi.n	800b9d2 <_malloc_r+0xc6>
 800b994:	2a0b      	cmp	r2, #11
 800b996:	d916      	bls.n	800b9c6 <_malloc_r+0xba>
 800b998:	1961      	adds	r1, r4, r5
 800b99a:	42a3      	cmp	r3, r4
 800b99c:	6025      	str	r5, [r4, #0]
 800b99e:	bf18      	it	ne
 800b9a0:	6059      	strne	r1, [r3, #4]
 800b9a2:	6863      	ldr	r3, [r4, #4]
 800b9a4:	bf08      	it	eq
 800b9a6:	6031      	streq	r1, [r6, #0]
 800b9a8:	5162      	str	r2, [r4, r5]
 800b9aa:	604b      	str	r3, [r1, #4]
 800b9ac:	4638      	mov	r0, r7
 800b9ae:	f104 060b 	add.w	r6, r4, #11
 800b9b2:	f000 fc31 	bl	800c218 <__malloc_unlock>
 800b9b6:	f026 0607 	bic.w	r6, r6, #7
 800b9ba:	1d23      	adds	r3, r4, #4
 800b9bc:	1af2      	subs	r2, r6, r3
 800b9be:	d0b6      	beq.n	800b92e <_malloc_r+0x22>
 800b9c0:	1b9b      	subs	r3, r3, r6
 800b9c2:	50a3      	str	r3, [r4, r2]
 800b9c4:	e7b3      	b.n	800b92e <_malloc_r+0x22>
 800b9c6:	6862      	ldr	r2, [r4, #4]
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	bf0c      	ite	eq
 800b9cc:	6032      	streq	r2, [r6, #0]
 800b9ce:	605a      	strne	r2, [r3, #4]
 800b9d0:	e7ec      	b.n	800b9ac <_malloc_r+0xa0>
 800b9d2:	4623      	mov	r3, r4
 800b9d4:	6864      	ldr	r4, [r4, #4]
 800b9d6:	e7b2      	b.n	800b93e <_malloc_r+0x32>
 800b9d8:	4634      	mov	r4, r6
 800b9da:	6876      	ldr	r6, [r6, #4]
 800b9dc:	e7b9      	b.n	800b952 <_malloc_r+0x46>
 800b9de:	230c      	movs	r3, #12
 800b9e0:	603b      	str	r3, [r7, #0]
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	f000 fc18 	bl	800c218 <__malloc_unlock>
 800b9e8:	e7a1      	b.n	800b92e <_malloc_r+0x22>
 800b9ea:	6025      	str	r5, [r4, #0]
 800b9ec:	e7de      	b.n	800b9ac <_malloc_r+0xa0>
 800b9ee:	bf00      	nop
 800b9f0:	24000454 	.word	0x24000454

0800b9f4 <__sfputc_r>:
 800b9f4:	6893      	ldr	r3, [r2, #8]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	b410      	push	{r4}
 800b9fc:	6093      	str	r3, [r2, #8]
 800b9fe:	da08      	bge.n	800ba12 <__sfputc_r+0x1e>
 800ba00:	6994      	ldr	r4, [r2, #24]
 800ba02:	42a3      	cmp	r3, r4
 800ba04:	db01      	blt.n	800ba0a <__sfputc_r+0x16>
 800ba06:	290a      	cmp	r1, #10
 800ba08:	d103      	bne.n	800ba12 <__sfputc_r+0x1e>
 800ba0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba0e:	f000 b99f 	b.w	800bd50 <__swbuf_r>
 800ba12:	6813      	ldr	r3, [r2, #0]
 800ba14:	1c58      	adds	r0, r3, #1
 800ba16:	6010      	str	r0, [r2, #0]
 800ba18:	7019      	strb	r1, [r3, #0]
 800ba1a:	4608      	mov	r0, r1
 800ba1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <__sfputs_r>:
 800ba22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba24:	4606      	mov	r6, r0
 800ba26:	460f      	mov	r7, r1
 800ba28:	4614      	mov	r4, r2
 800ba2a:	18d5      	adds	r5, r2, r3
 800ba2c:	42ac      	cmp	r4, r5
 800ba2e:	d101      	bne.n	800ba34 <__sfputs_r+0x12>
 800ba30:	2000      	movs	r0, #0
 800ba32:	e007      	b.n	800ba44 <__sfputs_r+0x22>
 800ba34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba38:	463a      	mov	r2, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7ff ffda 	bl	800b9f4 <__sfputc_r>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d1f3      	bne.n	800ba2c <__sfputs_r+0xa>
 800ba44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba48 <_vfiprintf_r>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	b09d      	sub	sp, #116	; 0x74
 800ba50:	4614      	mov	r4, r2
 800ba52:	4698      	mov	r8, r3
 800ba54:	4606      	mov	r6, r0
 800ba56:	b118      	cbz	r0, 800ba60 <_vfiprintf_r+0x18>
 800ba58:	6983      	ldr	r3, [r0, #24]
 800ba5a:	b90b      	cbnz	r3, 800ba60 <_vfiprintf_r+0x18>
 800ba5c:	f7ff faa2 	bl	800afa4 <__sinit>
 800ba60:	4b89      	ldr	r3, [pc, #548]	; (800bc88 <_vfiprintf_r+0x240>)
 800ba62:	429d      	cmp	r5, r3
 800ba64:	d11b      	bne.n	800ba9e <_vfiprintf_r+0x56>
 800ba66:	6875      	ldr	r5, [r6, #4]
 800ba68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba6a:	07d9      	lsls	r1, r3, #31
 800ba6c:	d405      	bmi.n	800ba7a <_vfiprintf_r+0x32>
 800ba6e:	89ab      	ldrh	r3, [r5, #12]
 800ba70:	059a      	lsls	r2, r3, #22
 800ba72:	d402      	bmi.n	800ba7a <_vfiprintf_r+0x32>
 800ba74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba76:	f7ff fb38 	bl	800b0ea <__retarget_lock_acquire_recursive>
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	071b      	lsls	r3, r3, #28
 800ba7e:	d501      	bpl.n	800ba84 <_vfiprintf_r+0x3c>
 800ba80:	692b      	ldr	r3, [r5, #16]
 800ba82:	b9eb      	cbnz	r3, 800bac0 <_vfiprintf_r+0x78>
 800ba84:	4629      	mov	r1, r5
 800ba86:	4630      	mov	r0, r6
 800ba88:	f000 f9c6 	bl	800be18 <__swsetup_r>
 800ba8c:	b1c0      	cbz	r0, 800bac0 <_vfiprintf_r+0x78>
 800ba8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba90:	07dc      	lsls	r4, r3, #31
 800ba92:	d50e      	bpl.n	800bab2 <_vfiprintf_r+0x6a>
 800ba94:	f04f 30ff 	mov.w	r0, #4294967295
 800ba98:	b01d      	add	sp, #116	; 0x74
 800ba9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9e:	4b7b      	ldr	r3, [pc, #492]	; (800bc8c <_vfiprintf_r+0x244>)
 800baa0:	429d      	cmp	r5, r3
 800baa2:	d101      	bne.n	800baa8 <_vfiprintf_r+0x60>
 800baa4:	68b5      	ldr	r5, [r6, #8]
 800baa6:	e7df      	b.n	800ba68 <_vfiprintf_r+0x20>
 800baa8:	4b79      	ldr	r3, [pc, #484]	; (800bc90 <_vfiprintf_r+0x248>)
 800baaa:	429d      	cmp	r5, r3
 800baac:	bf08      	it	eq
 800baae:	68f5      	ldreq	r5, [r6, #12]
 800bab0:	e7da      	b.n	800ba68 <_vfiprintf_r+0x20>
 800bab2:	89ab      	ldrh	r3, [r5, #12]
 800bab4:	0598      	lsls	r0, r3, #22
 800bab6:	d4ed      	bmi.n	800ba94 <_vfiprintf_r+0x4c>
 800bab8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baba:	f7ff fb17 	bl	800b0ec <__retarget_lock_release_recursive>
 800babe:	e7e9      	b.n	800ba94 <_vfiprintf_r+0x4c>
 800bac0:	2300      	movs	r3, #0
 800bac2:	9309      	str	r3, [sp, #36]	; 0x24
 800bac4:	2320      	movs	r3, #32
 800bac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800baca:	f8cd 800c 	str.w	r8, [sp, #12]
 800bace:	2330      	movs	r3, #48	; 0x30
 800bad0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc94 <_vfiprintf_r+0x24c>
 800bad4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bad8:	f04f 0901 	mov.w	r9, #1
 800badc:	4623      	mov	r3, r4
 800bade:	469a      	mov	sl, r3
 800bae0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bae4:	b10a      	cbz	r2, 800baea <_vfiprintf_r+0xa2>
 800bae6:	2a25      	cmp	r2, #37	; 0x25
 800bae8:	d1f9      	bne.n	800bade <_vfiprintf_r+0x96>
 800baea:	ebba 0b04 	subs.w	fp, sl, r4
 800baee:	d00b      	beq.n	800bb08 <_vfiprintf_r+0xc0>
 800baf0:	465b      	mov	r3, fp
 800baf2:	4622      	mov	r2, r4
 800baf4:	4629      	mov	r1, r5
 800baf6:	4630      	mov	r0, r6
 800baf8:	f7ff ff93 	bl	800ba22 <__sfputs_r>
 800bafc:	3001      	adds	r0, #1
 800bafe:	f000 80aa 	beq.w	800bc56 <_vfiprintf_r+0x20e>
 800bb02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb04:	445a      	add	r2, fp
 800bb06:	9209      	str	r2, [sp, #36]	; 0x24
 800bb08:	f89a 3000 	ldrb.w	r3, [sl]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f000 80a2 	beq.w	800bc56 <_vfiprintf_r+0x20e>
 800bb12:	2300      	movs	r3, #0
 800bb14:	f04f 32ff 	mov.w	r2, #4294967295
 800bb18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb1c:	f10a 0a01 	add.w	sl, sl, #1
 800bb20:	9304      	str	r3, [sp, #16]
 800bb22:	9307      	str	r3, [sp, #28]
 800bb24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb28:	931a      	str	r3, [sp, #104]	; 0x68
 800bb2a:	4654      	mov	r4, sl
 800bb2c:	2205      	movs	r2, #5
 800bb2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb32:	4858      	ldr	r0, [pc, #352]	; (800bc94 <_vfiprintf_r+0x24c>)
 800bb34:	f7f4 fbdc 	bl	80002f0 <memchr>
 800bb38:	9a04      	ldr	r2, [sp, #16]
 800bb3a:	b9d8      	cbnz	r0, 800bb74 <_vfiprintf_r+0x12c>
 800bb3c:	06d1      	lsls	r1, r2, #27
 800bb3e:	bf44      	itt	mi
 800bb40:	2320      	movmi	r3, #32
 800bb42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb46:	0713      	lsls	r3, r2, #28
 800bb48:	bf44      	itt	mi
 800bb4a:	232b      	movmi	r3, #43	; 0x2b
 800bb4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb50:	f89a 3000 	ldrb.w	r3, [sl]
 800bb54:	2b2a      	cmp	r3, #42	; 0x2a
 800bb56:	d015      	beq.n	800bb84 <_vfiprintf_r+0x13c>
 800bb58:	9a07      	ldr	r2, [sp, #28]
 800bb5a:	4654      	mov	r4, sl
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	f04f 0c0a 	mov.w	ip, #10
 800bb62:	4621      	mov	r1, r4
 800bb64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb68:	3b30      	subs	r3, #48	; 0x30
 800bb6a:	2b09      	cmp	r3, #9
 800bb6c:	d94e      	bls.n	800bc0c <_vfiprintf_r+0x1c4>
 800bb6e:	b1b0      	cbz	r0, 800bb9e <_vfiprintf_r+0x156>
 800bb70:	9207      	str	r2, [sp, #28]
 800bb72:	e014      	b.n	800bb9e <_vfiprintf_r+0x156>
 800bb74:	eba0 0308 	sub.w	r3, r0, r8
 800bb78:	fa09 f303 	lsl.w	r3, r9, r3
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	9304      	str	r3, [sp, #16]
 800bb80:	46a2      	mov	sl, r4
 800bb82:	e7d2      	b.n	800bb2a <_vfiprintf_r+0xe2>
 800bb84:	9b03      	ldr	r3, [sp, #12]
 800bb86:	1d19      	adds	r1, r3, #4
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	9103      	str	r1, [sp, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	bfbb      	ittet	lt
 800bb90:	425b      	neglt	r3, r3
 800bb92:	f042 0202 	orrlt.w	r2, r2, #2
 800bb96:	9307      	strge	r3, [sp, #28]
 800bb98:	9307      	strlt	r3, [sp, #28]
 800bb9a:	bfb8      	it	lt
 800bb9c:	9204      	strlt	r2, [sp, #16]
 800bb9e:	7823      	ldrb	r3, [r4, #0]
 800bba0:	2b2e      	cmp	r3, #46	; 0x2e
 800bba2:	d10c      	bne.n	800bbbe <_vfiprintf_r+0x176>
 800bba4:	7863      	ldrb	r3, [r4, #1]
 800bba6:	2b2a      	cmp	r3, #42	; 0x2a
 800bba8:	d135      	bne.n	800bc16 <_vfiprintf_r+0x1ce>
 800bbaa:	9b03      	ldr	r3, [sp, #12]
 800bbac:	1d1a      	adds	r2, r3, #4
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	9203      	str	r2, [sp, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	bfb8      	it	lt
 800bbb6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbba:	3402      	adds	r4, #2
 800bbbc:	9305      	str	r3, [sp, #20]
 800bbbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bca4 <_vfiprintf_r+0x25c>
 800bbc2:	7821      	ldrb	r1, [r4, #0]
 800bbc4:	2203      	movs	r2, #3
 800bbc6:	4650      	mov	r0, sl
 800bbc8:	f7f4 fb92 	bl	80002f0 <memchr>
 800bbcc:	b140      	cbz	r0, 800bbe0 <_vfiprintf_r+0x198>
 800bbce:	2340      	movs	r3, #64	; 0x40
 800bbd0:	eba0 000a 	sub.w	r0, r0, sl
 800bbd4:	fa03 f000 	lsl.w	r0, r3, r0
 800bbd8:	9b04      	ldr	r3, [sp, #16]
 800bbda:	4303      	orrs	r3, r0
 800bbdc:	3401      	adds	r4, #1
 800bbde:	9304      	str	r3, [sp, #16]
 800bbe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe4:	482c      	ldr	r0, [pc, #176]	; (800bc98 <_vfiprintf_r+0x250>)
 800bbe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbea:	2206      	movs	r2, #6
 800bbec:	f7f4 fb80 	bl	80002f0 <memchr>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d03f      	beq.n	800bc74 <_vfiprintf_r+0x22c>
 800bbf4:	4b29      	ldr	r3, [pc, #164]	; (800bc9c <_vfiprintf_r+0x254>)
 800bbf6:	bb1b      	cbnz	r3, 800bc40 <_vfiprintf_r+0x1f8>
 800bbf8:	9b03      	ldr	r3, [sp, #12]
 800bbfa:	3307      	adds	r3, #7
 800bbfc:	f023 0307 	bic.w	r3, r3, #7
 800bc00:	3308      	adds	r3, #8
 800bc02:	9303      	str	r3, [sp, #12]
 800bc04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc06:	443b      	add	r3, r7
 800bc08:	9309      	str	r3, [sp, #36]	; 0x24
 800bc0a:	e767      	b.n	800badc <_vfiprintf_r+0x94>
 800bc0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc10:	460c      	mov	r4, r1
 800bc12:	2001      	movs	r0, #1
 800bc14:	e7a5      	b.n	800bb62 <_vfiprintf_r+0x11a>
 800bc16:	2300      	movs	r3, #0
 800bc18:	3401      	adds	r4, #1
 800bc1a:	9305      	str	r3, [sp, #20]
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f04f 0c0a 	mov.w	ip, #10
 800bc22:	4620      	mov	r0, r4
 800bc24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc28:	3a30      	subs	r2, #48	; 0x30
 800bc2a:	2a09      	cmp	r2, #9
 800bc2c:	d903      	bls.n	800bc36 <_vfiprintf_r+0x1ee>
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d0c5      	beq.n	800bbbe <_vfiprintf_r+0x176>
 800bc32:	9105      	str	r1, [sp, #20]
 800bc34:	e7c3      	b.n	800bbbe <_vfiprintf_r+0x176>
 800bc36:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e7f0      	b.n	800bc22 <_vfiprintf_r+0x1da>
 800bc40:	ab03      	add	r3, sp, #12
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	462a      	mov	r2, r5
 800bc46:	4b16      	ldr	r3, [pc, #88]	; (800bca0 <_vfiprintf_r+0x258>)
 800bc48:	a904      	add	r1, sp, #16
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	f7fd ff8c 	bl	8009b68 <_printf_float>
 800bc50:	4607      	mov	r7, r0
 800bc52:	1c78      	adds	r0, r7, #1
 800bc54:	d1d6      	bne.n	800bc04 <_vfiprintf_r+0x1bc>
 800bc56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc58:	07d9      	lsls	r1, r3, #31
 800bc5a:	d405      	bmi.n	800bc68 <_vfiprintf_r+0x220>
 800bc5c:	89ab      	ldrh	r3, [r5, #12]
 800bc5e:	059a      	lsls	r2, r3, #22
 800bc60:	d402      	bmi.n	800bc68 <_vfiprintf_r+0x220>
 800bc62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc64:	f7ff fa42 	bl	800b0ec <__retarget_lock_release_recursive>
 800bc68:	89ab      	ldrh	r3, [r5, #12]
 800bc6a:	065b      	lsls	r3, r3, #25
 800bc6c:	f53f af12 	bmi.w	800ba94 <_vfiprintf_r+0x4c>
 800bc70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc72:	e711      	b.n	800ba98 <_vfiprintf_r+0x50>
 800bc74:	ab03      	add	r3, sp, #12
 800bc76:	9300      	str	r3, [sp, #0]
 800bc78:	462a      	mov	r2, r5
 800bc7a:	4b09      	ldr	r3, [pc, #36]	; (800bca0 <_vfiprintf_r+0x258>)
 800bc7c:	a904      	add	r1, sp, #16
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f7fe f9fe 	bl	800a080 <_printf_i>
 800bc84:	e7e4      	b.n	800bc50 <_vfiprintf_r+0x208>
 800bc86:	bf00      	nop
 800bc88:	0800c5f8 	.word	0x0800c5f8
 800bc8c:	0800c618 	.word	0x0800c618
 800bc90:	0800c5d8 	.word	0x0800c5d8
 800bc94:	0800c794 	.word	0x0800c794
 800bc98:	0800c79e 	.word	0x0800c79e
 800bc9c:	08009b69 	.word	0x08009b69
 800bca0:	0800ba23 	.word	0x0800ba23
 800bca4:	0800c79a 	.word	0x0800c79a

0800bca8 <_sbrk_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	4d06      	ldr	r5, [pc, #24]	; (800bcc4 <_sbrk_r+0x1c>)
 800bcac:	2300      	movs	r3, #0
 800bcae:	4604      	mov	r4, r0
 800bcb0:	4608      	mov	r0, r1
 800bcb2:	602b      	str	r3, [r5, #0]
 800bcb4:	f7f5 fe24 	bl	8001900 <_sbrk>
 800bcb8:	1c43      	adds	r3, r0, #1
 800bcba:	d102      	bne.n	800bcc2 <_sbrk_r+0x1a>
 800bcbc:	682b      	ldr	r3, [r5, #0]
 800bcbe:	b103      	cbz	r3, 800bcc2 <_sbrk_r+0x1a>
 800bcc0:	6023      	str	r3, [r4, #0]
 800bcc2:	bd38      	pop	{r3, r4, r5, pc}
 800bcc4:	2400045c 	.word	0x2400045c

0800bcc8 <__sread>:
 800bcc8:	b510      	push	{r4, lr}
 800bcca:	460c      	mov	r4, r1
 800bccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd0:	f000 faa8 	bl	800c224 <_read_r>
 800bcd4:	2800      	cmp	r0, #0
 800bcd6:	bfab      	itete	ge
 800bcd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcda:	89a3      	ldrhlt	r3, [r4, #12]
 800bcdc:	181b      	addge	r3, r3, r0
 800bcde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bce2:	bfac      	ite	ge
 800bce4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bce6:	81a3      	strhlt	r3, [r4, #12]
 800bce8:	bd10      	pop	{r4, pc}

0800bcea <__swrite>:
 800bcea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcee:	461f      	mov	r7, r3
 800bcf0:	898b      	ldrh	r3, [r1, #12]
 800bcf2:	05db      	lsls	r3, r3, #23
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	460c      	mov	r4, r1
 800bcf8:	4616      	mov	r6, r2
 800bcfa:	d505      	bpl.n	800bd08 <__swrite+0x1e>
 800bcfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd00:	2302      	movs	r3, #2
 800bd02:	2200      	movs	r2, #0
 800bd04:	f000 f9f8 	bl	800c0f8 <_lseek_r>
 800bd08:	89a3      	ldrh	r3, [r4, #12]
 800bd0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd12:	81a3      	strh	r3, [r4, #12]
 800bd14:	4632      	mov	r2, r6
 800bd16:	463b      	mov	r3, r7
 800bd18:	4628      	mov	r0, r5
 800bd1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd1e:	f000 b869 	b.w	800bdf4 <_write_r>

0800bd22 <__sseek>:
 800bd22:	b510      	push	{r4, lr}
 800bd24:	460c      	mov	r4, r1
 800bd26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd2a:	f000 f9e5 	bl	800c0f8 <_lseek_r>
 800bd2e:	1c43      	adds	r3, r0, #1
 800bd30:	89a3      	ldrh	r3, [r4, #12]
 800bd32:	bf15      	itete	ne
 800bd34:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd3e:	81a3      	strheq	r3, [r4, #12]
 800bd40:	bf18      	it	ne
 800bd42:	81a3      	strhne	r3, [r4, #12]
 800bd44:	bd10      	pop	{r4, pc}

0800bd46 <__sclose>:
 800bd46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4a:	f000 b8f1 	b.w	800bf30 <_close_r>
	...

0800bd50 <__swbuf_r>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	460e      	mov	r6, r1
 800bd54:	4614      	mov	r4, r2
 800bd56:	4605      	mov	r5, r0
 800bd58:	b118      	cbz	r0, 800bd62 <__swbuf_r+0x12>
 800bd5a:	6983      	ldr	r3, [r0, #24]
 800bd5c:	b90b      	cbnz	r3, 800bd62 <__swbuf_r+0x12>
 800bd5e:	f7ff f921 	bl	800afa4 <__sinit>
 800bd62:	4b21      	ldr	r3, [pc, #132]	; (800bde8 <__swbuf_r+0x98>)
 800bd64:	429c      	cmp	r4, r3
 800bd66:	d12b      	bne.n	800bdc0 <__swbuf_r+0x70>
 800bd68:	686c      	ldr	r4, [r5, #4]
 800bd6a:	69a3      	ldr	r3, [r4, #24]
 800bd6c:	60a3      	str	r3, [r4, #8]
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	071a      	lsls	r2, r3, #28
 800bd72:	d52f      	bpl.n	800bdd4 <__swbuf_r+0x84>
 800bd74:	6923      	ldr	r3, [r4, #16]
 800bd76:	b36b      	cbz	r3, 800bdd4 <__swbuf_r+0x84>
 800bd78:	6923      	ldr	r3, [r4, #16]
 800bd7a:	6820      	ldr	r0, [r4, #0]
 800bd7c:	1ac0      	subs	r0, r0, r3
 800bd7e:	6963      	ldr	r3, [r4, #20]
 800bd80:	b2f6      	uxtb	r6, r6
 800bd82:	4283      	cmp	r3, r0
 800bd84:	4637      	mov	r7, r6
 800bd86:	dc04      	bgt.n	800bd92 <__swbuf_r+0x42>
 800bd88:	4621      	mov	r1, r4
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	f000 f966 	bl	800c05c <_fflush_r>
 800bd90:	bb30      	cbnz	r0, 800bde0 <__swbuf_r+0x90>
 800bd92:	68a3      	ldr	r3, [r4, #8]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	60a3      	str	r3, [r4, #8]
 800bd98:	6823      	ldr	r3, [r4, #0]
 800bd9a:	1c5a      	adds	r2, r3, #1
 800bd9c:	6022      	str	r2, [r4, #0]
 800bd9e:	701e      	strb	r6, [r3, #0]
 800bda0:	6963      	ldr	r3, [r4, #20]
 800bda2:	3001      	adds	r0, #1
 800bda4:	4283      	cmp	r3, r0
 800bda6:	d004      	beq.n	800bdb2 <__swbuf_r+0x62>
 800bda8:	89a3      	ldrh	r3, [r4, #12]
 800bdaa:	07db      	lsls	r3, r3, #31
 800bdac:	d506      	bpl.n	800bdbc <__swbuf_r+0x6c>
 800bdae:	2e0a      	cmp	r6, #10
 800bdb0:	d104      	bne.n	800bdbc <__swbuf_r+0x6c>
 800bdb2:	4621      	mov	r1, r4
 800bdb4:	4628      	mov	r0, r5
 800bdb6:	f000 f951 	bl	800c05c <_fflush_r>
 800bdba:	b988      	cbnz	r0, 800bde0 <__swbuf_r+0x90>
 800bdbc:	4638      	mov	r0, r7
 800bdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bdc0:	4b0a      	ldr	r3, [pc, #40]	; (800bdec <__swbuf_r+0x9c>)
 800bdc2:	429c      	cmp	r4, r3
 800bdc4:	d101      	bne.n	800bdca <__swbuf_r+0x7a>
 800bdc6:	68ac      	ldr	r4, [r5, #8]
 800bdc8:	e7cf      	b.n	800bd6a <__swbuf_r+0x1a>
 800bdca:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <__swbuf_r+0xa0>)
 800bdcc:	429c      	cmp	r4, r3
 800bdce:	bf08      	it	eq
 800bdd0:	68ec      	ldreq	r4, [r5, #12]
 800bdd2:	e7ca      	b.n	800bd6a <__swbuf_r+0x1a>
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f000 f81e 	bl	800be18 <__swsetup_r>
 800bddc:	2800      	cmp	r0, #0
 800bdde:	d0cb      	beq.n	800bd78 <__swbuf_r+0x28>
 800bde0:	f04f 37ff 	mov.w	r7, #4294967295
 800bde4:	e7ea      	b.n	800bdbc <__swbuf_r+0x6c>
 800bde6:	bf00      	nop
 800bde8:	0800c5f8 	.word	0x0800c5f8
 800bdec:	0800c618 	.word	0x0800c618
 800bdf0:	0800c5d8 	.word	0x0800c5d8

0800bdf4 <_write_r>:
 800bdf4:	b538      	push	{r3, r4, r5, lr}
 800bdf6:	4d07      	ldr	r5, [pc, #28]	; (800be14 <_write_r+0x20>)
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	4608      	mov	r0, r1
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	2200      	movs	r2, #0
 800be00:	602a      	str	r2, [r5, #0]
 800be02:	461a      	mov	r2, r3
 800be04:	f7f5 fd2b 	bl	800185e <_write>
 800be08:	1c43      	adds	r3, r0, #1
 800be0a:	d102      	bne.n	800be12 <_write_r+0x1e>
 800be0c:	682b      	ldr	r3, [r5, #0]
 800be0e:	b103      	cbz	r3, 800be12 <_write_r+0x1e>
 800be10:	6023      	str	r3, [r4, #0]
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	2400045c 	.word	0x2400045c

0800be18 <__swsetup_r>:
 800be18:	4b32      	ldr	r3, [pc, #200]	; (800bee4 <__swsetup_r+0xcc>)
 800be1a:	b570      	push	{r4, r5, r6, lr}
 800be1c:	681d      	ldr	r5, [r3, #0]
 800be1e:	4606      	mov	r6, r0
 800be20:	460c      	mov	r4, r1
 800be22:	b125      	cbz	r5, 800be2e <__swsetup_r+0x16>
 800be24:	69ab      	ldr	r3, [r5, #24]
 800be26:	b913      	cbnz	r3, 800be2e <__swsetup_r+0x16>
 800be28:	4628      	mov	r0, r5
 800be2a:	f7ff f8bb 	bl	800afa4 <__sinit>
 800be2e:	4b2e      	ldr	r3, [pc, #184]	; (800bee8 <__swsetup_r+0xd0>)
 800be30:	429c      	cmp	r4, r3
 800be32:	d10f      	bne.n	800be54 <__swsetup_r+0x3c>
 800be34:	686c      	ldr	r4, [r5, #4]
 800be36:	89a3      	ldrh	r3, [r4, #12]
 800be38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be3c:	0719      	lsls	r1, r3, #28
 800be3e:	d42c      	bmi.n	800be9a <__swsetup_r+0x82>
 800be40:	06dd      	lsls	r5, r3, #27
 800be42:	d411      	bmi.n	800be68 <__swsetup_r+0x50>
 800be44:	2309      	movs	r3, #9
 800be46:	6033      	str	r3, [r6, #0]
 800be48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be4c:	81a3      	strh	r3, [r4, #12]
 800be4e:	f04f 30ff 	mov.w	r0, #4294967295
 800be52:	e03e      	b.n	800bed2 <__swsetup_r+0xba>
 800be54:	4b25      	ldr	r3, [pc, #148]	; (800beec <__swsetup_r+0xd4>)
 800be56:	429c      	cmp	r4, r3
 800be58:	d101      	bne.n	800be5e <__swsetup_r+0x46>
 800be5a:	68ac      	ldr	r4, [r5, #8]
 800be5c:	e7eb      	b.n	800be36 <__swsetup_r+0x1e>
 800be5e:	4b24      	ldr	r3, [pc, #144]	; (800bef0 <__swsetup_r+0xd8>)
 800be60:	429c      	cmp	r4, r3
 800be62:	bf08      	it	eq
 800be64:	68ec      	ldreq	r4, [r5, #12]
 800be66:	e7e6      	b.n	800be36 <__swsetup_r+0x1e>
 800be68:	0758      	lsls	r0, r3, #29
 800be6a:	d512      	bpl.n	800be92 <__swsetup_r+0x7a>
 800be6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be6e:	b141      	cbz	r1, 800be82 <__swsetup_r+0x6a>
 800be70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be74:	4299      	cmp	r1, r3
 800be76:	d002      	beq.n	800be7e <__swsetup_r+0x66>
 800be78:	4630      	mov	r0, r6
 800be7a:	f7ff fcdb 	bl	800b834 <_free_r>
 800be7e:	2300      	movs	r3, #0
 800be80:	6363      	str	r3, [r4, #52]	; 0x34
 800be82:	89a3      	ldrh	r3, [r4, #12]
 800be84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be88:	81a3      	strh	r3, [r4, #12]
 800be8a:	2300      	movs	r3, #0
 800be8c:	6063      	str	r3, [r4, #4]
 800be8e:	6923      	ldr	r3, [r4, #16]
 800be90:	6023      	str	r3, [r4, #0]
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	f043 0308 	orr.w	r3, r3, #8
 800be98:	81a3      	strh	r3, [r4, #12]
 800be9a:	6923      	ldr	r3, [r4, #16]
 800be9c:	b94b      	cbnz	r3, 800beb2 <__swsetup_r+0x9a>
 800be9e:	89a3      	ldrh	r3, [r4, #12]
 800bea0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bea8:	d003      	beq.n	800beb2 <__swsetup_r+0x9a>
 800beaa:	4621      	mov	r1, r4
 800beac:	4630      	mov	r0, r6
 800beae:	f000 f95b 	bl	800c168 <__smakebuf_r>
 800beb2:	89a0      	ldrh	r0, [r4, #12]
 800beb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800beb8:	f010 0301 	ands.w	r3, r0, #1
 800bebc:	d00a      	beq.n	800bed4 <__swsetup_r+0xbc>
 800bebe:	2300      	movs	r3, #0
 800bec0:	60a3      	str	r3, [r4, #8]
 800bec2:	6963      	ldr	r3, [r4, #20]
 800bec4:	425b      	negs	r3, r3
 800bec6:	61a3      	str	r3, [r4, #24]
 800bec8:	6923      	ldr	r3, [r4, #16]
 800beca:	b943      	cbnz	r3, 800bede <__swsetup_r+0xc6>
 800becc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bed0:	d1ba      	bne.n	800be48 <__swsetup_r+0x30>
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	0781      	lsls	r1, r0, #30
 800bed6:	bf58      	it	pl
 800bed8:	6963      	ldrpl	r3, [r4, #20]
 800beda:	60a3      	str	r3, [r4, #8]
 800bedc:	e7f4      	b.n	800bec8 <__swsetup_r+0xb0>
 800bede:	2000      	movs	r0, #0
 800bee0:	e7f7      	b.n	800bed2 <__swsetup_r+0xba>
 800bee2:	bf00      	nop
 800bee4:	24000010 	.word	0x24000010
 800bee8:	0800c5f8 	.word	0x0800c5f8
 800beec:	0800c618 	.word	0x0800c618
 800bef0:	0800c5d8 	.word	0x0800c5d8

0800bef4 <__assert_func>:
 800bef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bef6:	4614      	mov	r4, r2
 800bef8:	461a      	mov	r2, r3
 800befa:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <__assert_func+0x2c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4605      	mov	r5, r0
 800bf00:	68d8      	ldr	r0, [r3, #12]
 800bf02:	b14c      	cbz	r4, 800bf18 <__assert_func+0x24>
 800bf04:	4b07      	ldr	r3, [pc, #28]	; (800bf24 <__assert_func+0x30>)
 800bf06:	9100      	str	r1, [sp, #0]
 800bf08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf0c:	4906      	ldr	r1, [pc, #24]	; (800bf28 <__assert_func+0x34>)
 800bf0e:	462b      	mov	r3, r5
 800bf10:	f000 f8e0 	bl	800c0d4 <fiprintf>
 800bf14:	f000 f9a5 	bl	800c262 <abort>
 800bf18:	4b04      	ldr	r3, [pc, #16]	; (800bf2c <__assert_func+0x38>)
 800bf1a:	461c      	mov	r4, r3
 800bf1c:	e7f3      	b.n	800bf06 <__assert_func+0x12>
 800bf1e:	bf00      	nop
 800bf20:	24000010 	.word	0x24000010
 800bf24:	0800c7a5 	.word	0x0800c7a5
 800bf28:	0800c7b2 	.word	0x0800c7b2
 800bf2c:	0800c7e0 	.word	0x0800c7e0

0800bf30 <_close_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4d06      	ldr	r5, [pc, #24]	; (800bf4c <_close_r+0x1c>)
 800bf34:	2300      	movs	r3, #0
 800bf36:	4604      	mov	r4, r0
 800bf38:	4608      	mov	r0, r1
 800bf3a:	602b      	str	r3, [r5, #0]
 800bf3c:	f7f5 fcab 	bl	8001896 <_close>
 800bf40:	1c43      	adds	r3, r0, #1
 800bf42:	d102      	bne.n	800bf4a <_close_r+0x1a>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b103      	cbz	r3, 800bf4a <_close_r+0x1a>
 800bf48:	6023      	str	r3, [r4, #0]
 800bf4a:	bd38      	pop	{r3, r4, r5, pc}
 800bf4c:	2400045c 	.word	0x2400045c

0800bf50 <__sflush_r>:
 800bf50:	898a      	ldrh	r2, [r1, #12]
 800bf52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf56:	4605      	mov	r5, r0
 800bf58:	0710      	lsls	r0, r2, #28
 800bf5a:	460c      	mov	r4, r1
 800bf5c:	d458      	bmi.n	800c010 <__sflush_r+0xc0>
 800bf5e:	684b      	ldr	r3, [r1, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	dc05      	bgt.n	800bf70 <__sflush_r+0x20>
 800bf64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	dc02      	bgt.n	800bf70 <__sflush_r+0x20>
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf72:	2e00      	cmp	r6, #0
 800bf74:	d0f9      	beq.n	800bf6a <__sflush_r+0x1a>
 800bf76:	2300      	movs	r3, #0
 800bf78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf7c:	682f      	ldr	r7, [r5, #0]
 800bf7e:	602b      	str	r3, [r5, #0]
 800bf80:	d032      	beq.n	800bfe8 <__sflush_r+0x98>
 800bf82:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf84:	89a3      	ldrh	r3, [r4, #12]
 800bf86:	075a      	lsls	r2, r3, #29
 800bf88:	d505      	bpl.n	800bf96 <__sflush_r+0x46>
 800bf8a:	6863      	ldr	r3, [r4, #4]
 800bf8c:	1ac0      	subs	r0, r0, r3
 800bf8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf90:	b10b      	cbz	r3, 800bf96 <__sflush_r+0x46>
 800bf92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf94:	1ac0      	subs	r0, r0, r3
 800bf96:	2300      	movs	r3, #0
 800bf98:	4602      	mov	r2, r0
 800bf9a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf9c:	6a21      	ldr	r1, [r4, #32]
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	47b0      	blx	r6
 800bfa2:	1c43      	adds	r3, r0, #1
 800bfa4:	89a3      	ldrh	r3, [r4, #12]
 800bfa6:	d106      	bne.n	800bfb6 <__sflush_r+0x66>
 800bfa8:	6829      	ldr	r1, [r5, #0]
 800bfaa:	291d      	cmp	r1, #29
 800bfac:	d82c      	bhi.n	800c008 <__sflush_r+0xb8>
 800bfae:	4a2a      	ldr	r2, [pc, #168]	; (800c058 <__sflush_r+0x108>)
 800bfb0:	40ca      	lsrs	r2, r1
 800bfb2:	07d6      	lsls	r6, r2, #31
 800bfb4:	d528      	bpl.n	800c008 <__sflush_r+0xb8>
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	6062      	str	r2, [r4, #4]
 800bfba:	04d9      	lsls	r1, r3, #19
 800bfbc:	6922      	ldr	r2, [r4, #16]
 800bfbe:	6022      	str	r2, [r4, #0]
 800bfc0:	d504      	bpl.n	800bfcc <__sflush_r+0x7c>
 800bfc2:	1c42      	adds	r2, r0, #1
 800bfc4:	d101      	bne.n	800bfca <__sflush_r+0x7a>
 800bfc6:	682b      	ldr	r3, [r5, #0]
 800bfc8:	b903      	cbnz	r3, 800bfcc <__sflush_r+0x7c>
 800bfca:	6560      	str	r0, [r4, #84]	; 0x54
 800bfcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfce:	602f      	str	r7, [r5, #0]
 800bfd0:	2900      	cmp	r1, #0
 800bfd2:	d0ca      	beq.n	800bf6a <__sflush_r+0x1a>
 800bfd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfd8:	4299      	cmp	r1, r3
 800bfda:	d002      	beq.n	800bfe2 <__sflush_r+0x92>
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f7ff fc29 	bl	800b834 <_free_r>
 800bfe2:	2000      	movs	r0, #0
 800bfe4:	6360      	str	r0, [r4, #52]	; 0x34
 800bfe6:	e7c1      	b.n	800bf6c <__sflush_r+0x1c>
 800bfe8:	6a21      	ldr	r1, [r4, #32]
 800bfea:	2301      	movs	r3, #1
 800bfec:	4628      	mov	r0, r5
 800bfee:	47b0      	blx	r6
 800bff0:	1c41      	adds	r1, r0, #1
 800bff2:	d1c7      	bne.n	800bf84 <__sflush_r+0x34>
 800bff4:	682b      	ldr	r3, [r5, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d0c4      	beq.n	800bf84 <__sflush_r+0x34>
 800bffa:	2b1d      	cmp	r3, #29
 800bffc:	d001      	beq.n	800c002 <__sflush_r+0xb2>
 800bffe:	2b16      	cmp	r3, #22
 800c000:	d101      	bne.n	800c006 <__sflush_r+0xb6>
 800c002:	602f      	str	r7, [r5, #0]
 800c004:	e7b1      	b.n	800bf6a <__sflush_r+0x1a>
 800c006:	89a3      	ldrh	r3, [r4, #12]
 800c008:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c00c:	81a3      	strh	r3, [r4, #12]
 800c00e:	e7ad      	b.n	800bf6c <__sflush_r+0x1c>
 800c010:	690f      	ldr	r7, [r1, #16]
 800c012:	2f00      	cmp	r7, #0
 800c014:	d0a9      	beq.n	800bf6a <__sflush_r+0x1a>
 800c016:	0793      	lsls	r3, r2, #30
 800c018:	680e      	ldr	r6, [r1, #0]
 800c01a:	bf08      	it	eq
 800c01c:	694b      	ldreq	r3, [r1, #20]
 800c01e:	600f      	str	r7, [r1, #0]
 800c020:	bf18      	it	ne
 800c022:	2300      	movne	r3, #0
 800c024:	eba6 0807 	sub.w	r8, r6, r7
 800c028:	608b      	str	r3, [r1, #8]
 800c02a:	f1b8 0f00 	cmp.w	r8, #0
 800c02e:	dd9c      	ble.n	800bf6a <__sflush_r+0x1a>
 800c030:	6a21      	ldr	r1, [r4, #32]
 800c032:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c034:	4643      	mov	r3, r8
 800c036:	463a      	mov	r2, r7
 800c038:	4628      	mov	r0, r5
 800c03a:	47b0      	blx	r6
 800c03c:	2800      	cmp	r0, #0
 800c03e:	dc06      	bgt.n	800c04e <__sflush_r+0xfe>
 800c040:	89a3      	ldrh	r3, [r4, #12]
 800c042:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c046:	81a3      	strh	r3, [r4, #12]
 800c048:	f04f 30ff 	mov.w	r0, #4294967295
 800c04c:	e78e      	b.n	800bf6c <__sflush_r+0x1c>
 800c04e:	4407      	add	r7, r0
 800c050:	eba8 0800 	sub.w	r8, r8, r0
 800c054:	e7e9      	b.n	800c02a <__sflush_r+0xda>
 800c056:	bf00      	nop
 800c058:	20400001 	.word	0x20400001

0800c05c <_fflush_r>:
 800c05c:	b538      	push	{r3, r4, r5, lr}
 800c05e:	690b      	ldr	r3, [r1, #16]
 800c060:	4605      	mov	r5, r0
 800c062:	460c      	mov	r4, r1
 800c064:	b913      	cbnz	r3, 800c06c <_fflush_r+0x10>
 800c066:	2500      	movs	r5, #0
 800c068:	4628      	mov	r0, r5
 800c06a:	bd38      	pop	{r3, r4, r5, pc}
 800c06c:	b118      	cbz	r0, 800c076 <_fflush_r+0x1a>
 800c06e:	6983      	ldr	r3, [r0, #24]
 800c070:	b90b      	cbnz	r3, 800c076 <_fflush_r+0x1a>
 800c072:	f7fe ff97 	bl	800afa4 <__sinit>
 800c076:	4b14      	ldr	r3, [pc, #80]	; (800c0c8 <_fflush_r+0x6c>)
 800c078:	429c      	cmp	r4, r3
 800c07a:	d11b      	bne.n	800c0b4 <_fflush_r+0x58>
 800c07c:	686c      	ldr	r4, [r5, #4]
 800c07e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d0ef      	beq.n	800c066 <_fflush_r+0xa>
 800c086:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c088:	07d0      	lsls	r0, r2, #31
 800c08a:	d404      	bmi.n	800c096 <_fflush_r+0x3a>
 800c08c:	0599      	lsls	r1, r3, #22
 800c08e:	d402      	bmi.n	800c096 <_fflush_r+0x3a>
 800c090:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c092:	f7ff f82a 	bl	800b0ea <__retarget_lock_acquire_recursive>
 800c096:	4628      	mov	r0, r5
 800c098:	4621      	mov	r1, r4
 800c09a:	f7ff ff59 	bl	800bf50 <__sflush_r>
 800c09e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c0a0:	07da      	lsls	r2, r3, #31
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	d4e0      	bmi.n	800c068 <_fflush_r+0xc>
 800c0a6:	89a3      	ldrh	r3, [r4, #12]
 800c0a8:	059b      	lsls	r3, r3, #22
 800c0aa:	d4dd      	bmi.n	800c068 <_fflush_r+0xc>
 800c0ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c0ae:	f7ff f81d 	bl	800b0ec <__retarget_lock_release_recursive>
 800c0b2:	e7d9      	b.n	800c068 <_fflush_r+0xc>
 800c0b4:	4b05      	ldr	r3, [pc, #20]	; (800c0cc <_fflush_r+0x70>)
 800c0b6:	429c      	cmp	r4, r3
 800c0b8:	d101      	bne.n	800c0be <_fflush_r+0x62>
 800c0ba:	68ac      	ldr	r4, [r5, #8]
 800c0bc:	e7df      	b.n	800c07e <_fflush_r+0x22>
 800c0be:	4b04      	ldr	r3, [pc, #16]	; (800c0d0 <_fflush_r+0x74>)
 800c0c0:	429c      	cmp	r4, r3
 800c0c2:	bf08      	it	eq
 800c0c4:	68ec      	ldreq	r4, [r5, #12]
 800c0c6:	e7da      	b.n	800c07e <_fflush_r+0x22>
 800c0c8:	0800c5f8 	.word	0x0800c5f8
 800c0cc:	0800c618 	.word	0x0800c618
 800c0d0:	0800c5d8 	.word	0x0800c5d8

0800c0d4 <fiprintf>:
 800c0d4:	b40e      	push	{r1, r2, r3}
 800c0d6:	b503      	push	{r0, r1, lr}
 800c0d8:	4601      	mov	r1, r0
 800c0da:	ab03      	add	r3, sp, #12
 800c0dc:	4805      	ldr	r0, [pc, #20]	; (800c0f4 <fiprintf+0x20>)
 800c0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0e2:	6800      	ldr	r0, [r0, #0]
 800c0e4:	9301      	str	r3, [sp, #4]
 800c0e6:	f7ff fcaf 	bl	800ba48 <_vfiprintf_r>
 800c0ea:	b002      	add	sp, #8
 800c0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0f0:	b003      	add	sp, #12
 800c0f2:	4770      	bx	lr
 800c0f4:	24000010 	.word	0x24000010

0800c0f8 <_lseek_r>:
 800c0f8:	b538      	push	{r3, r4, r5, lr}
 800c0fa:	4d07      	ldr	r5, [pc, #28]	; (800c118 <_lseek_r+0x20>)
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	4608      	mov	r0, r1
 800c100:	4611      	mov	r1, r2
 800c102:	2200      	movs	r2, #0
 800c104:	602a      	str	r2, [r5, #0]
 800c106:	461a      	mov	r2, r3
 800c108:	f7f5 fbec 	bl	80018e4 <_lseek>
 800c10c:	1c43      	adds	r3, r0, #1
 800c10e:	d102      	bne.n	800c116 <_lseek_r+0x1e>
 800c110:	682b      	ldr	r3, [r5, #0]
 800c112:	b103      	cbz	r3, 800c116 <_lseek_r+0x1e>
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	bd38      	pop	{r3, r4, r5, pc}
 800c118:	2400045c 	.word	0x2400045c

0800c11c <__swhatbuf_r>:
 800c11c:	b570      	push	{r4, r5, r6, lr}
 800c11e:	460e      	mov	r6, r1
 800c120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c124:	2900      	cmp	r1, #0
 800c126:	b096      	sub	sp, #88	; 0x58
 800c128:	4614      	mov	r4, r2
 800c12a:	461d      	mov	r5, r3
 800c12c:	da08      	bge.n	800c140 <__swhatbuf_r+0x24>
 800c12e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c132:	2200      	movs	r2, #0
 800c134:	602a      	str	r2, [r5, #0]
 800c136:	061a      	lsls	r2, r3, #24
 800c138:	d410      	bmi.n	800c15c <__swhatbuf_r+0x40>
 800c13a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c13e:	e00e      	b.n	800c15e <__swhatbuf_r+0x42>
 800c140:	466a      	mov	r2, sp
 800c142:	f000 f895 	bl	800c270 <_fstat_r>
 800c146:	2800      	cmp	r0, #0
 800c148:	dbf1      	blt.n	800c12e <__swhatbuf_r+0x12>
 800c14a:	9a01      	ldr	r2, [sp, #4]
 800c14c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c150:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c154:	425a      	negs	r2, r3
 800c156:	415a      	adcs	r2, r3
 800c158:	602a      	str	r2, [r5, #0]
 800c15a:	e7ee      	b.n	800c13a <__swhatbuf_r+0x1e>
 800c15c:	2340      	movs	r3, #64	; 0x40
 800c15e:	2000      	movs	r0, #0
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	b016      	add	sp, #88	; 0x58
 800c164:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c168 <__smakebuf_r>:
 800c168:	898b      	ldrh	r3, [r1, #12]
 800c16a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c16c:	079d      	lsls	r5, r3, #30
 800c16e:	4606      	mov	r6, r0
 800c170:	460c      	mov	r4, r1
 800c172:	d507      	bpl.n	800c184 <__smakebuf_r+0x1c>
 800c174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c178:	6023      	str	r3, [r4, #0]
 800c17a:	6123      	str	r3, [r4, #16]
 800c17c:	2301      	movs	r3, #1
 800c17e:	6163      	str	r3, [r4, #20]
 800c180:	b002      	add	sp, #8
 800c182:	bd70      	pop	{r4, r5, r6, pc}
 800c184:	ab01      	add	r3, sp, #4
 800c186:	466a      	mov	r2, sp
 800c188:	f7ff ffc8 	bl	800c11c <__swhatbuf_r>
 800c18c:	9900      	ldr	r1, [sp, #0]
 800c18e:	4605      	mov	r5, r0
 800c190:	4630      	mov	r0, r6
 800c192:	f7ff fbbb 	bl	800b90c <_malloc_r>
 800c196:	b948      	cbnz	r0, 800c1ac <__smakebuf_r+0x44>
 800c198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19c:	059a      	lsls	r2, r3, #22
 800c19e:	d4ef      	bmi.n	800c180 <__smakebuf_r+0x18>
 800c1a0:	f023 0303 	bic.w	r3, r3, #3
 800c1a4:	f043 0302 	orr.w	r3, r3, #2
 800c1a8:	81a3      	strh	r3, [r4, #12]
 800c1aa:	e7e3      	b.n	800c174 <__smakebuf_r+0xc>
 800c1ac:	4b0d      	ldr	r3, [pc, #52]	; (800c1e4 <__smakebuf_r+0x7c>)
 800c1ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800c1b0:	89a3      	ldrh	r3, [r4, #12]
 800c1b2:	6020      	str	r0, [r4, #0]
 800c1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1b8:	81a3      	strh	r3, [r4, #12]
 800c1ba:	9b00      	ldr	r3, [sp, #0]
 800c1bc:	6163      	str	r3, [r4, #20]
 800c1be:	9b01      	ldr	r3, [sp, #4]
 800c1c0:	6120      	str	r0, [r4, #16]
 800c1c2:	b15b      	cbz	r3, 800c1dc <__smakebuf_r+0x74>
 800c1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c1c8:	4630      	mov	r0, r6
 800c1ca:	f000 f863 	bl	800c294 <_isatty_r>
 800c1ce:	b128      	cbz	r0, 800c1dc <__smakebuf_r+0x74>
 800c1d0:	89a3      	ldrh	r3, [r4, #12]
 800c1d2:	f023 0303 	bic.w	r3, r3, #3
 800c1d6:	f043 0301 	orr.w	r3, r3, #1
 800c1da:	81a3      	strh	r3, [r4, #12]
 800c1dc:	89a0      	ldrh	r0, [r4, #12]
 800c1de:	4305      	orrs	r5, r0
 800c1e0:	81a5      	strh	r5, [r4, #12]
 800c1e2:	e7cd      	b.n	800c180 <__smakebuf_r+0x18>
 800c1e4:	0800af3d 	.word	0x0800af3d

0800c1e8 <__ascii_mbtowc>:
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	b901      	cbnz	r1, 800c1ee <__ascii_mbtowc+0x6>
 800c1ec:	a901      	add	r1, sp, #4
 800c1ee:	b142      	cbz	r2, 800c202 <__ascii_mbtowc+0x1a>
 800c1f0:	b14b      	cbz	r3, 800c206 <__ascii_mbtowc+0x1e>
 800c1f2:	7813      	ldrb	r3, [r2, #0]
 800c1f4:	600b      	str	r3, [r1, #0]
 800c1f6:	7812      	ldrb	r2, [r2, #0]
 800c1f8:	1e10      	subs	r0, r2, #0
 800c1fa:	bf18      	it	ne
 800c1fc:	2001      	movne	r0, #1
 800c1fe:	b002      	add	sp, #8
 800c200:	4770      	bx	lr
 800c202:	4610      	mov	r0, r2
 800c204:	e7fb      	b.n	800c1fe <__ascii_mbtowc+0x16>
 800c206:	f06f 0001 	mvn.w	r0, #1
 800c20a:	e7f8      	b.n	800c1fe <__ascii_mbtowc+0x16>

0800c20c <__malloc_lock>:
 800c20c:	4801      	ldr	r0, [pc, #4]	; (800c214 <__malloc_lock+0x8>)
 800c20e:	f7fe bf6c 	b.w	800b0ea <__retarget_lock_acquire_recursive>
 800c212:	bf00      	nop
 800c214:	24000450 	.word	0x24000450

0800c218 <__malloc_unlock>:
 800c218:	4801      	ldr	r0, [pc, #4]	; (800c220 <__malloc_unlock+0x8>)
 800c21a:	f7fe bf67 	b.w	800b0ec <__retarget_lock_release_recursive>
 800c21e:	bf00      	nop
 800c220:	24000450 	.word	0x24000450

0800c224 <_read_r>:
 800c224:	b538      	push	{r3, r4, r5, lr}
 800c226:	4d07      	ldr	r5, [pc, #28]	; (800c244 <_read_r+0x20>)
 800c228:	4604      	mov	r4, r0
 800c22a:	4608      	mov	r0, r1
 800c22c:	4611      	mov	r1, r2
 800c22e:	2200      	movs	r2, #0
 800c230:	602a      	str	r2, [r5, #0]
 800c232:	461a      	mov	r2, r3
 800c234:	f7f5 faf6 	bl	8001824 <_read>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_read_r+0x1e>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_read_r+0x1e>
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	2400045c 	.word	0x2400045c

0800c248 <__ascii_wctomb>:
 800c248:	b149      	cbz	r1, 800c25e <__ascii_wctomb+0x16>
 800c24a:	2aff      	cmp	r2, #255	; 0xff
 800c24c:	bf85      	ittet	hi
 800c24e:	238a      	movhi	r3, #138	; 0x8a
 800c250:	6003      	strhi	r3, [r0, #0]
 800c252:	700a      	strbls	r2, [r1, #0]
 800c254:	f04f 30ff 	movhi.w	r0, #4294967295
 800c258:	bf98      	it	ls
 800c25a:	2001      	movls	r0, #1
 800c25c:	4770      	bx	lr
 800c25e:	4608      	mov	r0, r1
 800c260:	4770      	bx	lr

0800c262 <abort>:
 800c262:	b508      	push	{r3, lr}
 800c264:	2006      	movs	r0, #6
 800c266:	f000 f84d 	bl	800c304 <raise>
 800c26a:	2001      	movs	r0, #1
 800c26c:	f7f5 fad0 	bl	8001810 <_exit>

0800c270 <_fstat_r>:
 800c270:	b538      	push	{r3, r4, r5, lr}
 800c272:	4d07      	ldr	r5, [pc, #28]	; (800c290 <_fstat_r+0x20>)
 800c274:	2300      	movs	r3, #0
 800c276:	4604      	mov	r4, r0
 800c278:	4608      	mov	r0, r1
 800c27a:	4611      	mov	r1, r2
 800c27c:	602b      	str	r3, [r5, #0]
 800c27e:	f7f5 fb16 	bl	80018ae <_fstat>
 800c282:	1c43      	adds	r3, r0, #1
 800c284:	d102      	bne.n	800c28c <_fstat_r+0x1c>
 800c286:	682b      	ldr	r3, [r5, #0]
 800c288:	b103      	cbz	r3, 800c28c <_fstat_r+0x1c>
 800c28a:	6023      	str	r3, [r4, #0]
 800c28c:	bd38      	pop	{r3, r4, r5, pc}
 800c28e:	bf00      	nop
 800c290:	2400045c 	.word	0x2400045c

0800c294 <_isatty_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4d06      	ldr	r5, [pc, #24]	; (800c2b0 <_isatty_r+0x1c>)
 800c298:	2300      	movs	r3, #0
 800c29a:	4604      	mov	r4, r0
 800c29c:	4608      	mov	r0, r1
 800c29e:	602b      	str	r3, [r5, #0]
 800c2a0:	f7f5 fb15 	bl	80018ce <_isatty>
 800c2a4:	1c43      	adds	r3, r0, #1
 800c2a6:	d102      	bne.n	800c2ae <_isatty_r+0x1a>
 800c2a8:	682b      	ldr	r3, [r5, #0]
 800c2aa:	b103      	cbz	r3, 800c2ae <_isatty_r+0x1a>
 800c2ac:	6023      	str	r3, [r4, #0]
 800c2ae:	bd38      	pop	{r3, r4, r5, pc}
 800c2b0:	2400045c 	.word	0x2400045c

0800c2b4 <_raise_r>:
 800c2b4:	291f      	cmp	r1, #31
 800c2b6:	b538      	push	{r3, r4, r5, lr}
 800c2b8:	4604      	mov	r4, r0
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	d904      	bls.n	800c2c8 <_raise_r+0x14>
 800c2be:	2316      	movs	r3, #22
 800c2c0:	6003      	str	r3, [r0, #0]
 800c2c2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c2ca:	b112      	cbz	r2, 800c2d2 <_raise_r+0x1e>
 800c2cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2d0:	b94b      	cbnz	r3, 800c2e6 <_raise_r+0x32>
 800c2d2:	4620      	mov	r0, r4
 800c2d4:	f000 f830 	bl	800c338 <_getpid_r>
 800c2d8:	462a      	mov	r2, r5
 800c2da:	4601      	mov	r1, r0
 800c2dc:	4620      	mov	r0, r4
 800c2de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2e2:	f000 b817 	b.w	800c314 <_kill_r>
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d00a      	beq.n	800c300 <_raise_r+0x4c>
 800c2ea:	1c59      	adds	r1, r3, #1
 800c2ec:	d103      	bne.n	800c2f6 <_raise_r+0x42>
 800c2ee:	2316      	movs	r3, #22
 800c2f0:	6003      	str	r3, [r0, #0]
 800c2f2:	2001      	movs	r0, #1
 800c2f4:	e7e7      	b.n	800c2c6 <_raise_r+0x12>
 800c2f6:	2400      	movs	r4, #0
 800c2f8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	4798      	blx	r3
 800c300:	2000      	movs	r0, #0
 800c302:	e7e0      	b.n	800c2c6 <_raise_r+0x12>

0800c304 <raise>:
 800c304:	4b02      	ldr	r3, [pc, #8]	; (800c310 <raise+0xc>)
 800c306:	4601      	mov	r1, r0
 800c308:	6818      	ldr	r0, [r3, #0]
 800c30a:	f7ff bfd3 	b.w	800c2b4 <_raise_r>
 800c30e:	bf00      	nop
 800c310:	24000010 	.word	0x24000010

0800c314 <_kill_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d07      	ldr	r5, [pc, #28]	; (800c334 <_kill_r+0x20>)
 800c318:	2300      	movs	r3, #0
 800c31a:	4604      	mov	r4, r0
 800c31c:	4608      	mov	r0, r1
 800c31e:	4611      	mov	r1, r2
 800c320:	602b      	str	r3, [r5, #0]
 800c322:	f7f5 fa65 	bl	80017f0 <_kill>
 800c326:	1c43      	adds	r3, r0, #1
 800c328:	d102      	bne.n	800c330 <_kill_r+0x1c>
 800c32a:	682b      	ldr	r3, [r5, #0]
 800c32c:	b103      	cbz	r3, 800c330 <_kill_r+0x1c>
 800c32e:	6023      	str	r3, [r4, #0]
 800c330:	bd38      	pop	{r3, r4, r5, pc}
 800c332:	bf00      	nop
 800c334:	2400045c 	.word	0x2400045c

0800c338 <_getpid_r>:
 800c338:	f7f5 ba52 	b.w	80017e0 <_getpid>

0800c33c <_init>:
 800c33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33e:	bf00      	nop
 800c340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c342:	bc08      	pop	{r3}
 800c344:	469e      	mov	lr, r3
 800c346:	4770      	bx	lr

0800c348 <_fini>:
 800c348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c34a:	bf00      	nop
 800c34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c34e:	bc08      	pop	{r3}
 800c350:	469e      	mov	lr, r3
 800c352:	4770      	bx	lr
